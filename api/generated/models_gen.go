// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ApplicationInfrastructurePlanConfig interface {
	IsApplicationInfrastructurePlanConfig()
}

type TrainingInfrastructurePlanConfig interface {
	IsTrainingInfrastructurePlanConfig()
}

type AWSAppConfig struct {
	ID                        string  `json:"id"`
	CloudProviderAppConfigID  string  `json:"cloudProviderAppConfigId"`
	AwsRegion                 string  `json:"awsRegion"`
	Ec2InstanceType           *string `json:"ec2InstanceType"`
	Ec2VolumeSize             *int64  `json:"ec2VolumeSize"`
	EcsDesiredCount           *int64  `json:"ecsDesiredCount"`
	EcsCPU                    *int64  `json:"ecsCpu"`
	EcsMemory                 *int64  `json:"ecsMemory"`
	EcsGpuCount               *int64  `json:"ecsGpuCount"`
	AutoscalingMinSize        *int64  `json:"autoscalingMinSize"`
	AutoscalingMaxSize        *int64  `json:"autoscalingMaxSize"`
	AutoscalingCPUTargetValue *int64  `json:"autoscalingCpuTargetValue"`
}

type AWSAppConfigOrderByWithRelationInput struct {
	ID                        *SortOrder                                      `json:"id,omitempty"`
	CloudProviderAppConfigID  *SortOrder                                      `json:"cloudProviderAppConfigId,omitempty"`
	AwsRegion                 *SortOrder                                      `json:"awsRegion,omitempty"`
	Ec2InstanceType           *SortOrder                                      `json:"ec2InstanceType,omitempty"`
	Ec2VolumeSize             *SortOrder                                      `json:"ec2VolumeSize,omitempty"`
	EcsDesiredCount           *SortOrder                                      `json:"ecsDesiredCount,omitempty"`
	EcsCPU                    *SortOrder                                      `json:"ecsCpu,omitempty"`
	EcsMemory                 *SortOrder                                      `json:"ecsMemory,omitempty"`
	EcsGpuCount               *SortOrder                                      `json:"ecsGpuCount,omitempty"`
	AutoscalingMinSize        *SortOrder                                      `json:"autoscalingMinSize,omitempty"`
	AutoscalingMaxSize        *SortOrder                                      `json:"autoscalingMaxSize,omitempty"`
	AutoscalingCPUTargetValue *SortOrder                                      `json:"autoscalingCpuTargetValue,omitempty"`
	CloudProviderAppConfig    *CloudProviderAppConfigOrderByWithRelationInput `json:"cloudProviderAppConfig,omitempty"`
}

type AWSAppConfigRelationFilter struct {
	Is    *AWSAppConfigWhereInput `json:"is,omitempty"`
	IsNot *AWSAppConfigWhereInput `json:"isNot,omitempty"`
}

type AWSAppConfigWhereInput struct {
	And                       []*AWSAppConfigWhereInput             `json:"AND,omitempty"`
	Or                        []*AWSAppConfigWhereInput             `json:"OR,omitempty"`
	Not                       []*AWSAppConfigWhereInput             `json:"NOT,omitempty"`
	ID                        *StringFilter                         `json:"id,omitempty"`
	CloudProviderAppConfigID  *StringFilter                         `json:"cloudProviderAppConfigId,omitempty"`
	AwsRegion                 *StringFilter                         `json:"awsRegion,omitempty"`
	Ec2InstanceType           *StringNullableFilter                 `json:"ec2InstanceType,omitempty"`
	Ec2VolumeSize             *IntNullableFilter                    `json:"ec2VolumeSize,omitempty"`
	EcsDesiredCount           *IntNullableFilter                    `json:"ecsDesiredCount,omitempty"`
	EcsCPU                    *IntNullableFilter                    `json:"ecsCpu,omitempty"`
	EcsMemory                 *IntNullableFilter                    `json:"ecsMemory,omitempty"`
	EcsGpuCount               *IntNullableFilter                    `json:"ecsGpuCount,omitempty"`
	AutoscalingMinSize        *IntNullableFilter                    `json:"autoscalingMinSize,omitempty"`
	AutoscalingMaxSize        *IntNullableFilter                    `json:"autoscalingMaxSize,omitempty"`
	AutoscalingCPUTargetValue *IntNullableFilter                    `json:"autoscalingCpuTargetValue,omitempty"`
	CloudProviderAppConfig    *CloudProviderAppConfigRelationFilter `json:"cloudProviderAppConfig,omitempty"`
}

type AWSAppConfigWhereUniqueInput struct {
	ID                       *string `json:"id,omitempty"`
	CloudProviderAppConfigID *string `json:"cloudProviderAppConfigId,omitempty"`
}

type AWSAppDefaultConfig struct {
	AwsRegion                 string  `json:"awsRegion"`
	Ec2InstanceType           *string `json:"ec2InstanceType"`
	Ec2VolumeSize             *int64  `json:"ec2VolumeSize"`
	EcsDesiredCount           *int64  `json:"ecsDesiredCount"`
	EcsCPU                    *int64  `json:"ecsCpu"`
	EcsMemory                 *int64  `json:"ecsMemory"`
	EcsGpuCount               *int64  `json:"ecsGpuCount"`
	AutoscalingMinSize        *int64  `json:"autoscalingMinSize"`
	AutoscalingMaxSize        *int64  `json:"autoscalingMaxSize"`
	AutoscalingCPUTargetValue *int64  `json:"autoscalingCpuTargetValue"`
}

func (AWSAppDefaultConfig) IsApplicationInfrastructurePlanConfig() {}

type AWSContainerRegistryConfig struct {
	ID                                     string `json:"id"`
	CloudProviderContainerRegistryConfigID string `json:"cloudProviderContainerRegistryConfigId"`
	AwsRegion                              string `json:"awsRegion"`
}

type AWSContainerRegistryConfigOrderByWithRelationInput struct {
	ID                                     *SortOrder                                                    `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *SortOrder                                                    `json:"cloudProviderContainerRegistryConfigId,omitempty"`
	AwsRegion                              *SortOrder                                                    `json:"awsRegion,omitempty"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfigOrderByWithRelationInput `json:"cloudProviderContainerRegistryConfig,omitempty"`
}

type AWSContainerRegistryConfigRelationFilter struct {
	Is    *AWSContainerRegistryConfigWhereInput `json:"is,omitempty"`
	IsNot *AWSContainerRegistryConfigWhereInput `json:"isNot,omitempty"`
}

type AWSContainerRegistryConfigWhereInput struct {
	And                                    []*AWSContainerRegistryConfigWhereInput             `json:"AND,omitempty"`
	Or                                     []*AWSContainerRegistryConfigWhereInput             `json:"OR,omitempty"`
	Not                                    []*AWSContainerRegistryConfigWhereInput             `json:"NOT,omitempty"`
	ID                                     *StringFilter                                       `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *StringFilter                                       `json:"cloudProviderContainerRegistryConfigId,omitempty"`
	AwsRegion                              *StringFilter                                       `json:"awsRegion,omitempty"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfigRelationFilter `json:"cloudProviderContainerRegistryConfig,omitempty"`
}

type AWSContainerRegistryConfigWhereUniqueInput struct {
	ID                                     *string `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *string `json:"cloudProviderContainerRegistryConfigId,omitempty"`
}

type AWSCredentials struct {
	AwsAccessKey       string `json:"awsAccessKey"`
	AwsSecretAccessKey string `json:"awsSecretAccessKey"`
}

type AWSFalconConfig struct {
	ID                          string  `json:"id"`
	CloudProviderFalconConfigID string  `json:"cloudProviderFalconConfigId"`
	AwsRegion                   string  `json:"awsRegion"`
	Ec2InstanceType             *string `json:"ec2InstanceType"`
	Ec2InstanceCount            *int64  `json:"ec2InstanceCount"`
	Ec2VolumeSize               *int64  `json:"ec2VolumeSize"`
}

type AWSFalconConfigOrderByWithRelationInput struct {
	ID                          *SortOrder                                         `json:"id,omitempty"`
	CloudProviderFalconConfigID *SortOrder                                         `json:"cloudProviderFalconConfigId,omitempty"`
	AwsRegion                   *SortOrder                                         `json:"awsRegion,omitempty"`
	Ec2InstanceType             *SortOrder                                         `json:"ec2InstanceType,omitempty"`
	Ec2InstanceCount            *SortOrder                                         `json:"ec2InstanceCount,omitempty"`
	Ec2VolumeSize               *SortOrder                                         `json:"ec2VolumeSize,omitempty"`
	CloudProviderFalconConfig   *CloudProviderFalconConfigOrderByWithRelationInput `json:"cloudProviderFalconConfig,omitempty"`
}

type AWSFalconConfigRelationFilter struct {
	Is    *AWSFalconConfigWhereInput `json:"is,omitempty"`
	IsNot *AWSFalconConfigWhereInput `json:"isNot,omitempty"`
}

type AWSFalconConfigWhereInput struct {
	And                         []*AWSFalconConfigWhereInput             `json:"AND,omitempty"`
	Or                          []*AWSFalconConfigWhereInput             `json:"OR,omitempty"`
	Not                         []*AWSFalconConfigWhereInput             `json:"NOT,omitempty"`
	ID                          *StringFilter                            `json:"id,omitempty"`
	CloudProviderFalconConfigID *StringFilter                            `json:"cloudProviderFalconConfigId,omitempty"`
	AwsRegion                   *StringFilter                            `json:"awsRegion,omitempty"`
	Ec2InstanceType             *StringNullableFilter                    `json:"ec2InstanceType,omitempty"`
	Ec2InstanceCount            *IntNullableFilter                       `json:"ec2InstanceCount,omitempty"`
	Ec2VolumeSize               *IntNullableFilter                       `json:"ec2VolumeSize,omitempty"`
	CloudProviderFalconConfig   *CloudProviderFalconConfigRelationFilter `json:"cloudProviderFalconConfig,omitempty"`
}

type AWSFalconConfigWhereUniqueInput struct {
	ID                          *string `json:"id,omitempty"`
	CloudProviderFalconConfigID *string `json:"cloudProviderFalconConfigId,omitempty"`
}

type AWSFalconDefaultConfig struct {
	AwsRegion        string  `json:"awsRegion"`
	Ec2InstanceType  *string `json:"ec2InstanceType"`
	Ec2InstanceCount *int64  `json:"ec2InstanceCount"`
	Ec2VolumeSize    *int64  `json:"ec2VolumeSize"`
	IsAvailable      bool    `json:"isAvailable"`
}

func (AWSFalconDefaultConfig) IsTrainingInfrastructurePlanConfig() {}

type AWSNebulonConfig struct {
	ID                           string  `json:"id"`
	CloudProviderNebulonConfigID *string `json:"cloudProviderNebulonConfigId"`
	AwsRegion                    string  `json:"awsRegion"`
	// ID of the VPC created on AWS. This is used to attach other resources to the VPC.
	ResourceID *string `json:"resourceId"`
}

type AWSNebulonConfigOrderByWithRelationInput struct {
	ID                           *SortOrder                                          `json:"id,omitempty"`
	CloudProviderNebulonConfigID *SortOrder                                          `json:"cloudProviderNebulonConfigId,omitempty"`
	AwsRegion                    *SortOrder                                          `json:"awsRegion,omitempty"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfigOrderByWithRelationInput `json:"cloudProviderNebulonConfig,omitempty"`
}

type AWSNebulonConfigRelationFilter struct {
	Is    *AWSNebulonConfigWhereInput `json:"is,omitempty"`
	IsNot *AWSNebulonConfigWhereInput `json:"isNot,omitempty"`
}

type AWSNebulonConfigWhereInput struct {
	And                          []*AWSNebulonConfigWhereInput             `json:"AND,omitempty"`
	Or                           []*AWSNebulonConfigWhereInput             `json:"OR,omitempty"`
	Not                          []*AWSNebulonConfigWhereInput             `json:"NOT,omitempty"`
	ID                           *StringFilter                             `json:"id,omitempty"`
	CloudProviderNebulonConfigID *StringNullableFilter                     `json:"cloudProviderNebulonConfigId,omitempty"`
	AwsRegion                    *StringFilter                             `json:"awsRegion,omitempty"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfigRelationFilter `json:"cloudProviderNebulonConfig,omitempty"`
}

type AWSNebulonConfigWhereUniqueInput struct {
	ID                           *string `json:"id,omitempty"`
	CloudProviderNebulonConfigID *string `json:"cloudProviderNebulonConfigId,omitempty"`
}

type AWSYodaConfig struct {
	ID                        string  `json:"id"`
	CloudProviderYodaConfigID string  `json:"cloudProviderYodaConfigId"`
	AwsRegion                 string  `json:"awsRegion"`
	AwsAccessKey              *string `json:"awsAccessKey"`
	AwsSecretAccessKey        *string `json:"awsSecretAccessKey"`
}

type AWSYodaConfigOrderByWithRelationInput struct {
	ID                        *SortOrder                                       `json:"id,omitempty"`
	CloudProviderYodaConfigID *SortOrder                                       `json:"cloudProviderYodaConfigId,omitempty"`
	AwsRegion                 *SortOrder                                       `json:"awsRegion,omitempty"`
	CloudProviderYodaConfig   *CloudProviderYodaConfigOrderByWithRelationInput `json:"cloudProviderYodaConfig,omitempty"`
}

type AWSYodaConfigRelationFilter struct {
	Is    *AWSYodaConfigWhereInput `json:"is,omitempty"`
	IsNot *AWSYodaConfigWhereInput `json:"isNot,omitempty"`
}

type AWSYodaConfigWhereInput struct {
	And                       []*AWSYodaConfigWhereInput             `json:"AND,omitempty"`
	Or                        []*AWSYodaConfigWhereInput             `json:"OR,omitempty"`
	Not                       []*AWSYodaConfigWhereInput             `json:"NOT,omitempty"`
	ID                        *StringFilter                          `json:"id,omitempty"`
	CloudProviderYodaConfigID *StringFilter                          `json:"cloudProviderYodaConfigId,omitempty"`
	AwsRegion                 *StringFilter                          `json:"awsRegion,omitempty"`
	CloudProviderYodaConfig   *CloudProviderYodaConfigRelationFilter `json:"cloudProviderYodaConfig,omitempty"`
}

type AWSYodaConfigWhereUniqueInput struct {
	ID                        *string `json:"id,omitempty"`
	CloudProviderYodaConfigID *string `json:"cloudProviderYodaConfigId,omitempty"`
}

type Account struct {
	ID                         string                 `json:"id"`
	Username                   string                 `json:"username"`
	UsernameLocked             bool                   `json:"usernameLocked"`
	Email                      string                 `json:"email"`
	GithubAppInstallationID    *int64                 `json:"githubAppInstallationId"`
	GithubAppInstallationState *string                `json:"githubAppInstallationState"`
	CreatedAt                  time.Time              `json:"createdAt"`
	Count                      *AccountCount          `json:"_count"`
	User                       *User                  `json:"user"`
	Team                       *Team                  `json:"team"`
	BillingAccount             *BillingAccount        `json:"billingAccount"`
	Onboarding                 *Onboarding            `json:"onboarding"`
	Projects                   []*Project             `json:"projects"`
	Vpcs                       []*Vpc                 `json:"vpcs"`
	Applications               []*Application         `json:"applications"`
	Trainings                  []*Training            `json:"trainings"`
	DataStorages               []*DataStorage         `json:"dataStorages"`
	Experiments                []*Experiment          `json:"experiments"`
	RayClusters                []*RayCluster          `json:"rayClusters"`
	ContainerRegistries        []*ContainerRegistry   `json:"containerRegistries"`
	CloudProfiles              []*CloudProfile        `json:"cloudProfiles"`
	DefaultCloudProfile        *CloudProfile          `json:"defaultCloudProfile"`
	KubernetesProfiles         []*KubernetesProfile   `json:"kubernetesProfiles"`
	Picture                    *string                `json:"picture"`
	IsTeam                     bool                   `json:"isTeam"`
	DisplayName                string                 `json:"displayName"`
	GithubAppInstallation      *GithubAppInstallation `json:"githubAppInstallation"`
}

type AccountCount struct {
	Projects            int64 `json:"projects"`
	Vpcs                int64 `json:"vpcs"`
	Applications        int64 `json:"applications"`
	Trainings           int64 `json:"trainings"`
	DataStorages        int64 `json:"dataStorages"`
	Experiments         int64 `json:"experiments"`
	RayClusters         int64 `json:"rayClusters"`
	ContainerRegistries int64 `json:"containerRegistries"`
	CloudProfiles       int64 `json:"cloudProfiles"`
	KubernetesProfiles  int64 `json:"kubernetesProfiles"`
}

type AccountOrderByWithRelationInput struct {
	ID                         *SortOrder                                      `json:"id,omitempty"`
	Username                   *SortOrder                                      `json:"username,omitempty"`
	UsernameLocked             *SortOrder                                      `json:"usernameLocked,omitempty"`
	Email                      *SortOrder                                      `json:"email,omitempty"`
	GithubAppInstallationID    *SortOrder                                      `json:"githubAppInstallationId,omitempty"`
	GithubAppInstallationState *SortOrder                                      `json:"githubAppInstallationState,omitempty"`
	CreatedAt                  *SortOrder                                      `json:"createdAt,omitempty"`
	User                       *UserOrderByWithRelationInput                   `json:"user,omitempty"`
	Team                       *TeamOrderByWithRelationInput                   `json:"team,omitempty"`
	BillingAccount             *BillingAccountOrderByWithRelationInput         `json:"billingAccount,omitempty"`
	Onboarding                 *OnboardingOrderByWithRelationInput             `json:"onboarding,omitempty"`
	Projects                   *ProjectOrderByRelationAggregateInput           `json:"projects,omitempty"`
	Vpcs                       *VPCOrderByRelationAggregateInput               `json:"vpcs,omitempty"`
	Applications               *ApplicationOrderByRelationAggregateInput       `json:"applications,omitempty"`
	Trainings                  *TrainingOrderByRelationAggregateInput          `json:"trainings,omitempty"`
	DataStorages               *DataStorageOrderByRelationAggregateInput       `json:"dataStorages,omitempty"`
	Experiments                *ExperimentOrderByRelationAggregateInput        `json:"experiments,omitempty"`
	RayClusters                *RayClusterOrderByRelationAggregateInput        `json:"rayClusters,omitempty"`
	ContainerRegistries        *ContainerRegistryOrderByRelationAggregateInput `json:"containerRegistries,omitempty"`
	CloudProfiles              *CloudProfileOrderByRelationAggregateInput      `json:"cloudProfiles,omitempty"`
	DefaultCloudProfile        *CloudProfileOrderByWithRelationInput           `json:"defaultCloudProfile,omitempty"`
	KubernetesProfiles         *KubernetesProfileOrderByRelationAggregateInput `json:"kubernetesProfiles,omitempty"`
}

type AccountRelationFilter struct {
	Is    *AccountWhereInput `json:"is,omitempty"`
	IsNot *AccountWhereInput `json:"isNot,omitempty"`
}

type AccountWhereInput struct {
	And                        []*AccountWhereInput                 `json:"AND,omitempty"`
	Or                         []*AccountWhereInput                 `json:"OR,omitempty"`
	Not                        []*AccountWhereInput                 `json:"NOT,omitempty"`
	ID                         *StringFilter                        `json:"id,omitempty"`
	Username                   *StringFilter                        `json:"username,omitempty"`
	UsernameLocked             *BoolFilter                          `json:"usernameLocked,omitempty"`
	Email                      *StringFilter                        `json:"email,omitempty"`
	GithubAppInstallationID    *IntNullableFilter                   `json:"githubAppInstallationId,omitempty"`
	GithubAppInstallationState *StringNullableFilter                `json:"githubAppInstallationState,omitempty"`
	CreatedAt                  *DateTimeFilter                      `json:"createdAt,omitempty"`
	User                       *UserRelationFilter                  `json:"user,omitempty"`
	Team                       *TeamRelationFilter                  `json:"team,omitempty"`
	BillingAccount             *BillingAccountRelationFilter        `json:"billingAccount,omitempty"`
	Onboarding                 *OnboardingRelationFilter            `json:"onboarding,omitempty"`
	Projects                   *ProjectListRelationFilter           `json:"projects,omitempty"`
	Vpcs                       *VPCListRelationFilter               `json:"vpcs,omitempty"`
	Applications               *ApplicationListRelationFilter       `json:"applications,omitempty"`
	Trainings                  *TrainingListRelationFilter          `json:"trainings,omitempty"`
	DataStorages               *DataStorageListRelationFilter       `json:"dataStorages,omitempty"`
	Experiments                *ExperimentListRelationFilter        `json:"experiments,omitempty"`
	RayClusters                *RayClusterListRelationFilter        `json:"rayClusters,omitempty"`
	ContainerRegistries        *ContainerRegistryListRelationFilter `json:"containerRegistries,omitempty"`
	CloudProfiles              *CloudProfileListRelationFilter      `json:"cloudProfiles,omitempty"`
	DefaultCloudProfile        *CloudProfileRelationFilter          `json:"defaultCloudProfile,omitempty"`
	KubernetesProfiles         *KubernetesProfileListRelationFilter `json:"kubernetesProfiles,omitempty"`
}

type AccountWhereUniqueInput struct {
	ID       *string `json:"id,omitempty"`
	Username *string `json:"username,omitempty"`
}

type AddBillingAccountDetailsInput struct {
	StripeToken                           string                `json:"stripeToken"`
	IsBillingAddressSameAsCustomerAddress bool                  `json:"isBillingAddressSameAsCustomerAddress"`
	CustomerAddress                       *CustomerAddressInput `json:"customerAddress,omitempty"`
}

type AggregateProject struct {
	Count *ProjectCountAggregate `json:"_count"`
	Avg   *ProjectAvgAggregate   `json:"_avg"`
	Sum   *ProjectSumAggregate   `json:"_sum"`
	Min   *ProjectMinAggregate   `json:"_min"`
	Max   *ProjectMaxAggregate   `json:"_max"`
}

type Application struct {
	ID                       string                  `json:"id"`
	Name                     string                  `json:"name"`
	Status                   ApplicationStatus       `json:"status"`
	AccountID                string                  `json:"accountId"`
	CloudProfileID           *string                 `json:"cloudProfileId"`
	CloudProviderAppConfigID *string                 `json:"cloudProviderAppConfigId"`
	ProjectID                *string                 `json:"projectId"`
	ContainerRegistryID      *string                 `json:"containerRegistryId"`
	CreatedAt                time.Time               `json:"createdAt"`
	UpdatedAt                time.Time               `json:"updatedAt"`
	Count                    *ApplicationCount       `json:"_count"`
	Account                  Account                 `json:"account"`
	CloudProfile             *CloudProfile           `json:"cloudProfile"`
	CloudProviderAppConfig   *CloudProviderAppConfig `json:"cloudProviderAppConfig"`
	Project                  *Project                `json:"project"`
	VpcAttachment            *VPCAttachment          `json:"vpcAttachment"`
	ContainerRegistry        *ContainerRegistry      `json:"containerRegistry"`
	AttachedContainer        *ApplicationContainer   `json:"attachedContainer"`
	Containers               []*ApplicationContainer `json:"containers"`
	EnvironmentVariables     []*EnvironmentVariable  `json:"environmentVariables"`
	TaskActions              []*TaskAction           `json:"taskActions"`
	ResourceBillableUsage    *BillableUsage          `json:"resourceBillableUsage"`
	Hostname                 *string                 `json:"hostname"`
}

type ApplicationContainer struct {
	ID                    string                     `json:"id"`
	AttachedApplicationID *string                    `json:"attachedApplicationId"`
	ApplicationID         *string                    `json:"applicationId"`
	Status                ApplicationContainerStatus `json:"status"`
	Image                 string                     `json:"image"`
	Port                  *int64                     `json:"port"`
	CreatedAt             time.Time                  `json:"createdAt"`
	UpdatedAt             time.Time                  `json:"updatedAt"`
	AttachedApplication   *Application               `json:"attachedApplication"`
	Application           *Application               `json:"application"`
}

type ApplicationContainerListRelationFilter struct {
	Every *ApplicationContainerWhereInput `json:"every,omitempty"`
	Some  *ApplicationContainerWhereInput `json:"some,omitempty"`
	None  *ApplicationContainerWhereInput `json:"none,omitempty"`
}

type ApplicationContainerOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type ApplicationContainerOrderByWithRelationInput struct {
	ID                    *SortOrder                           `json:"id,omitempty"`
	AttachedApplicationID *SortOrder                           `json:"attachedApplicationId,omitempty"`
	ApplicationID         *SortOrder                           `json:"applicationId,omitempty"`
	Status                *SortOrder                           `json:"status,omitempty"`
	Image                 *SortOrder                           `json:"image,omitempty"`
	Port                  *SortOrder                           `json:"port,omitempty"`
	CreatedAt             *SortOrder                           `json:"createdAt,omitempty"`
	UpdatedAt             *SortOrder                           `json:"updatedAt,omitempty"`
	AttachedApplication   *ApplicationOrderByWithRelationInput `json:"attachedApplication,omitempty"`
	Application           *ApplicationOrderByWithRelationInput `json:"application,omitempty"`
}

type ApplicationContainerRelationFilter struct {
	Is    *ApplicationContainerWhereInput `json:"is,omitempty"`
	IsNot *ApplicationContainerWhereInput `json:"isNot,omitempty"`
}

type ApplicationContainerWhereInput struct {
	And                   []*ApplicationContainerWhereInput     `json:"AND,omitempty"`
	Or                    []*ApplicationContainerWhereInput     `json:"OR,omitempty"`
	Not                   []*ApplicationContainerWhereInput     `json:"NOT,omitempty"`
	ID                    *StringFilter                         `json:"id,omitempty"`
	AttachedApplicationID *StringNullableFilter                 `json:"attachedApplicationId,omitempty"`
	ApplicationID         *StringNullableFilter                 `json:"applicationId,omitempty"`
	Status                *EnumApplicationContainerStatusFilter `json:"status,omitempty"`
	Image                 *StringFilter                         `json:"image,omitempty"`
	Port                  *IntNullableFilter                    `json:"port,omitempty"`
	CreatedAt             *DateTimeFilter                       `json:"createdAt,omitempty"`
	UpdatedAt             *DateTimeFilter                       `json:"updatedAt,omitempty"`
	AttachedApplication   *ApplicationRelationFilter            `json:"attachedApplication,omitempty"`
	Application           *ApplicationRelationFilter            `json:"application,omitempty"`
}

type ApplicationContainerWhereUniqueInput struct {
	ID                    *string `json:"id,omitempty"`
	AttachedApplicationID *string `json:"attachedApplicationId,omitempty"`
}

type ApplicationCount struct {
	Containers           int64 `json:"containers"`
	EnvironmentVariables int64 `json:"environmentVariables"`
	TaskActions          int64 `json:"taskActions"`
}

type ApplicationInfrastructurePlan struct {
	Provider CloudProvider                       `json:"provider"`
	Plan     CloudProviderAppConfigPlan          `json:"plan"`
	Config   ApplicationInfrastructurePlanConfig `json:"config"`
}

type ApplicationListRelationFilter struct {
	Every *ApplicationWhereInput `json:"every,omitempty"`
	Some  *ApplicationWhereInput `json:"some,omitempty"`
	None  *ApplicationWhereInput `json:"none,omitempty"`
}

type ApplicationOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type ApplicationOrderByWithRelationInput struct {
	ID                       *SortOrder                                         `json:"id,omitempty"`
	Name                     *SortOrder                                         `json:"name,omitempty"`
	Status                   *SortOrder                                         `json:"status,omitempty"`
	AccountID                *SortOrder                                         `json:"accountId,omitempty"`
	CloudProfileID           *SortOrder                                         `json:"cloudProfileId,omitempty"`
	CloudProviderAppConfigID *SortOrder                                         `json:"cloudProviderAppConfigId,omitempty"`
	ProjectID                *SortOrder                                         `json:"projectId,omitempty"`
	ContainerRegistryID      *SortOrder                                         `json:"containerRegistryId,omitempty"`
	CreatedAt                *SortOrder                                         `json:"createdAt,omitempty"`
	UpdatedAt                *SortOrder                                         `json:"updatedAt,omitempty"`
	Account                  *AccountOrderByWithRelationInput                   `json:"account,omitempty"`
	CloudProfile             *CloudProfileOrderByWithRelationInput              `json:"cloudProfile,omitempty"`
	CloudProviderAppConfig   *CloudProviderAppConfigOrderByWithRelationInput    `json:"cloudProviderAppConfig,omitempty"`
	Project                  *ProjectOrderByWithRelationInput                   `json:"project,omitempty"`
	VpcAttachment            *VPCAttachmentOrderByWithRelationInput             `json:"vpcAttachment,omitempty"`
	ContainerRegistry        *ContainerRegistryOrderByWithRelationInput         `json:"containerRegistry,omitempty"`
	AttachedContainer        *ApplicationContainerOrderByWithRelationInput      `json:"attachedContainer,omitempty"`
	Containers               *ApplicationContainerOrderByRelationAggregateInput `json:"containers,omitempty"`
	EnvironmentVariables     *EnvironmentVariableOrderByRelationAggregateInput  `json:"environmentVariables,omitempty"`
	TaskActions              *TaskActionOrderByRelationAggregateInput           `json:"taskActions,omitempty"`
	ResourceBillableUsage    *BillableUsageOrderByWithRelationInput             `json:"resourceBillableUsage,omitempty"`
}

type ApplicationRelationFilter struct {
	Is    *ApplicationWhereInput `json:"is,omitempty"`
	IsNot *ApplicationWhereInput `json:"isNot,omitempty"`
}

type ApplicationWhereInput struct {
	And                      []*ApplicationWhereInput                `json:"AND,omitempty"`
	Or                       []*ApplicationWhereInput                `json:"OR,omitempty"`
	Not                      []*ApplicationWhereInput                `json:"NOT,omitempty"`
	ID                       *StringFilter                           `json:"id,omitempty"`
	Name                     *StringFilter                           `json:"name,omitempty"`
	Status                   *EnumApplicationStatusFilter            `json:"status,omitempty"`
	AccountID                *StringFilter                           `json:"accountId,omitempty"`
	CloudProfileID           *StringNullableFilter                   `json:"cloudProfileId,omitempty"`
	CloudProviderAppConfigID *StringNullableFilter                   `json:"cloudProviderAppConfigId,omitempty"`
	ProjectID                *StringNullableFilter                   `json:"projectId,omitempty"`
	ContainerRegistryID      *StringNullableFilter                   `json:"containerRegistryId,omitempty"`
	CreatedAt                *DateTimeFilter                         `json:"createdAt,omitempty"`
	UpdatedAt                *DateTimeFilter                         `json:"updatedAt,omitempty"`
	Account                  *AccountRelationFilter                  `json:"account,omitempty"`
	CloudProfile             *CloudProfileRelationFilter             `json:"cloudProfile,omitempty"`
	CloudProviderAppConfig   *CloudProviderAppConfigRelationFilter   `json:"cloudProviderAppConfig,omitempty"`
	Project                  *ProjectRelationFilter                  `json:"project,omitempty"`
	VpcAttachment            *VPCAttachmentRelationFilter            `json:"vpcAttachment,omitempty"`
	ContainerRegistry        *ContainerRegistryRelationFilter        `json:"containerRegistry,omitempty"`
	AttachedContainer        *ApplicationContainerRelationFilter     `json:"attachedContainer,omitempty"`
	Containers               *ApplicationContainerListRelationFilter `json:"containers,omitempty"`
	EnvironmentVariables     *EnvironmentVariableListRelationFilter  `json:"environmentVariables,omitempty"`
	TaskActions              *TaskActionListRelationFilter           `json:"taskActions,omitempty"`
	ResourceBillableUsage    *BillableUsageRelationFilter            `json:"resourceBillableUsage,omitempty"`
}

type ApplicationWhereUniqueInput struct {
	ID                       *string `json:"id,omitempty"`
	CloudProviderAppConfigID *string `json:"cloudProviderAppConfigId,omitempty"`
}

type AzureAppConfig struct {
	ID                       string  `json:"id"`
	CloudProviderAppConfigID string  `json:"cloudProviderAppConfigId"`
	AzureRegion              string  `json:"azureRegion"`
	ContainerRegistry        *string `json:"containerRegistry"`
	CgCPU                    *string `json:"cgCpu"`
	CgMemory                 *string `json:"cgMemory"`
	CgGpuCount               *int64  `json:"cgGpuCount"`
	CgGpuSku                 *string `json:"cgGpuSku"`
}

type AzureAppConfigOrderByWithRelationInput struct {
	ID                       *SortOrder                                      `json:"id,omitempty"`
	CloudProviderAppConfigID *SortOrder                                      `json:"cloudProviderAppConfigId,omitempty"`
	AzureRegion              *SortOrder                                      `json:"azureRegion,omitempty"`
	ContainerRegistry        *SortOrder                                      `json:"containerRegistry,omitempty"`
	CgCPU                    *SortOrder                                      `json:"cgCpu,omitempty"`
	CgMemory                 *SortOrder                                      `json:"cgMemory,omitempty"`
	CgGpuCount               *SortOrder                                      `json:"cgGpuCount,omitempty"`
	CgGpuSku                 *SortOrder                                      `json:"cgGpuSku,omitempty"`
	CloudProviderAppConfig   *CloudProviderAppConfigOrderByWithRelationInput `json:"cloudProviderAppConfig,omitempty"`
}

type AzureAppConfigRelationFilter struct {
	Is    *AzureAppConfigWhereInput `json:"is,omitempty"`
	IsNot *AzureAppConfigWhereInput `json:"isNot,omitempty"`
}

type AzureAppConfigWhereInput struct {
	And                      []*AzureAppConfigWhereInput           `json:"AND,omitempty"`
	Or                       []*AzureAppConfigWhereInput           `json:"OR,omitempty"`
	Not                      []*AzureAppConfigWhereInput           `json:"NOT,omitempty"`
	ID                       *StringFilter                         `json:"id,omitempty"`
	CloudProviderAppConfigID *StringFilter                         `json:"cloudProviderAppConfigId,omitempty"`
	AzureRegion              *StringFilter                         `json:"azureRegion,omitempty"`
	ContainerRegistry        *StringNullableFilter                 `json:"containerRegistry,omitempty"`
	CgCPU                    *StringNullableFilter                 `json:"cgCpu,omitempty"`
	CgMemory                 *StringNullableFilter                 `json:"cgMemory,omitempty"`
	CgGpuCount               *IntNullableFilter                    `json:"cgGpuCount,omitempty"`
	CgGpuSku                 *StringNullableFilter                 `json:"cgGpuSku,omitempty"`
	CloudProviderAppConfig   *CloudProviderAppConfigRelationFilter `json:"cloudProviderAppConfig,omitempty"`
}

type AzureAppConfigWhereUniqueInput struct {
	ID                       *string `json:"id,omitempty"`
	CloudProviderAppConfigID *string `json:"cloudProviderAppConfigId,omitempty"`
}

type AzureAppDefaultConfig struct {
	AzureRegion string  `json:"azureRegion"`
	CgCPU       *string `json:"cgCpu"`
	CgMemory    *string `json:"cgMemory"`
	CgGpuCount  *int64  `json:"cgGpuCount"`
	CgGpuSku    *string `json:"cgGpuSku"`
}

func (AzureAppDefaultConfig) IsApplicationInfrastructurePlanConfig() {}

type AzureContainerRegistryConfig struct {
	ID                                     string `json:"id"`
	CloudProviderContainerRegistryConfigID string `json:"cloudProviderContainerRegistryConfigId"`
}

type AzureContainerRegistryConfigOrderByWithRelationInput struct {
	ID                                     *SortOrder                                                    `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *SortOrder                                                    `json:"cloudProviderContainerRegistryConfigId,omitempty"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfigOrderByWithRelationInput `json:"cloudProviderContainerRegistryConfig,omitempty"`
}

type AzureContainerRegistryConfigRelationFilter struct {
	Is    *AzureContainerRegistryConfigWhereInput `json:"is,omitempty"`
	IsNot *AzureContainerRegistryConfigWhereInput `json:"isNot,omitempty"`
}

type AzureContainerRegistryConfigWhereInput struct {
	And                                    []*AzureContainerRegistryConfigWhereInput           `json:"AND,omitempty"`
	Or                                     []*AzureContainerRegistryConfigWhereInput           `json:"OR,omitempty"`
	Not                                    []*AzureContainerRegistryConfigWhereInput           `json:"NOT,omitempty"`
	ID                                     *StringFilter                                       `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *StringFilter                                       `json:"cloudProviderContainerRegistryConfigId,omitempty"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfigRelationFilter `json:"cloudProviderContainerRegistryConfig,omitempty"`
}

type AzureContainerRegistryConfigWhereUniqueInput struct {
	ID                                     *string `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *string `json:"cloudProviderContainerRegistryConfigId,omitempty"`
}

type AzureCredentials struct {
	AzureSubscriptionID string `json:"azureSubscriptionId"`
	AzureTenantID       string `json:"azureTenantId"`
	AzureClientID       string `json:"azureClientId"`
	AzureClientSecret   string `json:"azureClientSecret"`
}

type AzureFalconConfig struct {
	ID                          string  `json:"id"`
	CloudProviderFalconConfigID string  `json:"cloudProviderFalconConfigId"`
	AzureRegion                 string  `json:"azureRegion"`
	VMSize                      *string `json:"vmSize"`
	VMInstanceCount             *int64  `json:"vmInstanceCount"`
	VMVolumeSize                *int64  `json:"vmVolumeSize"`
}

type AzureFalconConfigOrderByWithRelationInput struct {
	ID                          *SortOrder                                         `json:"id,omitempty"`
	CloudProviderFalconConfigID *SortOrder                                         `json:"cloudProviderFalconConfigId,omitempty"`
	AzureRegion                 *SortOrder                                         `json:"azureRegion,omitempty"`
	VMSize                      *SortOrder                                         `json:"vmSize,omitempty"`
	VMInstanceCount             *SortOrder                                         `json:"vmInstanceCount,omitempty"`
	VMVolumeSize                *SortOrder                                         `json:"vmVolumeSize,omitempty"`
	CloudProviderFalconConfig   *CloudProviderFalconConfigOrderByWithRelationInput `json:"cloudProviderFalconConfig,omitempty"`
}

type AzureFalconConfigRelationFilter struct {
	Is    *AzureFalconConfigWhereInput `json:"is,omitempty"`
	IsNot *AzureFalconConfigWhereInput `json:"isNot,omitempty"`
}

type AzureFalconConfigWhereInput struct {
	And                         []*AzureFalconConfigWhereInput           `json:"AND,omitempty"`
	Or                          []*AzureFalconConfigWhereInput           `json:"OR,omitempty"`
	Not                         []*AzureFalconConfigWhereInput           `json:"NOT,omitempty"`
	ID                          *StringFilter                            `json:"id,omitempty"`
	CloudProviderFalconConfigID *StringFilter                            `json:"cloudProviderFalconConfigId,omitempty"`
	AzureRegion                 *StringFilter                            `json:"azureRegion,omitempty"`
	VMSize                      *StringNullableFilter                    `json:"vmSize,omitempty"`
	VMInstanceCount             *IntNullableFilter                       `json:"vmInstanceCount,omitempty"`
	VMVolumeSize                *IntNullableFilter                       `json:"vmVolumeSize,omitempty"`
	CloudProviderFalconConfig   *CloudProviderFalconConfigRelationFilter `json:"cloudProviderFalconConfig,omitempty"`
}

type AzureFalconConfigWhereUniqueInput struct {
	ID                          *string `json:"id,omitempty"`
	CloudProviderFalconConfigID *string `json:"cloudProviderFalconConfigId,omitempty"`
}

type AzureFalconDefaultConfig struct {
	AzureRegion     string  `json:"azureRegion"`
	VMSize          *string `json:"vmSize"`
	VMInstanceCount *int64  `json:"vmInstanceCount"`
	VMVolumeSize    *int64  `json:"vmVolumeSize"`
	IsAvailable     bool    `json:"isAvailable"`
}

func (AzureFalconDefaultConfig) IsTrainingInfrastructurePlanConfig() {}

type AzureNebulonConfig struct {
	ID                           string  `json:"id"`
	CloudProviderNebulonConfigID *string `json:"cloudProviderNebulonConfigId"`
	AzureRegion                  string  `json:"azureRegion"`
	// ID of the Virtual Network created on Azure. This is used to attach other resources to the Virtual Network.
	ResourceName *string `json:"resourceName"`
}

type AzureNebulonConfigOrderByWithRelationInput struct {
	ID                           *SortOrder                                          `json:"id,omitempty"`
	CloudProviderNebulonConfigID *SortOrder                                          `json:"cloudProviderNebulonConfigId,omitempty"`
	AzureRegion                  *SortOrder                                          `json:"azureRegion,omitempty"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfigOrderByWithRelationInput `json:"cloudProviderNebulonConfig,omitempty"`
}

type AzureNebulonConfigRelationFilter struct {
	Is    *AzureNebulonConfigWhereInput `json:"is,omitempty"`
	IsNot *AzureNebulonConfigWhereInput `json:"isNot,omitempty"`
}

type AzureNebulonConfigWhereInput struct {
	And                          []*AzureNebulonConfigWhereInput           `json:"AND,omitempty"`
	Or                           []*AzureNebulonConfigWhereInput           `json:"OR,omitempty"`
	Not                          []*AzureNebulonConfigWhereInput           `json:"NOT,omitempty"`
	ID                           *StringFilter                             `json:"id,omitempty"`
	CloudProviderNebulonConfigID *StringNullableFilter                     `json:"cloudProviderNebulonConfigId,omitempty"`
	AzureRegion                  *StringFilter                             `json:"azureRegion,omitempty"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfigRelationFilter `json:"cloudProviderNebulonConfig,omitempty"`
}

type AzureNebulonConfigWhereUniqueInput struct {
	ID                           *string `json:"id,omitempty"`
	CloudProviderNebulonConfigID *string `json:"cloudProviderNebulonConfigId,omitempty"`
}

type AzureYodaConfig struct {
	ID                        string  `json:"id"`
	CloudProviderYodaConfigID string  `json:"cloudProviderYodaConfigId"`
	AzureRegion               string  `json:"azureRegion"`
	StorageAccount            *string `json:"storageAccount"`
	StorageAccessKey          *string `json:"storageAccessKey"`
}

type AzureYodaConfigOrderByWithRelationInput struct {
	ID                        *SortOrder                                       `json:"id,omitempty"`
	CloudProviderYodaConfigID *SortOrder                                       `json:"cloudProviderYodaConfigId,omitempty"`
	AzureRegion               *SortOrder                                       `json:"azureRegion,omitempty"`
	CloudProviderYodaConfig   *CloudProviderYodaConfigOrderByWithRelationInput `json:"cloudProviderYodaConfig,omitempty"`
}

type AzureYodaConfigRelationFilter struct {
	Is    *AzureYodaConfigWhereInput `json:"is,omitempty"`
	IsNot *AzureYodaConfigWhereInput `json:"isNot,omitempty"`
}

type AzureYodaConfigWhereInput struct {
	And                       []*AzureYodaConfigWhereInput           `json:"AND,omitempty"`
	Or                        []*AzureYodaConfigWhereInput           `json:"OR,omitempty"`
	Not                       []*AzureYodaConfigWhereInput           `json:"NOT,omitempty"`
	ID                        *StringFilter                          `json:"id,omitempty"`
	CloudProviderYodaConfigID *StringFilter                          `json:"cloudProviderYodaConfigId,omitempty"`
	AzureRegion               *StringFilter                          `json:"azureRegion,omitempty"`
	CloudProviderYodaConfig   *CloudProviderYodaConfigRelationFilter `json:"cloudProviderYodaConfig,omitempty"`
}

type AzureYodaConfigWhereUniqueInput struct {
	ID                        *string `json:"id,omitempty"`
	CloudProviderYodaConfigID *string `json:"cloudProviderYodaConfigId,omitempty"`
}

type BillableUsage struct {
	ID               int64               `json:"id"`
	BillingAccountID string              `json:"billingAccountId"`
	ApplicationID    *string             `json:"applicationId"`
	TrainingID       *string             `json:"trainingId"`
	TaskActionID     *string             `json:"taskActionId"`
	ActiveRecordID   *int64              `json:"activeRecordId"`
	IsActive         bool                `json:"isActive"`
	Type             BillableUsageType   `json:"type"`
	Count            *BillableUsageCount `json:"_count"`
}

type BillableUsageCount struct {
	Records int64 `json:"records"`
}

type BillableUsageListRelationFilter struct {
	Every *BillableUsageWhereInput `json:"every,omitempty"`
	Some  *BillableUsageWhereInput `json:"some,omitempty"`
	None  *BillableUsageWhereInput `json:"none,omitempty"`
}

type BillableUsageOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type BillableUsageOrderByWithRelationInput struct {
	ID               *SortOrder                                        `json:"id,omitempty"`
	BillingAccountID *SortOrder                                        `json:"billingAccountId,omitempty"`
	ApplicationID    *SortOrder                                        `json:"applicationId,omitempty"`
	TrainingID       *SortOrder                                        `json:"trainingId,omitempty"`
	TaskActionID     *SortOrder                                        `json:"taskActionId,omitempty"`
	ActiveRecordID   *SortOrder                                        `json:"activeRecordId,omitempty"`
	IsActive         *SortOrder                                        `json:"isActive,omitempty"`
	Type             *SortOrder                                        `json:"type,omitempty"`
	BillingAccount   *BillingAccountOrderByWithRelationInput           `json:"billingAccount,omitempty"`
	Application      *ApplicationOrderByWithRelationInput              `json:"application,omitempty"`
	Training         *TrainingOrderByWithRelationInput                 `json:"training,omitempty"`
	TaskAction       *TaskActionOrderByWithRelationInput               `json:"taskAction,omitempty"`
	ActiveRecord     *BillableUsageRecordOrderByWithRelationInput      `json:"activeRecord,omitempty"`
	Records          *BillableUsageRecordOrderByRelationAggregateInput `json:"records,omitempty"`
}

type BillableUsageRecordListRelationFilter struct {
	Every *BillableUsageRecordWhereInput `json:"every,omitempty"`
	Some  *BillableUsageRecordWhereInput `json:"some,omitempty"`
	None  *BillableUsageRecordWhereInput `json:"none,omitempty"`
}

type BillableUsageRecordOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type BillableUsageRecordOrderByWithRelationInput struct {
	ID                  *SortOrder                             `json:"id,omitempty"`
	PastBillableUsageID *SortOrder                             `json:"pastBillableUsageId,omitempty"`
	RecordStart         *SortOrder                             `json:"recordStart,omitempty"`
	RecordEnd           *SortOrder                             `json:"recordEnd,omitempty"`
	DurationInSeconds   *SortOrder                             `json:"durationInSeconds,omitempty"`
	IsActive            *SortOrder                             `json:"isActive,omitempty"`
	IsCommitted         *SortOrder                             `json:"isCommitted,omitempty"`
	BillableUsage       *BillableUsageOrderByWithRelationInput `json:"billableUsage,omitempty"`
	PastBillableUsage   *BillableUsageOrderByWithRelationInput `json:"pastBillableUsage,omitempty"`
}

type BillableUsageRecordRelationFilter struct {
	Is    *BillableUsageRecordWhereInput `json:"is,omitempty"`
	IsNot *BillableUsageRecordWhereInput `json:"isNot,omitempty"`
}

type BillableUsageRecordWhereInput struct {
	And                 []*BillableUsageRecordWhereInput `json:"AND,omitempty"`
	Or                  []*BillableUsageRecordWhereInput `json:"OR,omitempty"`
	Not                 []*BillableUsageRecordWhereInput `json:"NOT,omitempty"`
	ID                  *IntFilter                       `json:"id,omitempty"`
	PastBillableUsageID *IntFilter                       `json:"pastBillableUsageId,omitempty"`
	RecordStart         *DateTimeFilter                  `json:"recordStart,omitempty"`
	RecordEnd           *DateTimeNullableFilter          `json:"recordEnd,omitempty"`
	DurationInSeconds   *IntFilter                       `json:"durationInSeconds,omitempty"`
	IsActive            *BoolFilter                      `json:"isActive,omitempty"`
	IsCommitted         *BoolFilter                      `json:"isCommitted,omitempty"`
	BillableUsage       *BillableUsageRelationFilter     `json:"billableUsage,omitempty"`
	PastBillableUsage   *BillableUsageRelationFilter     `json:"pastBillableUsage,omitempty"`
}

type BillableUsageRelationFilter struct {
	Is    *BillableUsageWhereInput `json:"is,omitempty"`
	IsNot *BillableUsageWhereInput `json:"isNot,omitempty"`
}

type BillableUsageWhereInput struct {
	And              []*BillableUsageWhereInput             `json:"AND,omitempty"`
	Or               []*BillableUsageWhereInput             `json:"OR,omitempty"`
	Not              []*BillableUsageWhereInput             `json:"NOT,omitempty"`
	ID               *IntFilter                             `json:"id,omitempty"`
	BillingAccountID *StringFilter                          `json:"billingAccountId,omitempty"`
	ApplicationID    *StringNullableFilter                  `json:"applicationId,omitempty"`
	TrainingID       *StringNullableFilter                  `json:"trainingId,omitempty"`
	TaskActionID     *StringNullableFilter                  `json:"taskActionId,omitempty"`
	ActiveRecordID   *IntNullableFilter                     `json:"activeRecordId,omitempty"`
	IsActive         *BoolFilter                            `json:"isActive,omitempty"`
	Type             *EnumBillableUsageTypeFilter           `json:"type,omitempty"`
	BillingAccount   *BillingAccountRelationFilter          `json:"billingAccount,omitempty"`
	Application      *ApplicationRelationFilter             `json:"application,omitempty"`
	Training         *TrainingRelationFilter                `json:"training,omitempty"`
	TaskAction       *TaskActionRelationFilter              `json:"taskAction,omitempty"`
	ActiveRecord     *BillableUsageRecordRelationFilter     `json:"activeRecord,omitempty"`
	Records          *BillableUsageRecordListRelationFilter `json:"records,omitempty"`
}

type BillingAccount struct {
	ID                           string                 `json:"id"`
	AccountID                    string                 `json:"accountId"`
	Provider                     BillingPaymentProvider `json:"provider"`
	StripeCustomerID             *string                `json:"stripeCustomerId"`
	Count                        *BillingAccountCount   `json:"_count"`
	CurrentSubscription          *BillingSubscription   `json:"currentSubscription"`
	StripeCustomer               *StripeCustomer        `json:"stripeCustomer"`
	CanCancelBillingSubscription bool                   `json:"canCancelBillingSubscription"`
}

type BillingAccountCount struct {
	Subscriptions  int64 `json:"subscriptions"`
	BillableUsages int64 `json:"billableUsages"`
}

type BillingAccountOrderByWithRelationInput struct {
	ID                  *SortOrder                                        `json:"id,omitempty"`
	AccountID           *SortOrder                                        `json:"accountId,omitempty"`
	Provider            *SortOrder                                        `json:"provider,omitempty"`
	StripeCustomerID    *SortOrder                                        `json:"stripeCustomerId,omitempty"`
	Account             *AccountOrderByWithRelationInput                  `json:"account,omitempty"`
	CurrentSubscription *BillingSubscriptionOrderByWithRelationInput      `json:"currentSubscription,omitempty"`
	Subscriptions       *BillingSubscriptionOrderByRelationAggregateInput `json:"subscriptions,omitempty"`
	BillableUsages      *BillableUsageOrderByRelationAggregateInput       `json:"billableUsages,omitempty"`
}

type BillingAccountRelationFilter struct {
	Is    *BillingAccountWhereInput `json:"is,omitempty"`
	IsNot *BillingAccountWhereInput `json:"isNot,omitempty"`
}

type BillingAccountWhereInput struct {
	And                 []*BillingAccountWhereInput            `json:"AND,omitempty"`
	Or                  []*BillingAccountWhereInput            `json:"OR,omitempty"`
	Not                 []*BillingAccountWhereInput            `json:"NOT,omitempty"`
	ID                  *StringFilter                          `json:"id,omitempty"`
	AccountID           *StringFilter                          `json:"accountId,omitempty"`
	Provider            *EnumBillingPaymentProviderFilter      `json:"provider,omitempty"`
	StripeCustomerID    *StringNullableFilter                  `json:"stripeCustomerId,omitempty"`
	Account             *AccountRelationFilter                 `json:"account,omitempty"`
	CurrentSubscription *BillingSubscriptionRelationFilter     `json:"currentSubscription,omitempty"`
	Subscriptions       *BillingSubscriptionListRelationFilter `json:"subscriptions,omitempty"`
	BillableUsages      *BillableUsageListRelationFilter       `json:"billableUsages,omitempty"`
}

type BillingSubscription struct {
	ID                     string                    `json:"id"`
	BillingAccountID       *string                   `json:"billingAccountId"`
	PastBillingAccountID   *string                   `json:"pastBillingAccountId"`
	CurrentActivePeriodEnd time.Time                 `json:"currentActivePeriodEnd"`
	Status                 BillingSubscriptionStatus `json:"status"`
	CreatedAt              time.Time                 `json:"createdAt"`
	UpdatedAt              time.Time                 `json:"updatedAt"`
	StripeSubscriptionID   *string                   `json:"stripeSubscriptionId"`
	BillingAccount         *BillingAccount           `json:"billingAccount"`
	PastBillingAccount     *BillingAccount           `json:"pastBillingAccount"`
}

type BillingSubscriptionListRelationFilter struct {
	Every *BillingSubscriptionWhereInput `json:"every,omitempty"`
	Some  *BillingSubscriptionWhereInput `json:"some,omitempty"`
	None  *BillingSubscriptionWhereInput `json:"none,omitempty"`
}

type BillingSubscriptionOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type BillingSubscriptionOrderByWithRelationInput struct {
	ID                     *SortOrder                              `json:"id,omitempty"`
	BillingAccountID       *SortOrder                              `json:"billingAccountId,omitempty"`
	PastBillingAccountID   *SortOrder                              `json:"pastBillingAccountId,omitempty"`
	CurrentActivePeriodEnd *SortOrder                              `json:"currentActivePeriodEnd,omitempty"`
	Status                 *SortOrder                              `json:"status,omitempty"`
	CreatedAt              *SortOrder                              `json:"createdAt,omitempty"`
	UpdatedAt              *SortOrder                              `json:"updatedAt,omitempty"`
	StripeSubscriptionID   *SortOrder                              `json:"stripeSubscriptionId,omitempty"`
	BillingAccount         *BillingAccountOrderByWithRelationInput `json:"billingAccount,omitempty"`
	PastBillingAccount     *BillingAccountOrderByWithRelationInput `json:"pastBillingAccount,omitempty"`
}

type BillingSubscriptionRelationFilter struct {
	Is    *BillingSubscriptionWhereInput `json:"is,omitempty"`
	IsNot *BillingSubscriptionWhereInput `json:"isNot,omitempty"`
}

type BillingSubscriptionWhereInput struct {
	And                    []*BillingSubscriptionWhereInput     `json:"AND,omitempty"`
	Or                     []*BillingSubscriptionWhereInput     `json:"OR,omitempty"`
	Not                    []*BillingSubscriptionWhereInput     `json:"NOT,omitempty"`
	ID                     *StringFilter                        `json:"id,omitempty"`
	BillingAccountID       *StringNullableFilter                `json:"billingAccountId,omitempty"`
	PastBillingAccountID   *StringNullableFilter                `json:"pastBillingAccountId,omitempty"`
	CurrentActivePeriodEnd *DateTimeFilter                      `json:"currentActivePeriodEnd,omitempty"`
	Status                 *EnumBillingSubscriptionStatusFilter `json:"status,omitempty"`
	CreatedAt              *DateTimeFilter                      `json:"createdAt,omitempty"`
	UpdatedAt              *DateTimeFilter                      `json:"updatedAt,omitempty"`
	StripeSubscriptionID   *StringNullableFilter                `json:"stripeSubscriptionId,omitempty"`
	BillingAccount         *BillingAccountRelationFilter        `json:"billingAccount,omitempty"`
	PastBillingAccount     *BillingAccountRelationFilter        `json:"pastBillingAccount,omitempty"`
}

type BoolFilter struct {
	Equals *bool             `json:"equals,omitempty"`
	Not    *NestedBoolFilter `json:"not,omitempty"`
}

type BoolNullableFilter struct {
	Equals *bool                     `json:"equals,omitempty"`
	Not    *NestedBoolNullableFilter `json:"not,omitempty"`
}

type CloudCredentials struct {
	ID                     string  `json:"id"`
	AwsAccessKey           *string `json:"awsAccessKey"`
	AwsSecretAccessKey     *string `json:"awsSecretAccessKey"`
	AzureSubscriptionID    *string `json:"azureSubscriptionId"`
	AzureTenantID          *string `json:"azureTenantId"`
	AzureClientID          *string `json:"azureClientId"`
	AzureClientSecret      *string `json:"azureClientSecret"`
	AzureResourceGroupName *string `json:"azureResourceGroupName"`
	GcpProjectID           *string `json:"gcpProjectId"`
	GcpServiceAccountKey   *string `json:"gcpServiceAccountKey"`
}

type CloudCredentialsOrderByWithRelationInput struct {
	ID                     *SortOrder                            `json:"id,omitempty"`
	AwsAccessKey           *SortOrder                            `json:"awsAccessKey,omitempty"`
	AwsSecretAccessKey     *SortOrder                            `json:"awsSecretAccessKey,omitempty"`
	AzureSubscriptionID    *SortOrder                            `json:"azureSubscriptionId,omitempty"`
	AzureTenantID          *SortOrder                            `json:"azureTenantId,omitempty"`
	AzureClientID          *SortOrder                            `json:"azureClientId,omitempty"`
	AzureClientSecret      *SortOrder                            `json:"azureClientSecret,omitempty"`
	AzureResourceGroupName *SortOrder                            `json:"azureResourceGroupName,omitempty"`
	GcpProjectID           *SortOrder                            `json:"gcpProjectId,omitempty"`
	GcpServiceAccountKey   *SortOrder                            `json:"gcpServiceAccountKey,omitempty"`
	CloudProfile           *CloudProfileOrderByWithRelationInput `json:"cloudProfile,omitempty"`
}

type CloudCredentialsRelationFilter struct {
	Is    *CloudCredentialsWhereInput `json:"is,omitempty"`
	IsNot *CloudCredentialsWhereInput `json:"isNot,omitempty"`
}

type CloudCredentialsWhereInput struct {
	And                    []*CloudCredentialsWhereInput `json:"AND,omitempty"`
	Or                     []*CloudCredentialsWhereInput `json:"OR,omitempty"`
	Not                    []*CloudCredentialsWhereInput `json:"NOT,omitempty"`
	ID                     *StringFilter                 `json:"id,omitempty"`
	AwsAccessKey           *StringNullableFilter         `json:"awsAccessKey,omitempty"`
	AwsSecretAccessKey     *StringNullableFilter         `json:"awsSecretAccessKey,omitempty"`
	AzureSubscriptionID    *StringNullableFilter         `json:"azureSubscriptionId,omitempty"`
	AzureTenantID          *StringNullableFilter         `json:"azureTenantId,omitempty"`
	AzureClientID          *StringNullableFilter         `json:"azureClientId,omitempty"`
	AzureClientSecret      *StringNullableFilter         `json:"azureClientSecret,omitempty"`
	AzureResourceGroupName *StringNullableFilter         `json:"azureResourceGroupName,omitempty"`
	GcpProjectID           *StringNullableFilter         `json:"gcpProjectId,omitempty"`
	GcpServiceAccountKey   *StringNullableFilter         `json:"gcpServiceAccountKey,omitempty"`
	CloudProfile           *CloudProfileRelationFilter   `json:"cloudProfile,omitempty"`
}

type CloudProfile struct {
	ID               string             `json:"id"`
	Name             string             `json:"name"`
	Provider         CloudProvider      `json:"provider"`
	Hosted           bool               `json:"hosted"`
	AccountID        string             `json:"accountId"`
	DefaultAccountID *string            `json:"defaultAccountId"`
	CredentialsID    string             `json:"credentialsId"`
	Count            *CloudProfileCount `json:"_count"`
	IsEmpty          bool               `json:"isEmpty"`
	IsDefault        bool               `json:"isDefault"`
	Credentials      CloudCredentials   `json:"credentials"`
}

type CloudProfileAccountIDNameProviderCompoundUniqueInput struct {
	AccountID string        `json:"accountId"`
	Name      string        `json:"name"`
	Provider  CloudProvider `json:"provider"`
}

type CloudProfileCount struct {
	Projects            int64 `json:"projects"`
	Vpcs                int64 `json:"vpcs"`
	Applications        int64 `json:"applications"`
	Trainings           int64 `json:"trainings"`
	DataStorages        int64 `json:"dataStorages"`
	Experiments         int64 `json:"experiments"`
	ContainerRegistries int64 `json:"containerRegistries"`
}

type CloudProfileListRelationFilter struct {
	Every *CloudProfileWhereInput `json:"every,omitempty"`
	Some  *CloudProfileWhereInput `json:"some,omitempty"`
	None  *CloudProfileWhereInput `json:"none,omitempty"`
}

type CloudProfileOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type CloudProfileOrderByWithRelationInput struct {
	ID                  *SortOrder                                      `json:"id,omitempty"`
	Name                *SortOrder                                      `json:"name,omitempty"`
	Provider            *SortOrder                                      `json:"provider,omitempty"`
	Hosted              *SortOrder                                      `json:"hosted,omitempty"`
	AccountID           *SortOrder                                      `json:"accountId,omitempty"`
	DefaultAccountID    *SortOrder                                      `json:"defaultAccountId,omitempty"`
	CredentialsID       *SortOrder                                      `json:"credentialsId,omitempty"`
	Account             *AccountOrderByWithRelationInput                `json:"account,omitempty"`
	DefaultAccount      *AccountOrderByWithRelationInput                `json:"defaultAccount,omitempty"`
	Credentials         *CloudCredentialsOrderByWithRelationInput       `json:"credentials,omitempty"`
	Projects            *ProjectOrderByRelationAggregateInput           `json:"projects,omitempty"`
	Vpcs                *VPCOrderByRelationAggregateInput               `json:"vpcs,omitempty"`
	Applications        *ApplicationOrderByRelationAggregateInput       `json:"applications,omitempty"`
	Trainings           *TrainingOrderByRelationAggregateInput          `json:"trainings,omitempty"`
	DataStorages        *DataStorageOrderByRelationAggregateInput       `json:"dataStorages,omitempty"`
	Experiments         *ExperimentOrderByRelationAggregateInput        `json:"experiments,omitempty"`
	ContainerRegistries *ContainerRegistryOrderByRelationAggregateInput `json:"containerRegistries,omitempty"`
}

type CloudProfileRelationFilter struct {
	Is    *CloudProfileWhereInput `json:"is,omitempty"`
	IsNot *CloudProfileWhereInput `json:"isNot,omitempty"`
}

type CloudProfileWhereInput struct {
	And                 []*CloudProfileWhereInput            `json:"AND,omitempty"`
	Or                  []*CloudProfileWhereInput            `json:"OR,omitempty"`
	Not                 []*CloudProfileWhereInput            `json:"NOT,omitempty"`
	ID                  *StringFilter                        `json:"id,omitempty"`
	Name                *StringFilter                        `json:"name,omitempty"`
	Provider            *EnumCloudProviderFilter             `json:"provider,omitempty"`
	Hosted              *BoolFilter                          `json:"hosted,omitempty"`
	AccountID           *StringFilter                        `json:"accountId,omitempty"`
	DefaultAccountID    *StringNullableFilter                `json:"defaultAccountId,omitempty"`
	CredentialsID       *StringFilter                        `json:"credentialsId,omitempty"`
	Account             *AccountRelationFilter               `json:"account,omitempty"`
	DefaultAccount      *AccountRelationFilter               `json:"defaultAccount,omitempty"`
	Credentials         *CloudCredentialsRelationFilter      `json:"credentials,omitempty"`
	Projects            *ProjectListRelationFilter           `json:"projects,omitempty"`
	Vpcs                *VPCListRelationFilter               `json:"vpcs,omitempty"`
	Applications        *ApplicationListRelationFilter       `json:"applications,omitempty"`
	Trainings           *TrainingListRelationFilter          `json:"trainings,omitempty"`
	DataStorages        *DataStorageListRelationFilter       `json:"dataStorages,omitempty"`
	Experiments         *ExperimentListRelationFilter        `json:"experiments,omitempty"`
	ContainerRegistries *ContainerRegistryListRelationFilter `json:"containerRegistries,omitempty"`
}

type CloudProfileWhereUniqueInput struct {
	ID                    *string                                               `json:"id,omitempty"`
	DefaultAccountID      *string                                               `json:"defaultAccountId,omitempty"`
	CredentialsID         *string                                               `json:"credentialsId,omitempty"`
	AccountIDNameProvider *CloudProfileAccountIDNameProviderCompoundUniqueInput `json:"accountId_name_provider,omitempty"`
}

type CloudProviderAppConfig struct {
	ID          string                      `json:"id"`
	Provider    CloudProvider               `json:"provider"`
	Version     string                      `json:"version"`
	Plan        *CloudProviderAppConfigPlan `json:"plan"`
	Application *Application                `json:"application"`
	AwsConfig   *AWSAppConfig               `json:"awsConfig"`
	AzureConfig *AzureAppConfig             `json:"azureConfig"`
	GcpConfig   *GCPAppConfig               `json:"gcpConfig"`
}

type CloudProviderAppConfigOrderByWithRelationInput struct {
	ID          *SortOrder                              `json:"id,omitempty"`
	Provider    *SortOrder                              `json:"provider,omitempty"`
	Version     *SortOrder                              `json:"version,omitempty"`
	Plan        *SortOrder                              `json:"plan,omitempty"`
	Application *ApplicationOrderByWithRelationInput    `json:"application,omitempty"`
	AwsConfig   *AWSAppConfigOrderByWithRelationInput   `json:"awsConfig,omitempty"`
	AzureConfig *AzureAppConfigOrderByWithRelationInput `json:"azureConfig,omitempty"`
	GcpConfig   *GCPAppConfigOrderByWithRelationInput   `json:"gcpConfig,omitempty"`
}

type CloudProviderAppConfigRelationFilter struct {
	Is    *CloudProviderAppConfigWhereInput `json:"is,omitempty"`
	IsNot *CloudProviderAppConfigWhereInput `json:"isNot,omitempty"`
}

type CloudProviderAppConfigWhereInput struct {
	And         []*CloudProviderAppConfigWhereInput           `json:"AND,omitempty"`
	Or          []*CloudProviderAppConfigWhereInput           `json:"OR,omitempty"`
	Not         []*CloudProviderAppConfigWhereInput           `json:"NOT,omitempty"`
	ID          *StringFilter                                 `json:"id,omitempty"`
	Provider    *EnumCloudProviderFilter                      `json:"provider,omitempty"`
	Version     *StringFilter                                 `json:"version,omitempty"`
	Plan        *EnumCloudProviderAppConfigPlanNullableFilter `json:"plan,omitempty"`
	Application *ApplicationRelationFilter                    `json:"application,omitempty"`
	AwsConfig   *AWSAppConfigRelationFilter                   `json:"awsConfig,omitempty"`
	AzureConfig *AzureAppConfigRelationFilter                 `json:"azureConfig,omitempty"`
	GcpConfig   *GCPAppConfigRelationFilter                   `json:"gcpConfig,omitempty"`
}

type CloudProviderAppConfigWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type CloudProviderContainerRegistryConfig struct {
	ID                string                        `json:"id"`
	ContainerRegistry *ContainerRegistry            `json:"containerRegistry"`
	AwsConfig         *AWSContainerRegistryConfig   `json:"awsConfig"`
	AzureConfig       *AzureContainerRegistryConfig `json:"azureConfig"`
	GcpConfig         *GCPContainerRegistryConfig   `json:"gcpConfig"`
}

type CloudProviderContainerRegistryConfigOrderByWithRelationInput struct {
	ID                *SortOrder                                            `json:"id,omitempty"`
	ContainerRegistry *ContainerRegistryOrderByWithRelationInput            `json:"containerRegistry,omitempty"`
	AwsConfig         *AWSContainerRegistryConfigOrderByWithRelationInput   `json:"awsConfig,omitempty"`
	AzureConfig       *AzureContainerRegistryConfigOrderByWithRelationInput `json:"azureConfig,omitempty"`
	GcpConfig         *GCPContainerRegistryConfigOrderByWithRelationInput   `json:"gcpConfig,omitempty"`
}

type CloudProviderContainerRegistryConfigRelationFilter struct {
	Is    *CloudProviderContainerRegistryConfigWhereInput `json:"is,omitempty"`
	IsNot *CloudProviderContainerRegistryConfigWhereInput `json:"isNot,omitempty"`
}

type CloudProviderContainerRegistryConfigWhereInput struct {
	And               []*CloudProviderContainerRegistryConfigWhereInput `json:"AND,omitempty"`
	Or                []*CloudProviderContainerRegistryConfigWhereInput `json:"OR,omitempty"`
	Not               []*CloudProviderContainerRegistryConfigWhereInput `json:"NOT,omitempty"`
	ID                *StringFilter                                     `json:"id,omitempty"`
	ContainerRegistry *ContainerRegistryRelationFilter                  `json:"containerRegistry,omitempty"`
	AwsConfig         *AWSContainerRegistryConfigRelationFilter         `json:"awsConfig,omitempty"`
	AzureConfig       *AzureContainerRegistryConfigRelationFilter       `json:"azureConfig,omitempty"`
	GcpConfig         *GCPContainerRegistryConfigRelationFilter         `json:"gcpConfig,omitempty"`
}

type CloudProviderContainerRegistryConfigWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type CloudProviderFalconConfig struct {
	ID          string                         `json:"id"`
	Provider    CloudProvider                  `json:"provider"`
	Version     string                         `json:"version"`
	Plan        *CloudProviderFalconConfigPlan `json:"plan"`
	UsesGpu     bool                           `json:"usesGpu"`
	Training    *Training                      `json:"training"`
	AwsConfig   *AWSFalconConfig               `json:"awsConfig"`
	AzureConfig *AzureFalconConfig             `json:"azureConfig"`
	GcpConfig   *GCPFalconConfig               `json:"gcpConfig"`
}

type CloudProviderFalconConfigOrderByWithRelationInput struct {
	ID          *SortOrder                                 `json:"id,omitempty"`
	Provider    *SortOrder                                 `json:"provider,omitempty"`
	Version     *SortOrder                                 `json:"version,omitempty"`
	Plan        *SortOrder                                 `json:"plan,omitempty"`
	UsesGpu     *SortOrder                                 `json:"usesGpu,omitempty"`
	Training    *TrainingOrderByWithRelationInput          `json:"training,omitempty"`
	AwsConfig   *AWSFalconConfigOrderByWithRelationInput   `json:"awsConfig,omitempty"`
	AzureConfig *AzureFalconConfigOrderByWithRelationInput `json:"azureConfig,omitempty"`
	GcpConfig   *GCPFalconConfigOrderByWithRelationInput   `json:"gcpConfig,omitempty"`
}

type CloudProviderFalconConfigRelationFilter struct {
	Is    *CloudProviderFalconConfigWhereInput `json:"is,omitempty"`
	IsNot *CloudProviderFalconConfigWhereInput `json:"isNot,omitempty"`
}

type CloudProviderFalconConfigWhereInput struct {
	And         []*CloudProviderFalconConfigWhereInput           `json:"AND,omitempty"`
	Or          []*CloudProviderFalconConfigWhereInput           `json:"OR,omitempty"`
	Not         []*CloudProviderFalconConfigWhereInput           `json:"NOT,omitempty"`
	ID          *StringFilter                                    `json:"id,omitempty"`
	Provider    *EnumCloudProviderFilter                         `json:"provider,omitempty"`
	Version     *StringFilter                                    `json:"version,omitempty"`
	Plan        *EnumCloudProviderFalconConfigPlanNullableFilter `json:"plan,omitempty"`
	UsesGpu     *BoolFilter                                      `json:"usesGpu,omitempty"`
	Training    *TrainingRelationFilter                          `json:"training,omitempty"`
	AwsConfig   *AWSFalconConfigRelationFilter                   `json:"awsConfig,omitempty"`
	AzureConfig *AzureFalconConfigRelationFilter                 `json:"azureConfig,omitempty"`
	GcpConfig   *GCPFalconConfigRelationFilter                   `json:"gcpConfig,omitempty"`
}

type CloudProviderFalconConfigWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type CloudProviderNebulonConfig struct {
	ID          string              `json:"id"`
	Provider    CloudProvider       `json:"provider"`
	Version     string              `json:"version"`
	CidrBlock   string              `json:"cidrBlock"`
	Vpc         *Vpc                `json:"vpc"`
	AwsConfig   *AWSNebulonConfig   `json:"awsConfig"`
	AzureConfig *AzureNebulonConfig `json:"azureConfig"`
	GcpConfig   *GCPNebulonConfig   `json:"gcpConfig"`
}

type CloudProviderNebulonConfigOrderByWithRelationInput struct {
	ID          *SortOrder                                  `json:"id,omitempty"`
	Provider    *SortOrder                                  `json:"provider,omitempty"`
	Version     *SortOrder                                  `json:"version,omitempty"`
	CidrBlock   *SortOrder                                  `json:"cidrBlock,omitempty"`
	Vpc         *VPCOrderByWithRelationInput                `json:"vpc,omitempty"`
	AwsConfig   *AWSNebulonConfigOrderByWithRelationInput   `json:"awsConfig,omitempty"`
	AzureConfig *AzureNebulonConfigOrderByWithRelationInput `json:"azureConfig,omitempty"`
	GcpConfig   *GCPNebulonConfigOrderByWithRelationInput   `json:"gcpConfig,omitempty"`
}

type CloudProviderNebulonConfigRelationFilter struct {
	Is    *CloudProviderNebulonConfigWhereInput `json:"is,omitempty"`
	IsNot *CloudProviderNebulonConfigWhereInput `json:"isNot,omitempty"`
}

type CloudProviderNebulonConfigWhereInput struct {
	And         []*CloudProviderNebulonConfigWhereInput `json:"AND,omitempty"`
	Or          []*CloudProviderNebulonConfigWhereInput `json:"OR,omitempty"`
	Not         []*CloudProviderNebulonConfigWhereInput `json:"NOT,omitempty"`
	ID          *StringFilter                           `json:"id,omitempty"`
	Provider    *EnumCloudProviderFilter                `json:"provider,omitempty"`
	Version     *StringFilter                           `json:"version,omitempty"`
	CidrBlock   *StringFilter                           `json:"cidrBlock,omitempty"`
	Vpc         *VPCRelationFilter                      `json:"vpc,omitempty"`
	AwsConfig   *AWSNebulonConfigRelationFilter         `json:"awsConfig,omitempty"`
	AzureConfig *AzureNebulonConfigRelationFilter       `json:"azureConfig,omitempty"`
	GcpConfig   *GCPNebulonConfigRelationFilter         `json:"gcpConfig,omitempty"`
}

type CloudProviderNebulonConfigWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type CloudProviderYodaConfig struct {
	ID          string           `json:"id"`
	Provider    CloudProvider    `json:"provider"`
	Version     string           `json:"version"`
	DataStorage *DataStorage     `json:"dataStorage"`
	AwsConfig   *AWSYodaConfig   `json:"awsConfig"`
	AzureConfig *AzureYodaConfig `json:"azureConfig"`
	GcpConfig   *GCPYodaConfig   `json:"gcpConfig"`
}

type CloudProviderYodaConfigOrderByWithRelationInput struct {
	ID          *SortOrder                               `json:"id,omitempty"`
	Provider    *SortOrder                               `json:"provider,omitempty"`
	Version     *SortOrder                               `json:"version,omitempty"`
	DataStorage *DataStorageOrderByWithRelationInput     `json:"dataStorage,omitempty"`
	AwsConfig   *AWSYodaConfigOrderByWithRelationInput   `json:"awsConfig,omitempty"`
	AzureConfig *AzureYodaConfigOrderByWithRelationInput `json:"azureConfig,omitempty"`
	GcpConfig   *GCPYodaConfigOrderByWithRelationInput   `json:"gcpConfig,omitempty"`
}

type CloudProviderYodaConfigRelationFilter struct {
	Is    *CloudProviderYodaConfigWhereInput `json:"is,omitempty"`
	IsNot *CloudProviderYodaConfigWhereInput `json:"isNot,omitempty"`
}

type CloudProviderYodaConfigWhereInput struct {
	And         []*CloudProviderYodaConfigWhereInput `json:"AND,omitempty"`
	Or          []*CloudProviderYodaConfigWhereInput `json:"OR,omitempty"`
	Not         []*CloudProviderYodaConfigWhereInput `json:"NOT,omitempty"`
	ID          *StringFilter                        `json:"id,omitempty"`
	Provider    *EnumCloudProviderFilter             `json:"provider,omitempty"`
	Version     *StringFilter                        `json:"version,omitempty"`
	DataStorage *DataStorageRelationFilter           `json:"dataStorage,omitempty"`
	AwsConfig   *AWSYodaConfigRelationFilter         `json:"awsConfig,omitempty"`
	AzureConfig *AzureYodaConfigRelationFilter       `json:"azureConfig,omitempty"`
	GcpConfig   *GCPYodaConfigRelationFilter         `json:"gcpConfig,omitempty"`
}

type CloudProviderYodaConfigWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type ContainerRegistry struct {
	ID                                     string                                `json:"id"`
	Name                                   string                                `json:"name"`
	SluggedName                            string                                `json:"sluggedName"`
	AccountID                              string                                `json:"accountId"`
	CloudProfileID                         *string                               `json:"cloudProfileId"`
	ProjectID                              *string                               `json:"projectId"`
	CloudProviderContainerRegistryConfigID *string                               `json:"cloudProviderContainerRegistryConfigId"`
	CreatedAt                              time.Time                             `json:"createdAt"`
	UpdatedAt                              time.Time                             `json:"updatedAt"`
	Count                                  *ContainerRegistryCount               `json:"_count"`
	Account                                Account                               `json:"account"`
	CloudProfile                           *CloudProfile                         `json:"cloudProfile"`
	Project                                *Project                              `json:"project"`
	Applications                           []*Application                        `json:"applications"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfig `json:"cloudProviderContainerRegistryConfig"`
	Info                                   ContainerRegistryInfo                 `json:"info"`
}

type ContainerRegistryCount struct {
	Applications int64 `json:"applications"`
}

type ContainerRegistryInfo struct {
	ImageURI    string `json:"imageUri"`
	LoginServer string `json:"loginServer"`
	Username    string `json:"username"`
	Password    string `json:"password"`
}

type ContainerRegistryListRelationFilter struct {
	Every *ContainerRegistryWhereInput `json:"every,omitempty"`
	Some  *ContainerRegistryWhereInput `json:"some,omitempty"`
	None  *ContainerRegistryWhereInput `json:"none,omitempty"`
}

type ContainerRegistryOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type ContainerRegistryOrderByWithRelationInput struct {
	ID                                     *SortOrder                                                    `json:"id,omitempty"`
	Name                                   *SortOrder                                                    `json:"name,omitempty"`
	SluggedName                            *SortOrder                                                    `json:"sluggedName,omitempty"`
	AccountID                              *SortOrder                                                    `json:"accountId,omitempty"`
	CloudProfileID                         *SortOrder                                                    `json:"cloudProfileId,omitempty"`
	ProjectID                              *SortOrder                                                    `json:"projectId,omitempty"`
	CloudProviderContainerRegistryConfigID *SortOrder                                                    `json:"cloudProviderContainerRegistryConfigId,omitempty"`
	CreatedAt                              *SortOrder                                                    `json:"createdAt,omitempty"`
	UpdatedAt                              *SortOrder                                                    `json:"updatedAt,omitempty"`
	Account                                *AccountOrderByWithRelationInput                              `json:"account,omitempty"`
	CloudProfile                           *CloudProfileOrderByWithRelationInput                         `json:"cloudProfile,omitempty"`
	Project                                *ProjectOrderByWithRelationInput                              `json:"project,omitempty"`
	Applications                           *ApplicationOrderByRelationAggregateInput                     `json:"applications,omitempty"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfigOrderByWithRelationInput `json:"cloudProviderContainerRegistryConfig,omitempty"`
}

type ContainerRegistryRelationFilter struct {
	Is    *ContainerRegistryWhereInput `json:"is,omitempty"`
	IsNot *ContainerRegistryWhereInput `json:"isNot,omitempty"`
}

type ContainerRegistryWhereInput struct {
	And                                    []*ContainerRegistryWhereInput                      `json:"AND,omitempty"`
	Or                                     []*ContainerRegistryWhereInput                      `json:"OR,omitempty"`
	Not                                    []*ContainerRegistryWhereInput                      `json:"NOT,omitempty"`
	ID                                     *StringFilter                                       `json:"id,omitempty"`
	Name                                   *StringFilter                                       `json:"name,omitempty"`
	SluggedName                            *StringFilter                                       `json:"sluggedName,omitempty"`
	AccountID                              *StringFilter                                       `json:"accountId,omitempty"`
	CloudProfileID                         *StringNullableFilter                               `json:"cloudProfileId,omitempty"`
	ProjectID                              *StringNullableFilter                               `json:"projectId,omitempty"`
	CloudProviderContainerRegistryConfigID *StringNullableFilter                               `json:"cloudProviderContainerRegistryConfigId,omitempty"`
	CreatedAt                              *DateTimeFilter                                     `json:"createdAt,omitempty"`
	UpdatedAt                              *DateTimeFilter                                     `json:"updatedAt,omitempty"`
	Account                                *AccountRelationFilter                              `json:"account,omitempty"`
	CloudProfile                           *CloudProfileRelationFilter                         `json:"cloudProfile,omitempty"`
	Project                                *ProjectRelationFilter                              `json:"project,omitempty"`
	Applications                           *ApplicationListRelationFilter                      `json:"applications,omitempty"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfigRelationFilter `json:"cloudProviderContainerRegistryConfig,omitempty"`
}

type ContainerRegistryWhereUniqueInput struct {
	ID                                     *string `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *string `json:"cloudProviderContainerRegistryConfigId,omitempty"`
}

type CreateAWSAppConfig struct {
	AwsRegion                 string  `json:"awsRegion"`
	Ec2InstanceType           *string `json:"ec2InstanceType,omitempty"`
	Ec2VolumeSize             *int64  `json:"ec2VolumeSize,omitempty"`
	EcsDesiredCount           *int64  `json:"ecsDesiredCount,omitempty"`
	EcsCPU                    *int64  `json:"ecsCpu,omitempty"`
	EcsMemory                 *int64  `json:"ecsMemory,omitempty"`
	EcsGpuCount               *int64  `json:"ecsGpuCount,omitempty"`
	AutoscalingMinSize        *int64  `json:"autoscalingMinSize,omitempty"`
	AutoscalingMaxSize        *int64  `json:"autoscalingMaxSize,omitempty"`
	AutoscalingCPUTargetValue *int64  `json:"autoscalingCpuTargetValue,omitempty"`
}

type CreateAWSContainerRegistryConfig struct {
	AwsRegion string `json:"awsRegion"`
}

type CreateAWSFalconConfig struct {
	AwsRegion        string  `json:"awsRegion"`
	Ec2InstanceType  *string `json:"ec2InstanceType,omitempty"`
	Ec2InstanceCount *int64  `json:"ec2InstanceCount,omitempty"`
	Ec2VolumeSize    *int64  `json:"ec2VolumeSize,omitempty"`
}

type CreateAWSNebulonConfig struct {
	AwsRegion string `json:"awsRegion"`
}

type CreateAWSYodaConfig struct {
	AwsRegion string `json:"awsRegion"`
}

type CreateApplicationContainerInput struct {
	Image string `json:"image"`
	Port  *int64 `json:"port,omitempty"`
}

type CreateApplicationInput struct {
	Name                   string                          `json:"name"`
	CloudProfileID         string                          `json:"cloudProfileId"`
	CloudProviderAppConfig CreateCloudProviderAppConfig    `json:"cloudProviderAppConfig"`
	ContainerRegistryID    *string                         `json:"containerRegistryId,omitempty"`
	Container              CreateApplicationContainerInput `json:"container"`
	EnvironmentVariables   []*EnvironmentVariableInput     `json:"environmentVariables,omitempty"`
}

type CreateAzureAppConfig struct {
	AzureRegion       string  `json:"azureRegion"`
	ContainerRegistry *string `json:"containerRegistry,omitempty"`
	CgCPU             *string `json:"cgCpu,omitempty"`
	CgMemory          *string `json:"cgMemory,omitempty"`
	CgGpuCount        *int64  `json:"cgGpuCount,omitempty"`
	CgGpuSku          *string `json:"cgGpuSku,omitempty"`
}

type CreateAzureFalconConfig struct {
	AzureRegion     string  `json:"azureRegion"`
	VMSize          *string `json:"vmSize,omitempty"`
	VMInstanceCount *int64  `json:"vmInstanceCount,omitempty"`
	VMVolumeSize    *int64  `json:"vmVolumeSize,omitempty"`
}

type CreateAzureNebulonConfig struct {
	AzureRegion string `json:"azureRegion"`
}

type CreateAzureYodaConfig struct {
	AzureRegion string `json:"azureRegion"`
}

type CreateCloudProfileInput struct {
	Provider         CloudProvider     `json:"provider"`
	Name             string            `json:"name"`
	AwsCredentials   *AWSCredentials   `json:"awsCredentials,omitempty"`
	AzureCredentials *AzureCredentials `json:"azureCredentials,omitempty"`
	GcpCredentials   *GCPCredentials   `json:"gcpCredentials,omitempty"`
	IsDefault        *bool             `json:"isDefault,omitempty"`
	Hosted           *bool             `json:"hosted,omitempty"`
}

type CreateCloudProviderAppConfig struct {
	Plan        CloudProviderAppConfigPlan `json:"plan"`
	AwsConfig   *CreateAWSAppConfig        `json:"awsConfig,omitempty"`
	AzureConfig *CreateAzureAppConfig      `json:"azureConfig,omitempty"`
	GcpConfig   *CreateGCPAppConfig        `json:"gcpConfig,omitempty"`
}

type CreateCloudProviderContainerRegistryConfig struct {
	AwsConfig *CreateAWSContainerRegistryConfig `json:"awsConfig,omitempty"`
	GcpConfig *CreateGCPContainerRegistryConfig `json:"gcpConfig,omitempty"`
}

type CreateCloudProviderFalconConfig struct {
	Plan        CloudProviderFalconConfigPlan `json:"plan"`
	UsesGpu     *bool                         `json:"usesGpu,omitempty"`
	AwsConfig   *CreateAWSFalconConfig        `json:"awsConfig,omitempty"`
	AzureConfig *CreateAzureFalconConfig      `json:"azureConfig,omitempty"`
	GcpConfig   *CreateGCPFalconConfig        `json:"gcpConfig,omitempty"`
}

type CreateCloudProviderNebulonConfig struct {
	AwsConfig   *CreateAWSNebulonConfig   `json:"awsConfig,omitempty"`
	AzureConfig *CreateAzureNebulonConfig `json:"azureConfig,omitempty"`
	GcpConfig   *CreateGCPNebulonConfig   `json:"gcpConfig,omitempty"`
}

type CreateCloudProviderYodaConfig struct {
	AwsConfig   *CreateAWSYodaConfig   `json:"awsConfig,omitempty"`
	AzureConfig *CreateAzureYodaConfig `json:"azureConfig,omitempty"`
	GcpConfig   *CreateGCPYodaConfig   `json:"gcpConfig,omitempty"`
}

type CreateContainerRegistryInput struct {
	Name                                 string                                     `json:"name"`
	CloudProfileID                       string                                     `json:"cloudProfileId"`
	CloudProviderContainerRegistryConfig CreateCloudProviderContainerRegistryConfig `json:"cloudProviderContainerRegistryConfig"`
}

type CreateDataStorageInput struct {
	Name                    string                         `json:"name"`
	CloudProfileID          string                         `json:"cloudProfileId"`
	CloudProviderYodaConfig *CreateCloudProviderYodaConfig `json:"cloudProviderYodaConfig,omitempty"`
}

type CreateExperimentInput struct {
	Name                string                     `json:"name"`
	Environment         ExperimentEnvironment      `json:"environment"`
	CloudProfileID      *string                    `json:"cloudProfileId,omitempty"`
	TrainingID          *string                    `json:"trainingId,omitempty"`
	Training            *CreateTrainingInput       `json:"training,omitempty"`
	ExperimentRunConfig *CreateExperimentRunConfig `json:"experimentRunConfig,omitempty"`
}

type CreateExperimentRunConfig struct {
	Entrypoint         *string `json:"entrypoint,omitempty"`
	RequirementsPath   *string `json:"requirementsPath,omitempty"`
	ArtifactsDirectory *string `json:"artifactsDirectory,omitempty"`
}

type CreateGCPAppConfig struct {
	GcpRegion                     string  `json:"gcpRegion"`
	GcpZone                       string  `json:"gcpZone"`
	ContainerCPU                  *string `json:"containerCpu,omitempty"`
	ContainerMemory               *string `json:"containerMemory,omitempty"`
	ContainerCPUIdle              *bool   `json:"containerCpuIdle,omitempty"`
	ScalingMinCount               *int64  `json:"scalingMinCount,omitempty"`
	ScalingMaxCount               *int64  `json:"scalingMaxCount,omitempty"`
	MaxInstanceRequestConcurrency *int64  `json:"maxInstanceRequestConcurrency,omitempty"`
}

type CreateGCPContainerRegistryConfig struct {
	GcpRegion string `json:"gcpRegion"`
	GcpZone   string `json:"gcpZone"`
}

type CreateGCPFalconConfig struct {
	GcpRegion            string  `json:"gcpRegion"`
	GcpZone              string  `json:"gcpZone"`
	ComputeMachineType   *string `json:"computeMachineType,omitempty"`
	ComputeInstanceCount *int64  `json:"computeInstanceCount,omitempty"`
	ComputeVolumeSize    *int64  `json:"computeVolumeSize,omitempty"`
	ComputeGpuCount      *int64  `json:"computeGpuCount,omitempty"`
	ComputeGpuType       *string `json:"computeGpuType,omitempty"`
}

type CreateGCPNebulonConfig struct {
	GcpRegion string `json:"gcpRegion"`
	GcpZone   string `json:"gcpZone"`
}

type CreateGCPYodaConfig struct {
	GcpRegion string `json:"gcpRegion"`
	GcpZone   string `json:"gcpZone"`
}

type CreateKubernetesProfileInput struct {
	Name       string `json:"name"`
	Kubeconfig string `json:"kubeconfig"`
}

type CreatePersonalAccessToken struct {
	Token       PersonalAccessToken `json:"token"`
	TokenString string              `json:"tokenString"`
}

type CreatePersonalAccessTokenInput struct {
	Name string `json:"name"`
}

type CreateProjectInput struct {
	Name           string `json:"name"`
	CloudProfileID string `json:"cloudProfileId"`
}

type CreateRayClusterInput struct {
	Name                string `json:"name"`
	KubernetesProfileID string `json:"kubernetesProfileId"`
}

type CreateTeamInput struct {
	Username    string `json:"username"`
	DisplayName string `json:"displayName"`
}

type CreateTrainingInput struct {
	Name                      string                          `json:"name"`
	CloudProfileID            string                          `json:"cloudProfileId"`
	CloudProviderFalconConfig CreateCloudProviderFalconConfig `json:"cloudProviderFalconConfig"`
	FalconMLConfigID          *string                         `json:"falconMLConfigId,omitempty"`
	DataStorageIds            []string                        `json:"dataStorageIds,omitempty"`
	DataStorage               *CreateDataStorageInput         `json:"dataStorage,omitempty"`
}

type CreateVPCInput struct {
	CloudProfileID             string                           `json:"cloudProfileId"`
	CloudProviderNebulonConfig CreateCloudProviderNebulonConfig `json:"cloudProviderNebulonConfig"`
}

type CustomAccountWhereUniqueInput struct {
	ID                         *string `json:"id,omitempty"`
	Username                   *string `json:"username,omitempty"`
	GithubAppInstallationState *string `json:"githubAppInstallationState,omitempty"`
}

type CustomerAddress struct {
	AddressLine1 string  `json:"addressLine1"`
	AddressLine2 *string `json:"addressLine2"`
	City         string  `json:"city"`
	State        *string `json:"state"`
	ZipCode      *string `json:"zipCode"`
	Country      string  `json:"country"`
}

type CustomerAddressInput struct {
	AddressLine1 string  `json:"addressLine1"`
	AddressLine2 *string `json:"addressLine2,omitempty"`
	City         string  `json:"city"`
	State        *string `json:"state,omitempty"`
	ZipCode      *string `json:"zipCode,omitempty"`
	Country      string  `json:"country"`
}

type DataStorage struct {
	ID                           string                   `json:"id"`
	Name                         string                   `json:"name"`
	AccountID                    string                   `json:"accountId"`
	CloudProfileID               *string                  `json:"cloudProfileId"`
	CloudProviderYodaConfigID    *string                  `json:"cloudProviderYodaConfigId"`
	ProjectForArtifactsStorageID *string                  `json:"projectForArtifactsStorageId"`
	Status                       DataStorageStatus        `json:"status"`
	CreatedAt                    time.Time                `json:"createdAt"`
	UpdatedAt                    time.Time                `json:"updatedAt"`
	Count                        *DataStorageCount        `json:"_count"`
	Account                      Account                  `json:"account"`
	CloudProfile                 *CloudProfile            `json:"cloudProfile"`
	CloudProviderYodaConfig      *CloudProviderYodaConfig `json:"cloudProviderYodaConfig"`
	Trainings                    []*Training              `json:"trainings"`
	Projects                     []*Project               `json:"projects"`
	ProjectForArtifactsStorage   *Project                 `json:"projectForArtifactsStorage"`
	Containers                   []*DataStorageContainer  `json:"containers"`
	TaskActions                  []*TaskAction            `json:"taskActions"`
}

type DataStorageContainer struct {
	ID            string                      `json:"id"`
	DataStorageID string                      `json:"dataStorageId"`
	DirectoryName string                      `json:"directoryName"`
	DataStorage   DataStorage                 `json:"dataStorage"`
	Browser       DataStorageContainerBrowser `json:"browser"`
	CloudName     *string                     `json:"cloudName"`
}

type DataStorageContainerBrowser struct {
	Files       []*DataStorageContainerFile      `json:"files"`
	Directories []*DataStorageContainerDirectory `json:"directories"`
	Cursor      *string                          `json:"cursor"`
}

type DataStorageContainerDataStorageIDDirectoryNameCompoundUniqueInput struct {
	DataStorageID string `json:"dataStorageId"`
	DirectoryName string `json:"directoryName"`
}

type DataStorageContainerDirectory struct {
	Key     string                       `json:"key"`
	Name    string                       `json:"name"`
	Browser *DataStorageContainerBrowser `json:"browser"`
}

type DataStorageContainerFile struct {
	Key          string  `json:"key"`
	Name         string  `json:"name"`
	PresignedURL *string `json:"presignedUrl"`
}

type DataStorageContainerListRelationFilter struct {
	Every *DataStorageContainerWhereInput `json:"every,omitempty"`
	Some  *DataStorageContainerWhereInput `json:"some,omitempty"`
	None  *DataStorageContainerWhereInput `json:"none,omitempty"`
}

type DataStorageContainerOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type DataStorageContainerOrderByWithRelationInput struct {
	ID            *SortOrder                           `json:"id,omitempty"`
	DataStorageID *SortOrder                           `json:"dataStorageId,omitempty"`
	DirectoryName *SortOrder                           `json:"directoryName,omitempty"`
	DataStorage   *DataStorageOrderByWithRelationInput `json:"dataStorage,omitempty"`
}

type DataStorageContainerWhereInput struct {
	And           []*DataStorageContainerWhereInput `json:"AND,omitempty"`
	Or            []*DataStorageContainerWhereInput `json:"OR,omitempty"`
	Not           []*DataStorageContainerWhereInput `json:"NOT,omitempty"`
	ID            *StringFilter                     `json:"id,omitempty"`
	DataStorageID *StringFilter                     `json:"dataStorageId,omitempty"`
	DirectoryName *StringFilter                     `json:"directoryName,omitempty"`
	DataStorage   *DataStorageRelationFilter        `json:"dataStorage,omitempty"`
}

type DataStorageContainerWhereUniqueInput struct {
	ID                         *string                                                            `json:"id,omitempty"`
	DataStorageIDDirectoryName *DataStorageContainerDataStorageIDDirectoryNameCompoundUniqueInput `json:"dataStorageId_directoryName,omitempty"`
}

type DataStorageCount struct {
	Trainings   int64 `json:"trainings"`
	Projects    int64 `json:"projects"`
	Containers  int64 `json:"containers"`
	TaskActions int64 `json:"taskActions"`
}

type DataStorageListRelationFilter struct {
	Every *DataStorageWhereInput `json:"every,omitempty"`
	Some  *DataStorageWhereInput `json:"some,omitempty"`
	None  *DataStorageWhereInput `json:"none,omitempty"`
}

type DataStorageOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type DataStorageOrderByWithRelationInput struct {
	ID                           *SortOrder                                         `json:"id,omitempty"`
	Name                         *SortOrder                                         `json:"name,omitempty"`
	AccountID                    *SortOrder                                         `json:"accountId,omitempty"`
	CloudProfileID               *SortOrder                                         `json:"cloudProfileId,omitempty"`
	CloudProviderYodaConfigID    *SortOrder                                         `json:"cloudProviderYodaConfigId,omitempty"`
	ProjectForArtifactsStorageID *SortOrder                                         `json:"projectForArtifactsStorageId,omitempty"`
	Status                       *SortOrder                                         `json:"status,omitempty"`
	CreatedAt                    *SortOrder                                         `json:"createdAt,omitempty"`
	UpdatedAt                    *SortOrder                                         `json:"updatedAt,omitempty"`
	Account                      *AccountOrderByWithRelationInput                   `json:"account,omitempty"`
	CloudProfile                 *CloudProfileOrderByWithRelationInput              `json:"cloudProfile,omitempty"`
	CloudProviderYodaConfig      *CloudProviderYodaConfigOrderByWithRelationInput   `json:"cloudProviderYodaConfig,omitempty"`
	Trainings                    *TrainingOrderByRelationAggregateInput             `json:"trainings,omitempty"`
	Projects                     *ProjectOrderByRelationAggregateInput              `json:"projects,omitempty"`
	ProjectForArtifactsStorage   *ProjectOrderByWithRelationInput                   `json:"projectForArtifactsStorage,omitempty"`
	Containers                   *DataStorageContainerOrderByRelationAggregateInput `json:"containers,omitempty"`
	TaskActions                  *TaskActionOrderByRelationAggregateInput           `json:"taskActions,omitempty"`
}

type DataStorageRelationFilter struct {
	Is    *DataStorageWhereInput `json:"is,omitempty"`
	IsNot *DataStorageWhereInput `json:"isNot,omitempty"`
}

type DataStorageWhereInput struct {
	And                          []*DataStorageWhereInput                `json:"AND,omitempty"`
	Or                           []*DataStorageWhereInput                `json:"OR,omitempty"`
	Not                          []*DataStorageWhereInput                `json:"NOT,omitempty"`
	ID                           *StringFilter                           `json:"id,omitempty"`
	Name                         *StringFilter                           `json:"name,omitempty"`
	AccountID                    *StringFilter                           `json:"accountId,omitempty"`
	CloudProfileID               *StringNullableFilter                   `json:"cloudProfileId,omitempty"`
	CloudProviderYodaConfigID    *StringNullableFilter                   `json:"cloudProviderYodaConfigId,omitempty"`
	ProjectForArtifactsStorageID *StringNullableFilter                   `json:"projectForArtifactsStorageId,omitempty"`
	Status                       *EnumDataStorageStatusFilter            `json:"status,omitempty"`
	CreatedAt                    *DateTimeFilter                         `json:"createdAt,omitempty"`
	UpdatedAt                    *DateTimeFilter                         `json:"updatedAt,omitempty"`
	Account                      *AccountRelationFilter                  `json:"account,omitempty"`
	CloudProfile                 *CloudProfileRelationFilter             `json:"cloudProfile,omitempty"`
	CloudProviderYodaConfig      *CloudProviderYodaConfigRelationFilter  `json:"cloudProviderYodaConfig,omitempty"`
	Trainings                    *TrainingListRelationFilter             `json:"trainings,omitempty"`
	Projects                     *ProjectListRelationFilter              `json:"projects,omitempty"`
	ProjectForArtifactsStorage   *ProjectRelationFilter                  `json:"projectForArtifactsStorage,omitempty"`
	Containers                   *DataStorageContainerListRelationFilter `json:"containers,omitempty"`
	TaskActions                  *TaskActionListRelationFilter           `json:"taskActions,omitempty"`
}

type DataStorageWhereUniqueInput struct {
	ID                           *string `json:"id,omitempty"`
	CloudProviderYodaConfigID    *string `json:"cloudProviderYodaConfigId,omitempty"`
	ProjectForArtifactsStorageID *string `json:"projectForArtifactsStorageId,omitempty"`
}

type DateTimeFilter struct {
	Equals *time.Time            `json:"equals,omitempty"`
	In     []*time.Time          `json:"in,omitempty"`
	NotIn  []*time.Time          `json:"notIn,omitempty"`
	Lt     *time.Time            `json:"lt,omitempty"`
	Lte    *time.Time            `json:"lte,omitempty"`
	Gt     *time.Time            `json:"gt,omitempty"`
	Gte    *time.Time            `json:"gte,omitempty"`
	Not    *NestedDateTimeFilter `json:"not,omitempty"`
}

type DateTimeNullableFilter struct {
	Equals *time.Time                    `json:"equals,omitempty"`
	In     []*time.Time                  `json:"in,omitempty"`
	NotIn  []*time.Time                  `json:"notIn,omitempty"`
	Lt     *time.Time                    `json:"lt,omitempty"`
	Lte    *time.Time                    `json:"lte,omitempty"`
	Gt     *time.Time                    `json:"gt,omitempty"`
	Gte    *time.Time                    `json:"gte,omitempty"`
	Not    *NestedDateTimeNullableFilter `json:"not,omitempty"`
}

type EnumApplicationContainerStatusFilter struct {
	Equals *ApplicationContainerStatus                 `json:"equals,omitempty"`
	In     []ApplicationContainerStatus                `json:"in,omitempty"`
	NotIn  []ApplicationContainerStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumApplicationContainerStatusFilter `json:"not,omitempty"`
}

type EnumApplicationStatusFilter struct {
	Equals *ApplicationStatus                 `json:"equals,omitempty"`
	In     []ApplicationStatus                `json:"in,omitempty"`
	NotIn  []ApplicationStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumApplicationStatusFilter `json:"not,omitempty"`
}

type EnumBillableUsageTypeFilter struct {
	Equals *BillableUsageType                 `json:"equals,omitempty"`
	In     []BillableUsageType                `json:"in,omitempty"`
	NotIn  []BillableUsageType                `json:"notIn,omitempty"`
	Not    *NestedEnumBillableUsageTypeFilter `json:"not,omitempty"`
}

type EnumBillingPaymentProviderFilter struct {
	Equals *BillingPaymentProvider                 `json:"equals,omitempty"`
	In     []BillingPaymentProvider                `json:"in,omitempty"`
	NotIn  []BillingPaymentProvider                `json:"notIn,omitempty"`
	Not    *NestedEnumBillingPaymentProviderFilter `json:"not,omitempty"`
}

type EnumBillingSubscriptionStatusFilter struct {
	Equals *BillingSubscriptionStatus                 `json:"equals,omitempty"`
	In     []BillingSubscriptionStatus                `json:"in,omitempty"`
	NotIn  []BillingSubscriptionStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumBillingSubscriptionStatusFilter `json:"not,omitempty"`
}

type EnumCloudProviderAppConfigPlanNullableFilter struct {
	Equals *CloudProviderAppConfigPlan                         `json:"equals,omitempty"`
	In     []CloudProviderAppConfigPlan                        `json:"in,omitempty"`
	NotIn  []CloudProviderAppConfigPlan                        `json:"notIn,omitempty"`
	Not    *NestedEnumCloudProviderAppConfigPlanNullableFilter `json:"not,omitempty"`
}

type EnumCloudProviderFalconConfigPlanNullableFilter struct {
	Equals *CloudProviderFalconConfigPlan                         `json:"equals,omitempty"`
	In     []CloudProviderFalconConfigPlan                        `json:"in,omitempty"`
	NotIn  []CloudProviderFalconConfigPlan                        `json:"notIn,omitempty"`
	Not    *NestedEnumCloudProviderFalconConfigPlanNullableFilter `json:"not,omitempty"`
}

type EnumCloudProviderFilter struct {
	Equals *CloudProvider                 `json:"equals,omitempty"`
	In     []CloudProvider                `json:"in,omitempty"`
	NotIn  []CloudProvider                `json:"notIn,omitempty"`
	Not    *NestedEnumCloudProviderFilter `json:"not,omitempty"`
}

type EnumDataStorageStatusFilter struct {
	Equals *DataStorageStatus                 `json:"equals,omitempty"`
	In     []DataStorageStatus                `json:"in,omitempty"`
	NotIn  []DataStorageStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumDataStorageStatusFilter `json:"not,omitempty"`
}

type EnumExperimentEnvironmentFilter struct {
	Equals *ExperimentEnvironment                 `json:"equals,omitempty"`
	In     []ExperimentEnvironment                `json:"in,omitempty"`
	NotIn  []ExperimentEnvironment                `json:"notIn,omitempty"`
	Not    *NestedEnumExperimentEnvironmentFilter `json:"not,omitempty"`
}

type EnumExperimentRunEnvironmentFilter struct {
	Equals *ExperimentRunEnvironment                 `json:"equals,omitempty"`
	In     []ExperimentRunEnvironment                `json:"in,omitempty"`
	NotIn  []ExperimentRunEnvironment                `json:"notIn,omitempty"`
	Not    *NestedEnumExperimentRunEnvironmentFilter `json:"not,omitempty"`
}

type EnumExperimentRunStatusFilter struct {
	Equals *ExperimentRunStatus                 `json:"equals,omitempty"`
	In     []ExperimentRunStatus                `json:"in,omitempty"`
	NotIn  []ExperimentRunStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumExperimentRunStatusFilter `json:"not,omitempty"`
}

type EnumExperimentStatusFilter struct {
	Equals *ExperimentStatus                 `json:"equals,omitempty"`
	In     []ExperimentStatus                `json:"in,omitempty"`
	NotIn  []ExperimentStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumExperimentStatusFilter `json:"not,omitempty"`
}

type EnumExternalSSOProviderFilter struct {
	Equals *ExternalSSOProvider                 `json:"equals,omitempty"`
	In     []ExternalSSOProvider                `json:"in,omitempty"`
	NotIn  []ExternalSSOProvider                `json:"notIn,omitempty"`
	Not    *NestedEnumExternalSSOProviderFilter `json:"not,omitempty"`
}

type EnumProjectStatusFilter struct {
	Equals *ProjectStatus                 `json:"equals,omitempty"`
	In     []ProjectStatus                `json:"in,omitempty"`
	NotIn  []ProjectStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumProjectStatusFilter `json:"not,omitempty"`
}

type EnumRayClusterStatusFilter struct {
	Equals *RayClusterStatus                 `json:"equals,omitempty"`
	In     []RayClusterStatus                `json:"in,omitempty"`
	NotIn  []RayClusterStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumRayClusterStatusFilter `json:"not,omitempty"`
}

type EnumRoleInTeamFilter struct {
	Equals *RoleInTeam                 `json:"equals,omitempty"`
	In     []RoleInTeam                `json:"in,omitempty"`
	NotIn  []RoleInTeam                `json:"notIn,omitempty"`
	Not    *NestedEnumRoleInTeamFilter `json:"not,omitempty"`
}

type EnumTaskActionStateFilter struct {
	Equals *TaskActionState                 `json:"equals,omitempty"`
	In     []TaskActionState                `json:"in,omitempty"`
	NotIn  []TaskActionState                `json:"notIn,omitempty"`
	Not    *NestedEnumTaskActionStateFilter `json:"not,omitempty"`
}

type EnumTaskActionTypeFilter struct {
	Equals *TaskActionType                 `json:"equals,omitempty"`
	In     []TaskActionType                `json:"in,omitempty"`
	NotIn  []TaskActionType                `json:"notIn,omitempty"`
	Not    *NestedEnumTaskActionTypeFilter `json:"not,omitempty"`
}

type EnumTaskStepStateFilter struct {
	Equals *TaskStepState                 `json:"equals,omitempty"`
	In     []TaskStepState                `json:"in,omitempty"`
	NotIn  []TaskStepState                `json:"notIn,omitempty"`
	Not    *NestedEnumTaskStepStateFilter `json:"not,omitempty"`
}

type EnumTeamMemberInvitationStatusFilter struct {
	Equals *TeamMemberInvitationStatus                 `json:"equals,omitempty"`
	In     []TeamMemberInvitationStatus                `json:"in,omitempty"`
	NotIn  []TeamMemberInvitationStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumTeamMemberInvitationStatusFilter `json:"not,omitempty"`
}

type EnumTrainingAnsibleTaskTypeFilter struct {
	Equals *TrainingAnsibleTaskType                 `json:"equals,omitempty"`
	In     []TrainingAnsibleTaskType                `json:"in,omitempty"`
	NotIn  []TrainingAnsibleTaskType                `json:"notIn,omitempty"`
	Not    *NestedEnumTrainingAnsibleTaskTypeFilter `json:"not,omitempty"`
}

type EnumTrainingMountStatusFilter struct {
	Equals *TrainingMountStatus                 `json:"equals,omitempty"`
	In     []TrainingMountStatus                `json:"in,omitempty"`
	NotIn  []TrainingMountStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumTrainingMountStatusFilter `json:"not,omitempty"`
}

type EnumTrainingRunningStateFilter struct {
	Equals *TrainingRunningState                 `json:"equals,omitempty"`
	In     []TrainingRunningState                `json:"in,omitempty"`
	NotIn  []TrainingRunningState                `json:"notIn,omitempty"`
	Not    *NestedEnumTrainingRunningStateFilter `json:"not,omitempty"`
}

type EnumTrainingStatusFilter struct {
	Equals *TrainingStatus                 `json:"equals,omitempty"`
	In     []TrainingStatus                `json:"in,omitempty"`
	NotIn  []TrainingStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumTrainingStatusFilter `json:"not,omitempty"`
}

type EnumVPCAttachmentStatusFilter struct {
	Equals *VPCAttachmentStatus                 `json:"equals,omitempty"`
	In     []VPCAttachmentStatus                `json:"in,omitempty"`
	NotIn  []VPCAttachmentStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumVPCAttachmentStatusFilter `json:"not,omitempty"`
}

type EnumVPCStatusFilter struct {
	Equals *VPCStatus                 `json:"equals,omitempty"`
	In     []VPCStatus                `json:"in,omitempty"`
	NotIn  []VPCStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumVPCStatusFilter `json:"not,omitempty"`
}

type EnvironmentVariable struct {
	ID            int64   `json:"id"`
	ApplicationID *string `json:"applicationId"`
	Name          string  `json:"name"`
	Value         string  `json:"value"`
}

type EnvironmentVariableInput struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type EnvironmentVariableListRelationFilter struct {
	Every *EnvironmentVariableWhereInput `json:"every,omitempty"`
	Some  *EnvironmentVariableWhereInput `json:"some,omitempty"`
	None  *EnvironmentVariableWhereInput `json:"none,omitempty"`
}

type EnvironmentVariableOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type EnvironmentVariableOrderByWithRelationInput struct {
	ID            *SortOrder                           `json:"id,omitempty"`
	ApplicationID *SortOrder                           `json:"applicationId,omitempty"`
	Name          *SortOrder                           `json:"name,omitempty"`
	Value         *SortOrder                           `json:"value,omitempty"`
	Application   *ApplicationOrderByWithRelationInput `json:"application,omitempty"`
}

type EnvironmentVariableWhereInput struct {
	And           []*EnvironmentVariableWhereInput `json:"AND,omitempty"`
	Or            []*EnvironmentVariableWhereInput `json:"OR,omitempty"`
	Not           []*EnvironmentVariableWhereInput `json:"NOT,omitempty"`
	ID            *IntFilter                       `json:"id,omitempty"`
	ApplicationID *StringNullableFilter            `json:"applicationId,omitempty"`
	Name          *StringFilter                    `json:"name,omitempty"`
	Value         *StringFilter                    `json:"value,omitempty"`
	Application   *ApplicationRelationFilter       `json:"application,omitempty"`
}

type EnvironmentVariableWhereUniqueInput struct {
	ID *int64 `json:"id,omitempty"`
}

type Experiment struct {
	ID                        string                `json:"id"`
	Name                      string                `json:"name"`
	AccountID                 string                `json:"accountId"`
	CloudProfileID            *string               `json:"cloudProfileId"`
	ProjectID                 *string               `json:"projectId"`
	TrainingID                *string               `json:"trainingId"`
	Status                    ExperimentStatus      `json:"status"`
	Environment               ExperimentEnvironment `json:"environment"`
	MlflowExperimentID        *string               `json:"mlflowExperimentId"`
	CreatedAt                 time.Time             `json:"createdAt"`
	UpdatedAt                 time.Time             `json:"updatedAt"`
	Count                     *ExperimentCount      `json:"_count"`
	Account                   Account               `json:"account"`
	CloudProfile              *CloudProfile         `json:"cloudProfile"`
	Project                   *Project              `json:"project"`
	Training                  *Training             `json:"training"`
	ExperimentRuns            []*ExperimentRun      `json:"experimentRuns"`
	Config                    *ExperimentRunConfig  `json:"config"`
	ResourceAccessToken       *ResourceAccessToken  `json:"resourceAccessToken"`
	TaskActions               []*TaskAction         `json:"taskActions"`
	MlflowExperiment          *MLFlowExperiment     `json:"mlflowExperiment"`
	ResourceAccessTokenString string                `json:"resourceAccessTokenString"`
}

type ExperimentCount struct {
	ExperimentRuns int64 `json:"experimentRuns"`
	TaskActions    int64 `json:"taskActions"`
}

type ExperimentListRelationFilter struct {
	Every *ExperimentWhereInput `json:"every,omitempty"`
	Some  *ExperimentWhereInput `json:"some,omitempty"`
	None  *ExperimentWhereInput `json:"none,omitempty"`
}

type ExperimentOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type ExperimentOrderByWithRelationInput struct {
	ID                  *SortOrder                                   `json:"id,omitempty"`
	Name                *SortOrder                                   `json:"name,omitempty"`
	AccountID           *SortOrder                                   `json:"accountId,omitempty"`
	CloudProfileID      *SortOrder                                   `json:"cloudProfileId,omitempty"`
	ProjectID           *SortOrder                                   `json:"projectId,omitempty"`
	TrainingID          *SortOrder                                   `json:"trainingId,omitempty"`
	Status              *SortOrder                                   `json:"status,omitempty"`
	Environment         *SortOrder                                   `json:"environment,omitempty"`
	MlflowExperimentID  *SortOrder                                   `json:"mlflowExperimentId,omitempty"`
	CreatedAt           *SortOrder                                   `json:"createdAt,omitempty"`
	UpdatedAt           *SortOrder                                   `json:"updatedAt,omitempty"`
	Account             *AccountOrderByWithRelationInput             `json:"account,omitempty"`
	CloudProfile        *CloudProfileOrderByWithRelationInput        `json:"cloudProfile,omitempty"`
	Project             *ProjectOrderByWithRelationInput             `json:"project,omitempty"`
	Training            *TrainingOrderByWithRelationInput            `json:"training,omitempty"`
	ExperimentRuns      *ExperimentRunOrderByRelationAggregateInput  `json:"experimentRuns,omitempty"`
	Config              *ExperimentRunConfigOrderByWithRelationInput `json:"config,omitempty"`
	ResourceAccessToken *ResourceAccessTokenOrderByWithRelationInput `json:"resourceAccessToken,omitempty"`
	TaskActions         *TaskActionOrderByRelationAggregateInput     `json:"taskActions,omitempty"`
}

type ExperimentRelationFilter struct {
	Is    *ExperimentWhereInput `json:"is,omitempty"`
	IsNot *ExperimentWhereInput `json:"isNot,omitempty"`
}

type ExperimentRun struct {
	ID                          string                   `json:"id"`
	ExperimentID                string                   `json:"experimentId"`
	DevelImageTag               *string                  `json:"develImageTag"`
	Status                      ExperimentRunStatus      `json:"status"`
	Environment                 ExperimentRunEnvironment `json:"environment"`
	MlflowRunID                 *string                  `json:"mlflowRunId"`
	CreatedAt                   time.Time                `json:"createdAt"`
	UpdatedAt                   time.Time                `json:"updatedAt"`
	Count                       *ExperimentRunCount      `json:"_count"`
	Experiment                  Experiment               `json:"experiment"`
	ResourceAccessToken         *ResourceAccessToken     `json:"resourceAccessToken"`
	Config                      *ExperimentRunConfig     `json:"config"`
	TaskActions                 []*TaskAction            `json:"taskActions"`
	LogsPresignedURL            *string                  `json:"logsPresignedUrl"`
	ZippedArtifactsPresignedURL *string                  `json:"zippedArtifactsPresignedUrl"`
	MlflowRun                   *MLFlowRun               `json:"mlflowRun"`
}

type ExperimentRunConfig struct {
	ID                 string  `json:"id"`
	ExperimentID       *string `json:"experimentId"`
	ExperimentRunID    *string `json:"experimentRunId"`
	Entrypoint         *string `json:"entrypoint"`
	RequirementsPath   *string `json:"requirementsPath"`
	ArtifactsDirectory *string `json:"artifactsDirectory"`
}

type ExperimentRunConfigOrderByWithRelationInput struct {
	ID                 *SortOrder                             `json:"id,omitempty"`
	ExperimentID       *SortOrder                             `json:"experimentId,omitempty"`
	ExperimentRunID    *SortOrder                             `json:"experimentRunId,omitempty"`
	Entrypoint         *SortOrder                             `json:"entrypoint,omitempty"`
	RequirementsPath   *SortOrder                             `json:"requirementsPath,omitempty"`
	ArtifactsDirectory *SortOrder                             `json:"artifactsDirectory,omitempty"`
	Experiment         *ExperimentOrderByWithRelationInput    `json:"experiment,omitempty"`
	ExperimentRun      *ExperimentRunOrderByWithRelationInput `json:"experimentRun,omitempty"`
}

type ExperimentRunConfigRelationFilter struct {
	Is    *ExperimentRunConfigWhereInput `json:"is,omitempty"`
	IsNot *ExperimentRunConfigWhereInput `json:"isNot,omitempty"`
}

type ExperimentRunConfigWhereInput struct {
	And                []*ExperimentRunConfigWhereInput `json:"AND,omitempty"`
	Or                 []*ExperimentRunConfigWhereInput `json:"OR,omitempty"`
	Not                []*ExperimentRunConfigWhereInput `json:"NOT,omitempty"`
	ID                 *StringFilter                    `json:"id,omitempty"`
	ExperimentID       *StringNullableFilter            `json:"experimentId,omitempty"`
	ExperimentRunID    *StringNullableFilter            `json:"experimentRunId,omitempty"`
	Entrypoint         *StringNullableFilter            `json:"entrypoint,omitempty"`
	RequirementsPath   *StringNullableFilter            `json:"requirementsPath,omitempty"`
	ArtifactsDirectory *StringNullableFilter            `json:"artifactsDirectory,omitempty"`
	Experiment         *ExperimentRelationFilter        `json:"experiment,omitempty"`
	ExperimentRun      *ExperimentRunRelationFilter     `json:"experimentRun,omitempty"`
}

type ExperimentRunCount struct {
	TaskActions int64 `json:"taskActions"`
}

type ExperimentRunListRelationFilter struct {
	Every *ExperimentRunWhereInput `json:"every,omitempty"`
	Some  *ExperimentRunWhereInput `json:"some,omitempty"`
	None  *ExperimentRunWhereInput `json:"none,omitempty"`
}

type ExperimentRunOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type ExperimentRunOrderByWithRelationInput struct {
	ID                  *SortOrder                                   `json:"id,omitempty"`
	ExperimentID        *SortOrder                                   `json:"experimentId,omitempty"`
	DevelImageTag       *SortOrder                                   `json:"develImageTag,omitempty"`
	Status              *SortOrder                                   `json:"status,omitempty"`
	Environment         *SortOrder                                   `json:"environment,omitempty"`
	MlflowRunID         *SortOrder                                   `json:"mlflowRunId,omitempty"`
	CreatedAt           *SortOrder                                   `json:"createdAt,omitempty"`
	UpdatedAt           *SortOrder                                   `json:"updatedAt,omitempty"`
	Experiment          *ExperimentOrderByWithRelationInput          `json:"experiment,omitempty"`
	ResourceAccessToken *ResourceAccessTokenOrderByWithRelationInput `json:"resourceAccessToken,omitempty"`
	Config              *ExperimentRunConfigOrderByWithRelationInput `json:"config,omitempty"`
	TaskActions         *TaskActionOrderByRelationAggregateInput     `json:"taskActions,omitempty"`
}

type ExperimentRunRelationFilter struct {
	Is    *ExperimentRunWhereInput `json:"is,omitempty"`
	IsNot *ExperimentRunWhereInput `json:"isNot,omitempty"`
}

type ExperimentRunWhereInput struct {
	And                 []*ExperimentRunWhereInput          `json:"AND,omitempty"`
	Or                  []*ExperimentRunWhereInput          `json:"OR,omitempty"`
	Not                 []*ExperimentRunWhereInput          `json:"NOT,omitempty"`
	ID                  *StringFilter                       `json:"id,omitempty"`
	ExperimentID        *StringFilter                       `json:"experimentId,omitempty"`
	DevelImageTag       *StringNullableFilter               `json:"develImageTag,omitempty"`
	Status              *EnumExperimentRunStatusFilter      `json:"status,omitempty"`
	Environment         *EnumExperimentRunEnvironmentFilter `json:"environment,omitempty"`
	MlflowRunID         *StringNullableFilter               `json:"mlflowRunId,omitempty"`
	CreatedAt           *DateTimeFilter                     `json:"createdAt,omitempty"`
	UpdatedAt           *DateTimeFilter                     `json:"updatedAt,omitempty"`
	Experiment          *ExperimentRelationFilter           `json:"experiment,omitempty"`
	ResourceAccessToken *ResourceAccessTokenRelationFilter  `json:"resourceAccessToken,omitempty"`
	Config              *ExperimentRunConfigRelationFilter  `json:"config,omitempty"`
	TaskActions         *TaskActionListRelationFilter       `json:"taskActions,omitempty"`
}

type ExperimentRunWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type ExperimentWhereInput struct {
	And                 []*ExperimentWhereInput            `json:"AND,omitempty"`
	Or                  []*ExperimentWhereInput            `json:"OR,omitempty"`
	Not                 []*ExperimentWhereInput            `json:"NOT,omitempty"`
	ID                  *StringFilter                      `json:"id,omitempty"`
	Name                *StringFilter                      `json:"name,omitempty"`
	AccountID           *StringFilter                      `json:"accountId,omitempty"`
	CloudProfileID      *StringNullableFilter              `json:"cloudProfileId,omitempty"`
	ProjectID           *StringNullableFilter              `json:"projectId,omitempty"`
	TrainingID          *StringNullableFilter              `json:"trainingId,omitempty"`
	Status              *EnumExperimentStatusFilter        `json:"status,omitempty"`
	Environment         *EnumExperimentEnvironmentFilter   `json:"environment,omitempty"`
	MlflowExperimentID  *StringNullableFilter              `json:"mlflowExperimentId,omitempty"`
	CreatedAt           *DateTimeFilter                    `json:"createdAt,omitempty"`
	UpdatedAt           *DateTimeFilter                    `json:"updatedAt,omitempty"`
	Account             *AccountRelationFilter             `json:"account,omitempty"`
	CloudProfile        *CloudProfileRelationFilter        `json:"cloudProfile,omitempty"`
	Project             *ProjectRelationFilter             `json:"project,omitempty"`
	Training            *TrainingRelationFilter            `json:"training,omitempty"`
	ExperimentRuns      *ExperimentRunListRelationFilter   `json:"experimentRuns,omitempty"`
	Config              *ExperimentRunConfigRelationFilter `json:"config,omitempty"`
	ResourceAccessToken *ResourceAccessTokenRelationFilter `json:"resourceAccessToken,omitempty"`
	TaskActions         *TaskActionListRelationFilter      `json:"taskActions,omitempty"`
}

type ExperimentWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type ExternalSso struct {
	ID       string              `json:"id"`
	UserID   string              `json:"userId"`
	Provider ExternalSSOProvider `json:"provider"`
	GithubID *int64              `json:"githubId"`
}

type ExternalSSOOrderByWithRelationInput struct {
	ID       *SortOrder                    `json:"id,omitempty"`
	UserID   *SortOrder                    `json:"userId,omitempty"`
	Provider *SortOrder                    `json:"provider,omitempty"`
	GithubID *SortOrder                    `json:"githubId,omitempty"`
	User     *UserOrderByWithRelationInput `json:"user,omitempty"`
}

type ExternalSSORelationFilter struct {
	Is    *ExternalSSOWhereInput `json:"is,omitempty"`
	IsNot *ExternalSSOWhereInput `json:"isNot,omitempty"`
}

type ExternalSSOWhereInput struct {
	And      []*ExternalSSOWhereInput       `json:"AND,omitempty"`
	Or       []*ExternalSSOWhereInput       `json:"OR,omitempty"`
	Not      []*ExternalSSOWhereInput       `json:"NOT,omitempty"`
	ID       *StringFilter                  `json:"id,omitempty"`
	UserID   *StringFilter                  `json:"userId,omitempty"`
	Provider *EnumExternalSSOProviderFilter `json:"provider,omitempty"`
	GithubID *IntNullableFilter             `json:"githubId,omitempty"`
	User     *UserRelationFilter            `json:"user,omitempty"`
}

type FalconMLConfig struct {
	ID                        string               `json:"id"`
	PythonVersion             string               `json:"pythonVersion"`
	Framework                 string               `json:"framework"`
	FrameworkVersion          string               `json:"frameworkVersion"`
	CudaVersion               *string              `json:"cudaVersion"`
	CudnnVersion              *string              `json:"cudnnVersion"`
	NvidiaCudaToolkitImageTag *string              `json:"nvidiaCudaToolkitImageTag"`
	Count                     *FalconMLConfigCount `json:"_count"`
}

type FalconMLConfigCount struct {
	Trainings int64 `json:"trainings"`
}

type FalconMLConfigOrderByWithRelationInput struct {
	ID                        *SortOrder                             `json:"id,omitempty"`
	PythonVersion             *SortOrder                             `json:"pythonVersion,omitempty"`
	Framework                 *SortOrder                             `json:"framework,omitempty"`
	FrameworkVersion          *SortOrder                             `json:"frameworkVersion,omitempty"`
	CudaVersion               *SortOrder                             `json:"cudaVersion,omitempty"`
	CudnnVersion              *SortOrder                             `json:"cudnnVersion,omitempty"`
	NvidiaCudaToolkitImageTag *SortOrder                             `json:"nvidiaCudaToolkitImageTag,omitempty"`
	Trainings                 *TrainingOrderByRelationAggregateInput `json:"trainings,omitempty"`
}

type FalconMLConfigRelationFilter struct {
	Is    *FalconMLConfigWhereInput `json:"is,omitempty"`
	IsNot *FalconMLConfigWhereInput `json:"isNot,omitempty"`
}

type FalconMLConfigWhereInput struct {
	And                       []*FalconMLConfigWhereInput `json:"AND,omitempty"`
	Or                        []*FalconMLConfigWhereInput `json:"OR,omitempty"`
	Not                       []*FalconMLConfigWhereInput `json:"NOT,omitempty"`
	ID                        *StringFilter               `json:"id,omitempty"`
	PythonVersion             *StringFilter               `json:"pythonVersion,omitempty"`
	Framework                 *StringFilter               `json:"framework,omitempty"`
	FrameworkVersion          *StringFilter               `json:"frameworkVersion,omitempty"`
	CudaVersion               *StringNullableFilter       `json:"cudaVersion,omitempty"`
	CudnnVersion              *StringNullableFilter       `json:"cudnnVersion,omitempty"`
	NvidiaCudaToolkitImageTag *StringNullableFilter       `json:"nvidiaCudaToolkitImageTag,omitempty"`
	Trainings                 *TrainingListRelationFilter `json:"trainings,omitempty"`
}

type FalconMLConfigWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type GCPAppConfig struct {
	ID                            string  `json:"id"`
	CloudProviderAppConfigID      string  `json:"cloudProviderAppConfigId"`
	GcpRegion                     string  `json:"gcpRegion"`
	GcpZone                       string  `json:"gcpZone"`
	ContainerCPU                  *string `json:"containerCpu"`
	ContainerMemory               *string `json:"containerMemory"`
	ContainerCPUIdle              *bool   `json:"containerCpuIdle"`
	ScalingMinCount               *int64  `json:"scalingMinCount"`
	ScalingMaxCount               *int64  `json:"scalingMaxCount"`
	MaxInstanceRequestConcurrency *int64  `json:"maxInstanceRequestConcurrency"`
}

type GCPAppConfigOrderByWithRelationInput struct {
	ID                            *SortOrder                                      `json:"id,omitempty"`
	CloudProviderAppConfigID      *SortOrder                                      `json:"cloudProviderAppConfigId,omitempty"`
	GcpRegion                     *SortOrder                                      `json:"gcpRegion,omitempty"`
	GcpZone                       *SortOrder                                      `json:"gcpZone,omitempty"`
	ContainerCPU                  *SortOrder                                      `json:"containerCpu,omitempty"`
	ContainerMemory               *SortOrder                                      `json:"containerMemory,omitempty"`
	ContainerCPUIdle              *SortOrder                                      `json:"containerCpuIdle,omitempty"`
	ScalingMinCount               *SortOrder                                      `json:"scalingMinCount,omitempty"`
	ScalingMaxCount               *SortOrder                                      `json:"scalingMaxCount,omitempty"`
	MaxInstanceRequestConcurrency *SortOrder                                      `json:"maxInstanceRequestConcurrency,omitempty"`
	CloudProviderAppConfig        *CloudProviderAppConfigOrderByWithRelationInput `json:"cloudProviderAppConfig,omitempty"`
}

type GCPAppConfigRelationFilter struct {
	Is    *GCPAppConfigWhereInput `json:"is,omitempty"`
	IsNot *GCPAppConfigWhereInput `json:"isNot,omitempty"`
}

type GCPAppConfigWhereInput struct {
	And                           []*GCPAppConfigWhereInput             `json:"AND,omitempty"`
	Or                            []*GCPAppConfigWhereInput             `json:"OR,omitempty"`
	Not                           []*GCPAppConfigWhereInput             `json:"NOT,omitempty"`
	ID                            *StringFilter                         `json:"id,omitempty"`
	CloudProviderAppConfigID      *StringFilter                         `json:"cloudProviderAppConfigId,omitempty"`
	GcpRegion                     *StringFilter                         `json:"gcpRegion,omitempty"`
	GcpZone                       *StringFilter                         `json:"gcpZone,omitempty"`
	ContainerCPU                  *StringNullableFilter                 `json:"containerCpu,omitempty"`
	ContainerMemory               *StringNullableFilter                 `json:"containerMemory,omitempty"`
	ContainerCPUIdle              *BoolNullableFilter                   `json:"containerCpuIdle,omitempty"`
	ScalingMinCount               *IntNullableFilter                    `json:"scalingMinCount,omitempty"`
	ScalingMaxCount               *IntNullableFilter                    `json:"scalingMaxCount,omitempty"`
	MaxInstanceRequestConcurrency *IntNullableFilter                    `json:"maxInstanceRequestConcurrency,omitempty"`
	CloudProviderAppConfig        *CloudProviderAppConfigRelationFilter `json:"cloudProviderAppConfig,omitempty"`
}

type GCPAppConfigWhereUniqueInput struct {
	ID                       *string `json:"id,omitempty"`
	CloudProviderAppConfigID *string `json:"cloudProviderAppConfigId,omitempty"`
}

type GCPAppDefaultConfig struct {
	GcpRegion                     string  `json:"gcpRegion"`
	GcpZone                       string  `json:"gcpZone"`
	ContainerCPU                  *string `json:"containerCpu"`
	ContainerMemory               *string `json:"containerMemory"`
	ContainerCPUIdle              *bool   `json:"containerCpuIdle"`
	ScalingMinCount               *int64  `json:"scalingMinCount"`
	ScalingMaxCount               *int64  `json:"scalingMaxCount"`
	MaxInstanceRequestConcurrency *int64  `json:"maxInstanceRequestConcurrency"`
}

func (GCPAppDefaultConfig) IsApplicationInfrastructurePlanConfig() {}

type GCPContainerRegistryConfig struct {
	ID                                     string `json:"id"`
	CloudProviderContainerRegistryConfigID string `json:"cloudProviderContainerRegistryConfigId"`
	GcpRegion                              string `json:"gcpRegion"`
	GcpZone                                string `json:"gcpZone"`
}

type GCPContainerRegistryConfigOrderByWithRelationInput struct {
	ID                                     *SortOrder                                                    `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *SortOrder                                                    `json:"cloudProviderContainerRegistryConfigId,omitempty"`
	GcpRegion                              *SortOrder                                                    `json:"gcpRegion,omitempty"`
	GcpZone                                *SortOrder                                                    `json:"gcpZone,omitempty"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfigOrderByWithRelationInput `json:"cloudProviderContainerRegistryConfig,omitempty"`
}

type GCPContainerRegistryConfigRelationFilter struct {
	Is    *GCPContainerRegistryConfigWhereInput `json:"is,omitempty"`
	IsNot *GCPContainerRegistryConfigWhereInput `json:"isNot,omitempty"`
}

type GCPContainerRegistryConfigWhereInput struct {
	And                                    []*GCPContainerRegistryConfigWhereInput             `json:"AND,omitempty"`
	Or                                     []*GCPContainerRegistryConfigWhereInput             `json:"OR,omitempty"`
	Not                                    []*GCPContainerRegistryConfigWhereInput             `json:"NOT,omitempty"`
	ID                                     *StringFilter                                       `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *StringFilter                                       `json:"cloudProviderContainerRegistryConfigId,omitempty"`
	GcpRegion                              *StringFilter                                       `json:"gcpRegion,omitempty"`
	GcpZone                                *StringFilter                                       `json:"gcpZone,omitempty"`
	CloudProviderContainerRegistryConfig   *CloudProviderContainerRegistryConfigRelationFilter `json:"cloudProviderContainerRegistryConfig,omitempty"`
}

type GCPContainerRegistryConfigWhereUniqueInput struct {
	ID                                     *string `json:"id,omitempty"`
	CloudProviderContainerRegistryConfigID *string `json:"cloudProviderContainerRegistryConfigId,omitempty"`
}

type GCPCredentials struct {
	GcpProjectID         string `json:"gcpProjectId"`
	GcpServiceAccountKey string `json:"gcpServiceAccountKey"`
}

type GCPFalconConfig struct {
	ID                          string  `json:"id"`
	CloudProviderFalconConfigID string  `json:"cloudProviderFalconConfigId"`
	GcpRegion                   string  `json:"gcpRegion"`
	GcpZone                     string  `json:"gcpZone"`
	ComputeMachineType          *string `json:"computeMachineType"`
	ComputeInstanceCount        *int64  `json:"computeInstanceCount"`
	ComputeVolumeSize           *int64  `json:"computeVolumeSize"`
	ComputeGpuCount             *int64  `json:"computeGpuCount"`
	ComputeGpuType              *string `json:"computeGpuType"`
}

type GCPFalconConfigOrderByWithRelationInput struct {
	ID                          *SortOrder                                         `json:"id,omitempty"`
	CloudProviderFalconConfigID *SortOrder                                         `json:"cloudProviderFalconConfigId,omitempty"`
	GcpRegion                   *SortOrder                                         `json:"gcpRegion,omitempty"`
	GcpZone                     *SortOrder                                         `json:"gcpZone,omitempty"`
	ComputeMachineType          *SortOrder                                         `json:"computeMachineType,omitempty"`
	ComputeInstanceCount        *SortOrder                                         `json:"computeInstanceCount,omitempty"`
	ComputeVolumeSize           *SortOrder                                         `json:"computeVolumeSize,omitempty"`
	ComputeGpuCount             *SortOrder                                         `json:"computeGpuCount,omitempty"`
	ComputeGpuType              *SortOrder                                         `json:"computeGpuType,omitempty"`
	CloudProviderFalconConfig   *CloudProviderFalconConfigOrderByWithRelationInput `json:"cloudProviderFalconConfig,omitempty"`
}

type GCPFalconConfigRelationFilter struct {
	Is    *GCPFalconConfigWhereInput `json:"is,omitempty"`
	IsNot *GCPFalconConfigWhereInput `json:"isNot,omitempty"`
}

type GCPFalconConfigWhereInput struct {
	And                         []*GCPFalconConfigWhereInput             `json:"AND,omitempty"`
	Or                          []*GCPFalconConfigWhereInput             `json:"OR,omitempty"`
	Not                         []*GCPFalconConfigWhereInput             `json:"NOT,omitempty"`
	ID                          *StringFilter                            `json:"id,omitempty"`
	CloudProviderFalconConfigID *StringFilter                            `json:"cloudProviderFalconConfigId,omitempty"`
	GcpRegion                   *StringFilter                            `json:"gcpRegion,omitempty"`
	GcpZone                     *StringFilter                            `json:"gcpZone,omitempty"`
	ComputeMachineType          *StringNullableFilter                    `json:"computeMachineType,omitempty"`
	ComputeInstanceCount        *IntNullableFilter                       `json:"computeInstanceCount,omitempty"`
	ComputeVolumeSize           *IntNullableFilter                       `json:"computeVolumeSize,omitempty"`
	ComputeGpuCount             *IntNullableFilter                       `json:"computeGpuCount,omitempty"`
	ComputeGpuType              *StringNullableFilter                    `json:"computeGpuType,omitempty"`
	CloudProviderFalconConfig   *CloudProviderFalconConfigRelationFilter `json:"cloudProviderFalconConfig,omitempty"`
}

type GCPFalconConfigWhereUniqueInput struct {
	ID                          *string `json:"id,omitempty"`
	CloudProviderFalconConfigID *string `json:"cloudProviderFalconConfigId,omitempty"`
}

type GCPFalconDefaultConfig struct {
	GcpRegion            string  `json:"gcpRegion"`
	GcpZone              string  `json:"gcpZone"`
	ComputeMachineType   *string `json:"computeMachineType"`
	ComputeInstanceCount *int64  `json:"computeInstanceCount"`
	ComputeVolumeSize    *int64  `json:"computeVolumeSize"`
	ComputeGpuCount      *int64  `json:"computeGpuCount"`
	ComputeGpuType       *string `json:"computeGpuType"`
	IsAvailable          bool    `json:"isAvailable"`
}

func (GCPFalconDefaultConfig) IsTrainingInfrastructurePlanConfig() {}

type GCPNebulonConfig struct {
	ID                           string `json:"id"`
	CloudProviderNebulonConfigID string `json:"cloudProviderNebulonConfigId"`
	GcpRegion                    string `json:"gcpRegion"`
	GcpZone                      string `json:"gcpZone"`
	// ID of the Compute Network created on GCP. This is used to attach other resources to the Compute Network.
	ResourceName *string `json:"resourceName"`
}

type GCPNebulonConfigOrderByWithRelationInput struct {
	ID                           *SortOrder                                          `json:"id,omitempty"`
	CloudProviderNebulonConfigID *SortOrder                                          `json:"cloudProviderNebulonConfigId,omitempty"`
	GcpRegion                    *SortOrder                                          `json:"gcpRegion,omitempty"`
	GcpZone                      *SortOrder                                          `json:"gcpZone,omitempty"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfigOrderByWithRelationInput `json:"cloudProviderNebulonConfig,omitempty"`
}

type GCPNebulonConfigRelationFilter struct {
	Is    *GCPNebulonConfigWhereInput `json:"is,omitempty"`
	IsNot *GCPNebulonConfigWhereInput `json:"isNot,omitempty"`
}

type GCPNebulonConfigWhereInput struct {
	And                          []*GCPNebulonConfigWhereInput             `json:"AND,omitempty"`
	Or                           []*GCPNebulonConfigWhereInput             `json:"OR,omitempty"`
	Not                          []*GCPNebulonConfigWhereInput             `json:"NOT,omitempty"`
	ID                           *StringFilter                             `json:"id,omitempty"`
	CloudProviderNebulonConfigID *StringFilter                             `json:"cloudProviderNebulonConfigId,omitempty"`
	GcpRegion                    *StringFilter                             `json:"gcpRegion,omitempty"`
	GcpZone                      *StringFilter                             `json:"gcpZone,omitempty"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfigRelationFilter `json:"cloudProviderNebulonConfig,omitempty"`
}

type GCPNebulonConfigWhereUniqueInput struct {
	ID                           *string `json:"id,omitempty"`
	CloudProviderNebulonConfigID *string `json:"cloudProviderNebulonConfigId,omitempty"`
}

type GCPYodaConfig struct {
	ID                        string  `json:"id"`
	CloudProviderYodaConfigID string  `json:"cloudProviderYodaConfigId"`
	GcpRegion                 string  `json:"gcpRegion"`
	GcpZone                   string  `json:"gcpZone"`
	GcpProjectID              *string `json:"gcpProjectId"`
	GcpServiceAccountKey      *string `json:"gcpServiceAccountKey"`
}

type GCPYodaConfigOrderByWithRelationInput struct {
	ID                        *SortOrder                                       `json:"id,omitempty"`
	CloudProviderYodaConfigID *SortOrder                                       `json:"cloudProviderYodaConfigId,omitempty"`
	GcpRegion                 *SortOrder                                       `json:"gcpRegion,omitempty"`
	GcpZone                   *SortOrder                                       `json:"gcpZone,omitempty"`
	CloudProviderYodaConfig   *CloudProviderYodaConfigOrderByWithRelationInput `json:"cloudProviderYodaConfig,omitempty"`
}

type GCPYodaConfigRelationFilter struct {
	Is    *GCPYodaConfigWhereInput `json:"is,omitempty"`
	IsNot *GCPYodaConfigWhereInput `json:"isNot,omitempty"`
}

type GCPYodaConfigWhereInput struct {
	And                       []*GCPYodaConfigWhereInput             `json:"AND,omitempty"`
	Or                        []*GCPYodaConfigWhereInput             `json:"OR,omitempty"`
	Not                       []*GCPYodaConfigWhereInput             `json:"NOT,omitempty"`
	ID                        *StringFilter                          `json:"id,omitempty"`
	CloudProviderYodaConfigID *StringFilter                          `json:"cloudProviderYodaConfigId,omitempty"`
	GcpRegion                 *StringFilter                          `json:"gcpRegion,omitempty"`
	GcpZone                   *StringFilter                          `json:"gcpZone,omitempty"`
	CloudProviderYodaConfig   *CloudProviderYodaConfigRelationFilter `json:"cloudProviderYodaConfig,omitempty"`
}

type GCPYodaConfigWhereUniqueInput struct {
	ID                        *string `json:"id,omitempty"`
	CloudProviderYodaConfigID *string `json:"cloudProviderYodaConfigId,omitempty"`
}

type GithubAccount struct {
	ID        int64  `json:"id"`
	Username  string `json:"username"`
	AvatarURL string `json:"avatarUrl"`
}

type GithubAppInstallation struct {
	ID            int64               `json:"id"`
	CreatedAt     time.Time           `json:"createdAt"`
	UpdatedAt     time.Time           `json:"updatedAt"`
	Account       Account             `json:"account"`
	Repositories  []*GithubRepository `json:"repositories"`
	GithubAccount GithubAccount       `json:"githubAccount"`
}

type GithubRepository struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	FullName    string `json:"fullName"`
	IsPrivate   bool   `json:"isPrivate"`
	AccessToken string `json:"accessToken"`
}

type IntFilter struct {
	Equals *int64           `json:"equals,omitempty"`
	In     []int64          `json:"in,omitempty"`
	NotIn  []int64          `json:"notIn,omitempty"`
	Lt     *int64           `json:"lt,omitempty"`
	Lte    *int64           `json:"lte,omitempty"`
	Gt     *int64           `json:"gt,omitempty"`
	Gte    *int64           `json:"gte,omitempty"`
	Not    *NestedIntFilter `json:"not,omitempty"`
}

type IntNullableFilter struct {
	Equals *int64                   `json:"equals,omitempty"`
	In     []int64                  `json:"in,omitempty"`
	NotIn  []int64                  `json:"notIn,omitempty"`
	Lt     *int64                   `json:"lt,omitempty"`
	Lte    *int64                   `json:"lte,omitempty"`
	Gt     *int64                   `json:"gt,omitempty"`
	Gte    *int64                   `json:"gte,omitempty"`
	Not    *NestedIntNullableFilter `json:"not,omitempty"`
}

type InviteTeamMemberInput struct {
	Users []*UserToBeInvited `json:"users"`
}

type KubernetesProfile struct {
	ID         string                  `json:"id"`
	Name       string                  `json:"name"`
	AccountID  string                  `json:"accountId"`
	Kubeconfig string                  `json:"kubeconfig"`
	Count      *KubernetesProfileCount `json:"_count"`
	IsEmpty    bool                    `json:"isEmpty"`
}

type KubernetesProfileAccountIDNameCompoundUniqueInput struct {
	AccountID string `json:"accountId"`
	Name      string `json:"name"`
}

type KubernetesProfileCount struct {
	RayClusters int64 `json:"rayClusters"`
}

type KubernetesProfileListRelationFilter struct {
	Every *KubernetesProfileWhereInput `json:"every,omitempty"`
	Some  *KubernetesProfileWhereInput `json:"some,omitempty"`
	None  *KubernetesProfileWhereInput `json:"none,omitempty"`
}

type KubernetesProfileOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type KubernetesProfileOrderByWithRelationInput struct {
	ID          *SortOrder                               `json:"id,omitempty"`
	Name        *SortOrder                               `json:"name,omitempty"`
	AccountID   *SortOrder                               `json:"accountId,omitempty"`
	Kubeconfig  *SortOrder                               `json:"kubeconfig,omitempty"`
	Account     *AccountOrderByWithRelationInput         `json:"account,omitempty"`
	RayClusters *RayClusterOrderByRelationAggregateInput `json:"rayClusters,omitempty"`
}

type KubernetesProfileRelationFilter struct {
	Is    *KubernetesProfileWhereInput `json:"is,omitempty"`
	IsNot *KubernetesProfileWhereInput `json:"isNot,omitempty"`
}

type KubernetesProfileWhereInput struct {
	And         []*KubernetesProfileWhereInput `json:"AND,omitempty"`
	Or          []*KubernetesProfileWhereInput `json:"OR,omitempty"`
	Not         []*KubernetesProfileWhereInput `json:"NOT,omitempty"`
	ID          *StringFilter                  `json:"id,omitempty"`
	Name        *StringFilter                  `json:"name,omitempty"`
	AccountID   *StringFilter                  `json:"accountId,omitempty"`
	Kubeconfig  *StringFilter                  `json:"kubeconfig,omitempty"`
	Account     *AccountRelationFilter         `json:"account,omitempty"`
	RayClusters *RayClusterListRelationFilter  `json:"rayClusters,omitempty"`
}

type KubernetesProfileWhereUniqueInput struct {
	ID            *string                                            `json:"id,omitempty"`
	AccountIDName *KubernetesProfileAccountIDNameCompoundUniqueInput `json:"accountId_name,omitempty"`
}

type MLFlowExperiment struct {
	ExperimentID     string `json:"experimentId"`
	Name             string `json:"name"`
	ArtifactLocation string `json:"artifactLocation"`
	// Current life cycle stage of the experiment: One of ("active", "deleted")
	LifecycleStage string       `json:"lifecycleStage"`
	Runs           []*MLFlowRun `json:"runs"`
}

type MLFlowExperimentWhereUniqueInput struct {
	ExperimentID string `json:"experimentId"`
}

type MLFlowRun struct {
	Info           MLFlowRunInfo      `json:"info"`
	Data           MLFlowRunData      `json:"data"`
	MetricsHistory []*MLFlowRunMetric `json:"metricsHistory"`
}

type MLFlowRunData struct {
	Metrics []*MLFlowRunMetric `json:"metrics"`
	Params  []*MLFlowRunParam  `json:"params"`
	Tags    []*MLFlowRunTag    `json:"tags"`
}

type MLFlowRunInfo struct {
	RunID        string    `json:"runId"`
	ExperimentID string    `json:"experimentId"`
	Status       string    `json:"status"`
	StartTime    time.Time `json:"startTime"`
	EndTime      time.Time `json:"endTime"`
	ArtifactURI  string    `json:"artifactUri"`
	// Current life cycle stage of the experiment: One of ("active", "deleted")
	LifecycleStage string `json:"lifecycleStage"`
}

type MLFlowRunMetric struct {
	Key       string    `json:"key"`
	Value     float64   `json:"value"`
	Timestamp time.Time `json:"timestamp"`
	Step      int64     `json:"step"`
}

type MLFlowRunParam struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type MLFlowRunTag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type NestedBoolFilter struct {
	Equals *bool             `json:"equals,omitempty"`
	Not    *NestedBoolFilter `json:"not,omitempty"`
}

type NestedBoolNullableFilter struct {
	Equals *bool                     `json:"equals,omitempty"`
	Not    *NestedBoolNullableFilter `json:"not,omitempty"`
}

type NestedDateTimeFilter struct {
	Equals *time.Time            `json:"equals,omitempty"`
	In     []*time.Time          `json:"in,omitempty"`
	NotIn  []*time.Time          `json:"notIn,omitempty"`
	Lt     *time.Time            `json:"lt,omitempty"`
	Lte    *time.Time            `json:"lte,omitempty"`
	Gt     *time.Time            `json:"gt,omitempty"`
	Gte    *time.Time            `json:"gte,omitempty"`
	Not    *NestedDateTimeFilter `json:"not,omitempty"`
}

type NestedDateTimeNullableFilter struct {
	Equals *time.Time                    `json:"equals,omitempty"`
	In     []*time.Time                  `json:"in,omitempty"`
	NotIn  []*time.Time                  `json:"notIn,omitempty"`
	Lt     *time.Time                    `json:"lt,omitempty"`
	Lte    *time.Time                    `json:"lte,omitempty"`
	Gt     *time.Time                    `json:"gt,omitempty"`
	Gte    *time.Time                    `json:"gte,omitempty"`
	Not    *NestedDateTimeNullableFilter `json:"not,omitempty"`
}

type NestedEnumApplicationContainerStatusFilter struct {
	Equals *ApplicationContainerStatus                 `json:"equals,omitempty"`
	In     []ApplicationContainerStatus                `json:"in,omitempty"`
	NotIn  []ApplicationContainerStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumApplicationContainerStatusFilter `json:"not,omitempty"`
}

type NestedEnumApplicationStatusFilter struct {
	Equals *ApplicationStatus                 `json:"equals,omitempty"`
	In     []ApplicationStatus                `json:"in,omitempty"`
	NotIn  []ApplicationStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumApplicationStatusFilter `json:"not,omitempty"`
}

type NestedEnumBillableUsageTypeFilter struct {
	Equals *BillableUsageType                 `json:"equals,omitempty"`
	In     []BillableUsageType                `json:"in,omitempty"`
	NotIn  []BillableUsageType                `json:"notIn,omitempty"`
	Not    *NestedEnumBillableUsageTypeFilter `json:"not,omitempty"`
}

type NestedEnumBillingPaymentProviderFilter struct {
	Equals *BillingPaymentProvider                 `json:"equals,omitempty"`
	In     []BillingPaymentProvider                `json:"in,omitempty"`
	NotIn  []BillingPaymentProvider                `json:"notIn,omitempty"`
	Not    *NestedEnumBillingPaymentProviderFilter `json:"not,omitempty"`
}

type NestedEnumBillingSubscriptionStatusFilter struct {
	Equals *BillingSubscriptionStatus                 `json:"equals,omitempty"`
	In     []BillingSubscriptionStatus                `json:"in,omitempty"`
	NotIn  []BillingSubscriptionStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumBillingSubscriptionStatusFilter `json:"not,omitempty"`
}

type NestedEnumCloudProviderAppConfigPlanNullableFilter struct {
	Equals *CloudProviderAppConfigPlan                         `json:"equals,omitempty"`
	In     []CloudProviderAppConfigPlan                        `json:"in,omitempty"`
	NotIn  []CloudProviderAppConfigPlan                        `json:"notIn,omitempty"`
	Not    *NestedEnumCloudProviderAppConfigPlanNullableFilter `json:"not,omitempty"`
}

type NestedEnumCloudProviderFalconConfigPlanNullableFilter struct {
	Equals *CloudProviderFalconConfigPlan                         `json:"equals,omitempty"`
	In     []CloudProviderFalconConfigPlan                        `json:"in,omitempty"`
	NotIn  []CloudProviderFalconConfigPlan                        `json:"notIn,omitempty"`
	Not    *NestedEnumCloudProviderFalconConfigPlanNullableFilter `json:"not,omitempty"`
}

type NestedEnumCloudProviderFilter struct {
	Equals *CloudProvider                 `json:"equals,omitempty"`
	In     []CloudProvider                `json:"in,omitempty"`
	NotIn  []CloudProvider                `json:"notIn,omitempty"`
	Not    *NestedEnumCloudProviderFilter `json:"not,omitempty"`
}

type NestedEnumDataStorageStatusFilter struct {
	Equals *DataStorageStatus                 `json:"equals,omitempty"`
	In     []DataStorageStatus                `json:"in,omitempty"`
	NotIn  []DataStorageStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumDataStorageStatusFilter `json:"not,omitempty"`
}

type NestedEnumExperimentEnvironmentFilter struct {
	Equals *ExperimentEnvironment                 `json:"equals,omitempty"`
	In     []ExperimentEnvironment                `json:"in,omitempty"`
	NotIn  []ExperimentEnvironment                `json:"notIn,omitempty"`
	Not    *NestedEnumExperimentEnvironmentFilter `json:"not,omitempty"`
}

type NestedEnumExperimentRunEnvironmentFilter struct {
	Equals *ExperimentRunEnvironment                 `json:"equals,omitempty"`
	In     []ExperimentRunEnvironment                `json:"in,omitempty"`
	NotIn  []ExperimentRunEnvironment                `json:"notIn,omitempty"`
	Not    *NestedEnumExperimentRunEnvironmentFilter `json:"not,omitempty"`
}

type NestedEnumExperimentRunStatusFilter struct {
	Equals *ExperimentRunStatus                 `json:"equals,omitempty"`
	In     []ExperimentRunStatus                `json:"in,omitempty"`
	NotIn  []ExperimentRunStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumExperimentRunStatusFilter `json:"not,omitempty"`
}

type NestedEnumExperimentStatusFilter struct {
	Equals *ExperimentStatus                 `json:"equals,omitempty"`
	In     []ExperimentStatus                `json:"in,omitempty"`
	NotIn  []ExperimentStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumExperimentStatusFilter `json:"not,omitempty"`
}

type NestedEnumExternalSSOProviderFilter struct {
	Equals *ExternalSSOProvider                 `json:"equals,omitempty"`
	In     []ExternalSSOProvider                `json:"in,omitempty"`
	NotIn  []ExternalSSOProvider                `json:"notIn,omitempty"`
	Not    *NestedEnumExternalSSOProviderFilter `json:"not,omitempty"`
}

type NestedEnumProjectStatusFilter struct {
	Equals *ProjectStatus                 `json:"equals,omitempty"`
	In     []ProjectStatus                `json:"in,omitempty"`
	NotIn  []ProjectStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumProjectStatusFilter `json:"not,omitempty"`
}

type NestedEnumRayClusterStatusFilter struct {
	Equals *RayClusterStatus                 `json:"equals,omitempty"`
	In     []RayClusterStatus                `json:"in,omitempty"`
	NotIn  []RayClusterStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumRayClusterStatusFilter `json:"not,omitempty"`
}

type NestedEnumRoleInTeamFilter struct {
	Equals *RoleInTeam                 `json:"equals,omitempty"`
	In     []RoleInTeam                `json:"in,omitempty"`
	NotIn  []RoleInTeam                `json:"notIn,omitempty"`
	Not    *NestedEnumRoleInTeamFilter `json:"not,omitempty"`
}

type NestedEnumTaskActionStateFilter struct {
	Equals *TaskActionState                 `json:"equals,omitempty"`
	In     []TaskActionState                `json:"in,omitempty"`
	NotIn  []TaskActionState                `json:"notIn,omitempty"`
	Not    *NestedEnumTaskActionStateFilter `json:"not,omitempty"`
}

type NestedEnumTaskActionTypeFilter struct {
	Equals *TaskActionType                 `json:"equals,omitempty"`
	In     []TaskActionType                `json:"in,omitempty"`
	NotIn  []TaskActionType                `json:"notIn,omitempty"`
	Not    *NestedEnumTaskActionTypeFilter `json:"not,omitempty"`
}

type NestedEnumTaskStepStateFilter struct {
	Equals *TaskStepState                 `json:"equals,omitempty"`
	In     []TaskStepState                `json:"in,omitempty"`
	NotIn  []TaskStepState                `json:"notIn,omitempty"`
	Not    *NestedEnumTaskStepStateFilter `json:"not,omitempty"`
}

type NestedEnumTeamMemberInvitationStatusFilter struct {
	Equals *TeamMemberInvitationStatus                 `json:"equals,omitempty"`
	In     []TeamMemberInvitationStatus                `json:"in,omitempty"`
	NotIn  []TeamMemberInvitationStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumTeamMemberInvitationStatusFilter `json:"not,omitempty"`
}

type NestedEnumTrainingAnsibleTaskTypeFilter struct {
	Equals *TrainingAnsibleTaskType                 `json:"equals,omitempty"`
	In     []TrainingAnsibleTaskType                `json:"in,omitempty"`
	NotIn  []TrainingAnsibleTaskType                `json:"notIn,omitempty"`
	Not    *NestedEnumTrainingAnsibleTaskTypeFilter `json:"not,omitempty"`
}

type NestedEnumTrainingMountStatusFilter struct {
	Equals *TrainingMountStatus                 `json:"equals,omitempty"`
	In     []TrainingMountStatus                `json:"in,omitempty"`
	NotIn  []TrainingMountStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumTrainingMountStatusFilter `json:"not,omitempty"`
}

type NestedEnumTrainingRunningStateFilter struct {
	Equals *TrainingRunningState                 `json:"equals,omitempty"`
	In     []TrainingRunningState                `json:"in,omitempty"`
	NotIn  []TrainingRunningState                `json:"notIn,omitempty"`
	Not    *NestedEnumTrainingRunningStateFilter `json:"not,omitempty"`
}

type NestedEnumTrainingStatusFilter struct {
	Equals *TrainingStatus                 `json:"equals,omitempty"`
	In     []TrainingStatus                `json:"in,omitempty"`
	NotIn  []TrainingStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumTrainingStatusFilter `json:"not,omitempty"`
}

type NestedEnumVPCAttachmentStatusFilter struct {
	Equals *VPCAttachmentStatus                 `json:"equals,omitempty"`
	In     []VPCAttachmentStatus                `json:"in,omitempty"`
	NotIn  []VPCAttachmentStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumVPCAttachmentStatusFilter `json:"not,omitempty"`
}

type NestedEnumVPCStatusFilter struct {
	Equals *VPCStatus                 `json:"equals,omitempty"`
	In     []VPCStatus                `json:"in,omitempty"`
	NotIn  []VPCStatus                `json:"notIn,omitempty"`
	Not    *NestedEnumVPCStatusFilter `json:"not,omitempty"`
}

type NestedIntFilter struct {
	Equals *int64           `json:"equals,omitempty"`
	In     []int64          `json:"in,omitempty"`
	NotIn  []int64          `json:"notIn,omitempty"`
	Lt     *int64           `json:"lt,omitempty"`
	Lte    *int64           `json:"lte,omitempty"`
	Gt     *int64           `json:"gt,omitempty"`
	Gte    *int64           `json:"gte,omitempty"`
	Not    *NestedIntFilter `json:"not,omitempty"`
}

type NestedIntNullableFilter struct {
	Equals *int64                   `json:"equals,omitempty"`
	In     []int64                  `json:"in,omitempty"`
	NotIn  []int64                  `json:"notIn,omitempty"`
	Lt     *int64                   `json:"lt,omitempty"`
	Lte    *int64                   `json:"lte,omitempty"`
	Gt     *int64                   `json:"gt,omitempty"`
	Gte    *int64                   `json:"gte,omitempty"`
	Not    *NestedIntNullableFilter `json:"not,omitempty"`
}

type NestedStringFilter struct {
	Equals     *string             `json:"equals,omitempty"`
	In         []string            `json:"in,omitempty"`
	NotIn      []string            `json:"notIn,omitempty"`
	Lt         *string             `json:"lt,omitempty"`
	Lte        *string             `json:"lte,omitempty"`
	Gt         *string             `json:"gt,omitempty"`
	Gte        *string             `json:"gte,omitempty"`
	Contains   *string             `json:"contains,omitempty"`
	StartsWith *string             `json:"startsWith,omitempty"`
	EndsWith   *string             `json:"endsWith,omitempty"`
	Not        *NestedStringFilter `json:"not,omitempty"`
}

type NestedStringNullableFilter struct {
	Equals     *string                     `json:"equals,omitempty"`
	In         []string                    `json:"in,omitempty"`
	NotIn      []string                    `json:"notIn,omitempty"`
	Lt         *string                     `json:"lt,omitempty"`
	Lte        *string                     `json:"lte,omitempty"`
	Gt         *string                     `json:"gt,omitempty"`
	Gte        *string                     `json:"gte,omitempty"`
	Contains   *string                     `json:"contains,omitempty"`
	StartsWith *string                     `json:"startsWith,omitempty"`
	EndsWith   *string                     `json:"endsWith,omitempty"`
	Not        *NestedStringNullableFilter `json:"not,omitempty"`
}

type Onboarding struct {
	ID                    string `json:"id"`
	AccountID             string `json:"accountId"`
	IsGithubConnected     bool   `json:"isGithubConnected"`
	IsCloudProfileCreated bool   `json:"isCloudProfileCreated"`
	IsCliInstalled        bool   `json:"isCliInstalled"`
	IsProjectCreated      bool   `json:"isProjectCreated"`
}

type OnboardingOrderByWithRelationInput struct {
	ID                    *SortOrder                       `json:"id,omitempty"`
	AccountID             *SortOrder                       `json:"accountId,omitempty"`
	IsGithubConnected     *SortOrder                       `json:"isGithubConnected,omitempty"`
	IsCloudProfileCreated *SortOrder                       `json:"isCloudProfileCreated,omitempty"`
	IsCliInstalled        *SortOrder                       `json:"isCliInstalled,omitempty"`
	IsProjectCreated      *SortOrder                       `json:"isProjectCreated,omitempty"`
	Account               *AccountOrderByWithRelationInput `json:"account,omitempty"`
}

type OnboardingRelationFilter struct {
	Is    *OnboardingWhereInput `json:"is,omitempty"`
	IsNot *OnboardingWhereInput `json:"isNot,omitempty"`
}

type OnboardingWhereInput struct {
	And                   []*OnboardingWhereInput `json:"AND,omitempty"`
	Or                    []*OnboardingWhereInput `json:"OR,omitempty"`
	Not                   []*OnboardingWhereInput `json:"NOT,omitempty"`
	ID                    *StringFilter           `json:"id,omitempty"`
	AccountID             *StringFilter           `json:"accountId,omitempty"`
	IsGithubConnected     *BoolFilter             `json:"isGithubConnected,omitempty"`
	IsCloudProfileCreated *BoolFilter             `json:"isCloudProfileCreated,omitempty"`
	IsCliInstalled        *BoolFilter             `json:"isCliInstalled,omitempty"`
	IsProjectCreated      *BoolFilter             `json:"isProjectCreated,omitempty"`
	Account               *AccountRelationFilter  `json:"account,omitempty"`
}

type PersonalAccessToken struct {
	ID        string    `json:"id"`
	UserID    string    `json:"userId"`
	Name      string    `json:"name"`
	IsExpired bool      `json:"isExpired"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type PersonalAccessTokenListRelationFilter struct {
	Every *PersonalAccessTokenWhereInput `json:"every,omitempty"`
	Some  *PersonalAccessTokenWhereInput `json:"some,omitempty"`
	None  *PersonalAccessTokenWhereInput `json:"none,omitempty"`
}

type PersonalAccessTokenOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type PersonalAccessTokenOrderByWithRelationInput struct {
	ID        *SortOrder                    `json:"id,omitempty"`
	UserID    *SortOrder                    `json:"userId,omitempty"`
	Name      *SortOrder                    `json:"name,omitempty"`
	IsExpired *SortOrder                    `json:"isExpired,omitempty"`
	CreatedAt *SortOrder                    `json:"createdAt,omitempty"`
	UpdatedAt *SortOrder                    `json:"updatedAt,omitempty"`
	User      *UserOrderByWithRelationInput `json:"user,omitempty"`
}

type PersonalAccessTokenWhereInput struct {
	And       []*PersonalAccessTokenWhereInput `json:"AND,omitempty"`
	Or        []*PersonalAccessTokenWhereInput `json:"OR,omitempty"`
	Not       []*PersonalAccessTokenWhereInput `json:"NOT,omitempty"`
	ID        *StringFilter                    `json:"id,omitempty"`
	UserID    *StringFilter                    `json:"userId,omitempty"`
	Name      *StringFilter                    `json:"name,omitempty"`
	IsExpired *BoolFilter                      `json:"isExpired,omitempty"`
	CreatedAt *DateTimeFilter                  `json:"createdAt,omitempty"`
	UpdatedAt *DateTimeFilter                  `json:"updatedAt,omitempty"`
	User      *UserRelationFilter              `json:"user,omitempty"`
}

type PersonalAccessTokenWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type Project struct {
	ID                  string               `json:"id"`
	Name                string               `json:"name"`
	Status              ProjectStatus        `json:"status"`
	AccountID           string               `json:"accountId"`
	CloudProfileID      *string              `json:"cloudProfileId"`
	GithubRepositoryID  *int64               `json:"githubRepositoryId"`
	CreatedAt           time.Time            `json:"createdAt"`
	UpdatedAt           time.Time            `json:"updatedAt"`
	Count               *ProjectCount        `json:"_count"`
	Account             Account              `json:"account"`
	CloudProfile        *CloudProfile        `json:"cloudProfile"`
	DataStorages        []*DataStorage       `json:"dataStorages"`
	Trainings           []*Training          `json:"trainings"`
	Experiments         []*Experiment        `json:"experiments"`
	Applications        []*Application       `json:"applications"`
	RayClusters         []*RayCluster        `json:"rayClusters"`
	ContainerRegistries []*ContainerRegistry `json:"containerRegistries"`
	ArtifactsStorage    *DataStorage         `json:"artifactsStorage"`
	GithubRepository    *GithubRepository    `json:"githubRepository"`
}

type ProjectAvgAggregate struct {
	GithubRepositoryID *float64 `json:"githubRepositoryId"`
}

type ProjectCount struct {
	DataStorages        int64 `json:"dataStorages"`
	Trainings           int64 `json:"trainings"`
	Experiments         int64 `json:"experiments"`
	Applications        int64 `json:"applications"`
	RayClusters         int64 `json:"rayClusters"`
	ContainerRegistries int64 `json:"containerRegistries"`
}

type ProjectCountAggregate struct {
	ID                 int64 `json:"id"`
	Name               int64 `json:"name"`
	Status             int64 `json:"status"`
	AccountID          int64 `json:"accountId"`
	CloudProfileID     int64 `json:"cloudProfileId"`
	GithubRepositoryID int64 `json:"githubRepositoryId"`
	CreatedAt          int64 `json:"createdAt"`
	UpdatedAt          int64 `json:"updatedAt"`
	All                int64 `json:"_all"`
}

type ProjectListRelationFilter struct {
	Every *ProjectWhereInput `json:"every,omitempty"`
	Some  *ProjectWhereInput `json:"some,omitempty"`
	None  *ProjectWhereInput `json:"none,omitempty"`
}

type ProjectMaxAggregate struct {
	ID                 *string        `json:"id"`
	Name               *string        `json:"name"`
	Status             *ProjectStatus `json:"status"`
	AccountID          *string        `json:"accountId"`
	CloudProfileID     *string        `json:"cloudProfileId"`
	GithubRepositoryID *int64         `json:"githubRepositoryId"`
	CreatedAt          *time.Time     `json:"createdAt"`
	UpdatedAt          *time.Time     `json:"updatedAt"`
}

type ProjectMinAggregate struct {
	ID                 *string        `json:"id"`
	Name               *string        `json:"name"`
	Status             *ProjectStatus `json:"status"`
	AccountID          *string        `json:"accountId"`
	CloudProfileID     *string        `json:"cloudProfileId"`
	GithubRepositoryID *int64         `json:"githubRepositoryId"`
	CreatedAt          *time.Time     `json:"createdAt"`
	UpdatedAt          *time.Time     `json:"updatedAt"`
}

type ProjectOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type ProjectOrderByWithRelationInput struct {
	ID                  *SortOrder                                      `json:"id,omitempty"`
	Name                *SortOrder                                      `json:"name,omitempty"`
	Status              *SortOrder                                      `json:"status,omitempty"`
	AccountID           *SortOrder                                      `json:"accountId,omitempty"`
	CloudProfileID      *SortOrder                                      `json:"cloudProfileId,omitempty"`
	GithubRepositoryID  *SortOrder                                      `json:"githubRepositoryId,omitempty"`
	CreatedAt           *SortOrder                                      `json:"createdAt,omitempty"`
	UpdatedAt           *SortOrder                                      `json:"updatedAt,omitempty"`
	Account             *AccountOrderByWithRelationInput                `json:"account,omitempty"`
	CloudProfile        *CloudProfileOrderByWithRelationInput           `json:"cloudProfile,omitempty"`
	DataStorages        *DataStorageOrderByRelationAggregateInput       `json:"dataStorages,omitempty"`
	Trainings           *TrainingOrderByRelationAggregateInput          `json:"trainings,omitempty"`
	Experiments         *ExperimentOrderByRelationAggregateInput        `json:"experiments,omitempty"`
	Applications        *ApplicationOrderByRelationAggregateInput       `json:"applications,omitempty"`
	RayClusters         *RayClusterOrderByRelationAggregateInput        `json:"rayClusters,omitempty"`
	ContainerRegistries *ContainerRegistryOrderByRelationAggregateInput `json:"containerRegistries,omitempty"`
	ArtifactsStorage    *DataStorageOrderByWithRelationInput            `json:"artifactsStorage,omitempty"`
}

type ProjectRelationFilter struct {
	Is    *ProjectWhereInput `json:"is,omitempty"`
	IsNot *ProjectWhereInput `json:"isNot,omitempty"`
}

type ProjectRepositoryInput struct {
	GithubRepositoryID *int64 `json:"githubRepositoryId,omitempty"`
}

type ProjectSumAggregate struct {
	GithubRepositoryID *int64 `json:"githubRepositoryId"`
}

type ProjectWhereInput struct {
	And                 []*ProjectWhereInput                 `json:"AND,omitempty"`
	Or                  []*ProjectWhereInput                 `json:"OR,omitempty"`
	Not                 []*ProjectWhereInput                 `json:"NOT,omitempty"`
	ID                  *StringFilter                        `json:"id,omitempty"`
	Name                *StringFilter                        `json:"name,omitempty"`
	Status              *EnumProjectStatusFilter             `json:"status,omitempty"`
	AccountID           *StringFilter                        `json:"accountId,omitempty"`
	CloudProfileID      *StringNullableFilter                `json:"cloudProfileId,omitempty"`
	GithubRepositoryID  *IntNullableFilter                   `json:"githubRepositoryId,omitempty"`
	CreatedAt           *DateTimeFilter                      `json:"createdAt,omitempty"`
	UpdatedAt           *DateTimeFilter                      `json:"updatedAt,omitempty"`
	Account             *AccountRelationFilter               `json:"account,omitempty"`
	CloudProfile        *CloudProfileRelationFilter          `json:"cloudProfile,omitempty"`
	DataStorages        *DataStorageListRelationFilter       `json:"dataStorages,omitempty"`
	Trainings           *TrainingListRelationFilter          `json:"trainings,omitempty"`
	Experiments         *ExperimentListRelationFilter        `json:"experiments,omitempty"`
	Applications        *ApplicationListRelationFilter       `json:"applications,omitempty"`
	RayClusters         *RayClusterListRelationFilter        `json:"rayClusters,omitempty"`
	ContainerRegistries *ContainerRegistryListRelationFilter `json:"containerRegistries,omitempty"`
	ArtifactsStorage    *DataStorageRelationFilter           `json:"artifactsStorage,omitempty"`
}

type ProjectWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type ProjectWhereUniqueNameInput struct {
	Name    string                  `json:"name"`
	Account AccountWhereUniqueInput `json:"account"`
}

type RayCluster struct {
	ID                  string             `json:"id"`
	Name                string             `json:"name"`
	AccountID           string             `json:"accountId"`
	KubernetesProfileID *string            `json:"kubernetesProfileId"`
	ConfigID            *string            `json:"configId"`
	ProjectID           *string            `json:"projectId"`
	Status              RayClusterStatus   `json:"status"`
	CreatedAt           time.Time          `json:"createdAt"`
	UpdatedAt           time.Time          `json:"updatedAt"`
	Count               *RayClusterCount   `json:"_count"`
	Account             Account            `json:"account"`
	KubernetesProfile   *KubernetesProfile `json:"kubernetesProfile"`
	Config              *RayClusterConfig  `json:"config"`
	Project             *Project           `json:"project"`
	TaskActions         []*TaskAction      `json:"taskActions"`
}

type RayClusterConfig struct {
	ID      string `json:"id"`
	Version string `json:"version"`
}

type RayClusterConfigOrderByWithRelationInput struct {
	ID         *SortOrder                          `json:"id,omitempty"`
	Version    *SortOrder                          `json:"version,omitempty"`
	RayCluster *RayClusterOrderByWithRelationInput `json:"rayCluster,omitempty"`
}

type RayClusterConfigRelationFilter struct {
	Is    *RayClusterConfigWhereInput `json:"is,omitempty"`
	IsNot *RayClusterConfigWhereInput `json:"isNot,omitempty"`
}

type RayClusterConfigWhereInput struct {
	And        []*RayClusterConfigWhereInput `json:"AND,omitempty"`
	Or         []*RayClusterConfigWhereInput `json:"OR,omitempty"`
	Not        []*RayClusterConfigWhereInput `json:"NOT,omitempty"`
	ID         *StringFilter                 `json:"id,omitempty"`
	Version    *StringFilter                 `json:"version,omitempty"`
	RayCluster *RayClusterRelationFilter     `json:"rayCluster,omitempty"`
}

type RayClusterConfigWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type RayClusterCount struct {
	TaskActions int64 `json:"taskActions"`
}

type RayClusterListRelationFilter struct {
	Every *RayClusterWhereInput `json:"every,omitempty"`
	Some  *RayClusterWhereInput `json:"some,omitempty"`
	None  *RayClusterWhereInput `json:"none,omitempty"`
}

type RayClusterOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type RayClusterOrderByWithRelationInput struct {
	ID                  *SortOrder                                 `json:"id,omitempty"`
	Name                *SortOrder                                 `json:"name,omitempty"`
	AccountID           *SortOrder                                 `json:"accountId,omitempty"`
	KubernetesProfileID *SortOrder                                 `json:"kubernetesProfileId,omitempty"`
	ConfigID            *SortOrder                                 `json:"configId,omitempty"`
	ProjectID           *SortOrder                                 `json:"projectId,omitempty"`
	Status              *SortOrder                                 `json:"status,omitempty"`
	CreatedAt           *SortOrder                                 `json:"createdAt,omitempty"`
	UpdatedAt           *SortOrder                                 `json:"updatedAt,omitempty"`
	Account             *AccountOrderByWithRelationInput           `json:"account,omitempty"`
	KubernetesProfile   *KubernetesProfileOrderByWithRelationInput `json:"kubernetesProfile,omitempty"`
	Config              *RayClusterConfigOrderByWithRelationInput  `json:"config,omitempty"`
	Project             *ProjectOrderByWithRelationInput           `json:"project,omitempty"`
	TaskActions         *TaskActionOrderByRelationAggregateInput   `json:"taskActions,omitempty"`
}

type RayClusterRelationFilter struct {
	Is    *RayClusterWhereInput `json:"is,omitempty"`
	IsNot *RayClusterWhereInput `json:"isNot,omitempty"`
}

type RayClusterWhereInput struct {
	And                 []*RayClusterWhereInput          `json:"AND,omitempty"`
	Or                  []*RayClusterWhereInput          `json:"OR,omitempty"`
	Not                 []*RayClusterWhereInput          `json:"NOT,omitempty"`
	ID                  *StringFilter                    `json:"id,omitempty"`
	Name                *StringFilter                    `json:"name,omitempty"`
	AccountID           *StringFilter                    `json:"accountId,omitempty"`
	KubernetesProfileID *StringNullableFilter            `json:"kubernetesProfileId,omitempty"`
	ConfigID            *StringNullableFilter            `json:"configId,omitempty"`
	ProjectID           *StringNullableFilter            `json:"projectId,omitempty"`
	Status              *EnumRayClusterStatusFilter      `json:"status,omitempty"`
	CreatedAt           *DateTimeFilter                  `json:"createdAt,omitempty"`
	UpdatedAt           *DateTimeFilter                  `json:"updatedAt,omitempty"`
	Account             *AccountRelationFilter           `json:"account,omitempty"`
	KubernetesProfile   *KubernetesProfileRelationFilter `json:"kubernetesProfile,omitempty"`
	Config              *RayClusterConfigRelationFilter  `json:"config,omitempty"`
	Project             *ProjectRelationFilter           `json:"project,omitempty"`
	TaskActions         *TaskActionListRelationFilter    `json:"taskActions,omitempty"`
}

type RayClusterWhereUniqueInput struct {
	ID       *string `json:"id,omitempty"`
	ConfigID *string `json:"configId,omitempty"`
}

type ResourceAccessToken struct {
	ID              string    `json:"id"`
	ExperimentID    *string   `json:"experimentId"`
	ExperimentRunID *string   `json:"experimentRunId"`
	CreatedAt       time.Time `json:"createdAt"`
	Token           string    `json:"token"`
}

type ResourceAccessTokenOptions struct {
	// A string representing a timespan, e.g. 2 hours, 60 days, 1 year
	ExpiresIn *string `json:"expiresIn,omitempty"`
}

type ResourceAccessTokenOrderByWithRelationInput struct {
	ID              *SortOrder                             `json:"id,omitempty"`
	ExperimentID    *SortOrder                             `json:"experimentId,omitempty"`
	ExperimentRunID *SortOrder                             `json:"experimentRunId,omitempty"`
	CreatedAt       *SortOrder                             `json:"createdAt,omitempty"`
	Experiment      *ExperimentOrderByWithRelationInput    `json:"experiment,omitempty"`
	ExperimentRun   *ExperimentRunOrderByWithRelationInput `json:"experimentRun,omitempty"`
}

type ResourceAccessTokenRelationFilter struct {
	Is    *ResourceAccessTokenWhereInput `json:"is,omitempty"`
	IsNot *ResourceAccessTokenWhereInput `json:"isNot,omitempty"`
}

type ResourceAccessTokenWhereInput struct {
	And             []*ResourceAccessTokenWhereInput `json:"AND,omitempty"`
	Or              []*ResourceAccessTokenWhereInput `json:"OR,omitempty"`
	Not             []*ResourceAccessTokenWhereInput `json:"NOT,omitempty"`
	ID              *StringFilter                    `json:"id,omitempty"`
	ExperimentID    *StringNullableFilter            `json:"experimentId,omitempty"`
	ExperimentRunID *StringNullableFilter            `json:"experimentRunId,omitempty"`
	CreatedAt       *DateTimeFilter                  `json:"createdAt,omitempty"`
	Experiment      *ExperimentRelationFilter        `json:"experiment,omitempty"`
	ExperimentRun   *ExperimentRunRelationFilter     `json:"experimentRun,omitempty"`
}

type ResourceAccessTokenWhereUniqueInput struct {
	ID              *string `json:"id,omitempty"`
	ExperimentID    *string `json:"experimentId,omitempty"`
	ExperimentRunID *string `json:"experimentRunId,omitempty"`
}

type StringFilter struct {
	Equals     *string             `json:"equals,omitempty"`
	In         []string            `json:"in,omitempty"`
	NotIn      []string            `json:"notIn,omitempty"`
	Lt         *string             `json:"lt,omitempty"`
	Lte        *string             `json:"lte,omitempty"`
	Gt         *string             `json:"gt,omitempty"`
	Gte        *string             `json:"gte,omitempty"`
	Contains   *string             `json:"contains,omitempty"`
	StartsWith *string             `json:"startsWith,omitempty"`
	EndsWith   *string             `json:"endsWith,omitempty"`
	Mode       *QueryMode          `json:"mode,omitempty"`
	Not        *NestedStringFilter `json:"not,omitempty"`
}

type StringNullableFilter struct {
	Equals     *string                     `json:"equals,omitempty"`
	In         []string                    `json:"in,omitempty"`
	NotIn      []string                    `json:"notIn,omitempty"`
	Lt         *string                     `json:"lt,omitempty"`
	Lte        *string                     `json:"lte,omitempty"`
	Gt         *string                     `json:"gt,omitempty"`
	Gte        *string                     `json:"gte,omitempty"`
	Contains   *string                     `json:"contains,omitempty"`
	StartsWith *string                     `json:"startsWith,omitempty"`
	EndsWith   *string                     `json:"endsWith,omitempty"`
	Mode       *QueryMode                  `json:"mode,omitempty"`
	Not        *NestedStringNullableFilter `json:"not,omitempty"`
}

type StripeCard struct {
	Brand string `json:"brand"`
	Last4 string `json:"last4"`
}

type StripeCustomer struct {
	Email           *string          `json:"email"`
	CustomerAddress *CustomerAddress `json:"customerAddress"`
	BillingAddress  *CustomerAddress `json:"billingAddress"`
	Card            *StripeCard      `json:"card"`
	Metadata        StripeMetadata   `json:"metadata"`
}

type StripeMetadata struct {
	IsFilledIn bool `json:"isFilledIn"`
}

type Subscription struct {
	OnExperimentChange    Experiment    `json:"onExperimentChange"`
	OnExperimentRunChange ExperimentRun `json:"onExperimentRunChange"`
	OnProjectChange       Project       `json:"onProjectChange"`
	OnVPCChange           Vpc           `json:"onVPCChange"`
	OnApplicationChange   Application   `json:"onApplicationChange"`
	OnTrainingChange      Training      `json:"onTrainingChange"`
	OnDataStorageChange   DataStorage   `json:"onDataStorageChange"`
	OnRayClusterChange    RayCluster    `json:"onRayClusterChange"`
}

type TaskAction struct {
	ID                    string               `json:"id"`
	VpcID                 *string              `json:"vpcId"`
	ApplicationID         *string              `json:"applicationId"`
	TrainingID            *string              `json:"trainingId"`
	TrainingAnsibleTaskID *string              `json:"trainingAnsibleTaskId"`
	DataStorageID         *string              `json:"dataStorageId"`
	ExperimentID          *string              `json:"experimentId"`
	ExperimentRunID       *string              `json:"experimentRunId"`
	RayClusterID          *string              `json:"rayClusterId"`
	UserID                string               `json:"userId"`
	Type                  TaskActionType       `json:"type"`
	State                 TaskActionState      `json:"state"`
	CreatedAt             time.Time            `json:"createdAt"`
	Count                 *TaskActionCount     `json:"_count"`
	Vpc                   *Vpc                 `json:"vpc"`
	Application           *Application         `json:"application"`
	Training              *Training            `json:"training"`
	TrainingAnsibleTask   *TrainingAnsibleTask `json:"trainingAnsibleTask"`
	DataStorage           *DataStorage         `json:"dataStorage"`
	Experiment            *Experiment          `json:"experiment"`
	ExperimentRun         *ExperimentRun       `json:"experimentRun"`
	RayCluster            *RayCluster          `json:"rayCluster"`
	User                  User                 `json:"user"`
	Steps                 []*TaskStep          `json:"steps"`
	Predecessors          []*TaskAction        `json:"predecessors"`
	Successors            []*TaskAction        `json:"successors"`
	BillableUsage         *BillableUsage       `json:"billableUsage"`
}

type TaskActionCount struct {
	Steps        int64 `json:"steps"`
	Predecessors int64 `json:"predecessors"`
	Successors   int64 `json:"successors"`
}

type TaskActionListRelationFilter struct {
	Every *TaskActionWhereInput `json:"every,omitempty"`
	Some  *TaskActionWhereInput `json:"some,omitempty"`
	None  *TaskActionWhereInput `json:"none,omitempty"`
}

type TaskActionOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type TaskActionOrderByWithRelationInput struct {
	ID                    *SortOrder                                   `json:"id,omitempty"`
	VpcID                 *SortOrder                                   `json:"vpcId,omitempty"`
	ApplicationID         *SortOrder                                   `json:"applicationId,omitempty"`
	TrainingID            *SortOrder                                   `json:"trainingId,omitempty"`
	TrainingAnsibleTaskID *SortOrder                                   `json:"trainingAnsibleTaskId,omitempty"`
	DataStorageID         *SortOrder                                   `json:"dataStorageId,omitempty"`
	ExperimentID          *SortOrder                                   `json:"experimentId,omitempty"`
	ExperimentRunID       *SortOrder                                   `json:"experimentRunId,omitempty"`
	RayClusterID          *SortOrder                                   `json:"rayClusterId,omitempty"`
	UserID                *SortOrder                                   `json:"userId,omitempty"`
	Type                  *SortOrder                                   `json:"type,omitempty"`
	State                 *SortOrder                                   `json:"state,omitempty"`
	CreatedAt             *SortOrder                                   `json:"createdAt,omitempty"`
	Vpc                   *VPCOrderByWithRelationInput                 `json:"vpc,omitempty"`
	Application           *ApplicationOrderByWithRelationInput         `json:"application,omitempty"`
	Training              *TrainingOrderByWithRelationInput            `json:"training,omitempty"`
	TrainingAnsibleTask   *TrainingAnsibleTaskOrderByWithRelationInput `json:"trainingAnsibleTask,omitempty"`
	DataStorage           *DataStorageOrderByWithRelationInput         `json:"dataStorage,omitempty"`
	Experiment            *ExperimentOrderByWithRelationInput          `json:"experiment,omitempty"`
	ExperimentRun         *ExperimentRunOrderByWithRelationInput       `json:"experimentRun,omitempty"`
	RayCluster            *RayClusterOrderByWithRelationInput          `json:"rayCluster,omitempty"`
	User                  *UserOrderByWithRelationInput                `json:"user,omitempty"`
	Steps                 *TaskStepOrderByRelationAggregateInput       `json:"steps,omitempty"`
	Predecessors          *TaskActionOrderByRelationAggregateInput     `json:"predecessors,omitempty"`
	Successors            *TaskActionOrderByRelationAggregateInput     `json:"successors,omitempty"`
	BillableUsage         *BillableUsageOrderByWithRelationInput       `json:"billableUsage,omitempty"`
}

type TaskActionRelationFilter struct {
	Is    *TaskActionWhereInput `json:"is,omitempty"`
	IsNot *TaskActionWhereInput `json:"isNot,omitempty"`
}

type TaskActionWhereInput struct {
	And                   []*TaskActionWhereInput            `json:"AND,omitempty"`
	Or                    []*TaskActionWhereInput            `json:"OR,omitempty"`
	Not                   []*TaskActionWhereInput            `json:"NOT,omitempty"`
	ID                    *StringFilter                      `json:"id,omitempty"`
	VpcID                 *StringNullableFilter              `json:"vpcId,omitempty"`
	ApplicationID         *StringNullableFilter              `json:"applicationId,omitempty"`
	TrainingID            *StringNullableFilter              `json:"trainingId,omitempty"`
	TrainingAnsibleTaskID *StringNullableFilter              `json:"trainingAnsibleTaskId,omitempty"`
	DataStorageID         *StringNullableFilter              `json:"dataStorageId,omitempty"`
	ExperimentID          *StringNullableFilter              `json:"experimentId,omitempty"`
	ExperimentRunID       *StringNullableFilter              `json:"experimentRunId,omitempty"`
	RayClusterID          *StringNullableFilter              `json:"rayClusterId,omitempty"`
	UserID                *StringFilter                      `json:"userId,omitempty"`
	Type                  *EnumTaskActionTypeFilter          `json:"type,omitempty"`
	State                 *EnumTaskActionStateFilter         `json:"state,omitempty"`
	CreatedAt             *DateTimeFilter                    `json:"createdAt,omitempty"`
	Vpc                   *VPCRelationFilter                 `json:"vpc,omitempty"`
	Application           *ApplicationRelationFilter         `json:"application,omitempty"`
	Training              *TrainingRelationFilter            `json:"training,omitempty"`
	TrainingAnsibleTask   *TrainingAnsibleTaskRelationFilter `json:"trainingAnsibleTask,omitempty"`
	DataStorage           *DataStorageRelationFilter         `json:"dataStorage,omitempty"`
	Experiment            *ExperimentRelationFilter          `json:"experiment,omitempty"`
	ExperimentRun         *ExperimentRunRelationFilter       `json:"experimentRun,omitempty"`
	RayCluster            *RayClusterRelationFilter          `json:"rayCluster,omitempty"`
	User                  *UserRelationFilter                `json:"user,omitempty"`
	Steps                 *TaskStepListRelationFilter        `json:"steps,omitempty"`
	Predecessors          *TaskActionListRelationFilter      `json:"predecessors,omitempty"`
	Successors            *TaskActionListRelationFilter      `json:"successors,omitempty"`
	BillableUsage         *BillableUsageRelationFilter       `json:"billableUsage,omitempty"`
}

type TaskActionWhereUniqueInput struct {
	ID                    *string `json:"id,omitempty"`
	TrainingAnsibleTaskID *string `json:"trainingAnsibleTaskId,omitempty"`
}

type TaskStep struct {
	ID           string        `json:"id"`
	TaskActionID string        `json:"taskActionId"`
	StepNumber   int64         `json:"stepNumber"`
	State        TaskStepState `json:"state"`
	UpdatedAt    time.Time     `json:"updatedAt"`
	TaskAction   TaskAction    `json:"taskAction"`
}

type TaskStepListRelationFilter struct {
	Every *TaskStepWhereInput `json:"every,omitempty"`
	Some  *TaskStepWhereInput `json:"some,omitempty"`
	None  *TaskStepWhereInput `json:"none,omitempty"`
}

type TaskStepOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type TaskStepOrderByWithRelationInput struct {
	ID           *SortOrder                          `json:"id,omitempty"`
	TaskActionID *SortOrder                          `json:"taskActionId,omitempty"`
	StepNumber   *SortOrder                          `json:"stepNumber,omitempty"`
	State        *SortOrder                          `json:"state,omitempty"`
	UpdatedAt    *SortOrder                          `json:"updatedAt,omitempty"`
	TaskAction   *TaskActionOrderByWithRelationInput `json:"taskAction,omitempty"`
}

type TaskStepWhereInput struct {
	And          []*TaskStepWhereInput     `json:"AND,omitempty"`
	Or           []*TaskStepWhereInput     `json:"OR,omitempty"`
	Not          []*TaskStepWhereInput     `json:"NOT,omitempty"`
	ID           *StringFilter             `json:"id,omitempty"`
	TaskActionID *StringFilter             `json:"taskActionId,omitempty"`
	StepNumber   *IntFilter                `json:"stepNumber,omitempty"`
	State        *EnumTaskStepStateFilter  `json:"state,omitempty"`
	UpdatedAt    *DateTimeFilter           `json:"updatedAt,omitempty"`
	TaskAction   *TaskActionRelationFilter `json:"taskAction,omitempty"`
}

type TaskStepWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type Team struct {
	ID          string                  `json:"id"`
	AccountID   string                  `json:"accountId"`
	DisplayName string                  `json:"displayName"`
	Count       *TeamCount              `json:"_count"`
	Account     Account                 `json:"account"`
	Members     []*TeamMember           `json:"members"`
	Invitations []*TeamMemberInvitation `json:"invitations"`
}

type TeamCount struct {
	Members     int64 `json:"members"`
	Invitations int64 `json:"invitations"`
}

type TeamMember struct {
	User User       `json:"user"`
	Role RoleInTeam `json:"role"`
}

type TeamMemberInvitation struct {
	ID        string                     `json:"id"`
	TeamID    string                     `json:"teamId"`
	UserID    *string                    `json:"userId"`
	UserEmail *string                    `json:"userEmail"`
	Role      RoleInTeam                 `json:"role"`
	Status    TeamMemberInvitationStatus `json:"status"`
	ExpiresAt time.Time                  `json:"expiresAt"`
	CreatedAt time.Time                  `json:"createdAt"`
	Team      Team                       `json:"team"`
	User      *User                      `json:"user"`
}

type TeamMemberInvitationListRelationFilter struct {
	Every *TeamMemberInvitationWhereInput `json:"every,omitempty"`
	Some  *TeamMemberInvitationWhereInput `json:"some,omitempty"`
	None  *TeamMemberInvitationWhereInput `json:"none,omitempty"`
}

type TeamMemberInvitationOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type TeamMemberInvitationOrderByWithRelationInput struct {
	ID        *SortOrder                    `json:"id,omitempty"`
	TeamID    *SortOrder                    `json:"teamId,omitempty"`
	UserID    *SortOrder                    `json:"userId,omitempty"`
	UserEmail *SortOrder                    `json:"userEmail,omitempty"`
	Role      *SortOrder                    `json:"role,omitempty"`
	Status    *SortOrder                    `json:"status,omitempty"`
	ExpiresAt *SortOrder                    `json:"expiresAt,omitempty"`
	CreatedAt *SortOrder                    `json:"createdAt,omitempty"`
	Team      *TeamOrderByWithRelationInput `json:"team,omitempty"`
	User      *UserOrderByWithRelationInput `json:"user,omitempty"`
}

type TeamMemberInvitationWhereInput struct {
	And       []*TeamMemberInvitationWhereInput     `json:"AND,omitempty"`
	Or        []*TeamMemberInvitationWhereInput     `json:"OR,omitempty"`
	Not       []*TeamMemberInvitationWhereInput     `json:"NOT,omitempty"`
	ID        *StringFilter                         `json:"id,omitempty"`
	TeamID    *StringFilter                         `json:"teamId,omitempty"`
	UserID    *StringNullableFilter                 `json:"userId,omitempty"`
	UserEmail *StringNullableFilter                 `json:"userEmail,omitempty"`
	Role      *EnumRoleInTeamFilter                 `json:"role,omitempty"`
	Status    *EnumTeamMemberInvitationStatusFilter `json:"status,omitempty"`
	ExpiresAt *DateTimeFilter                       `json:"expiresAt,omitempty"`
	CreatedAt *DateTimeFilter                       `json:"createdAt,omitempty"`
	Team      *TeamRelationFilter                   `json:"team,omitempty"`
	User      *UserRelationFilter                   `json:"user,omitempty"`
}

type TeamMemberInvitationWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type TeamOrderByWithRelationInput struct {
	ID          *SortOrder                                         `json:"id,omitempty"`
	AccountID   *SortOrder                                         `json:"accountId,omitempty"`
	DisplayName *SortOrder                                         `json:"displayName,omitempty"`
	Account     *AccountOrderByWithRelationInput                   `json:"account,omitempty"`
	Members     *TeamsOnUsersOrderByRelationAggregateInput         `json:"members,omitempty"`
	Invitations *TeamMemberInvitationOrderByRelationAggregateInput `json:"invitations,omitempty"`
}

type TeamRelationFilter struct {
	Is    *TeamWhereInput `json:"is,omitempty"`
	IsNot *TeamWhereInput `json:"isNot,omitempty"`
}

type TeamWhereInput struct {
	And         []*TeamWhereInput                       `json:"AND,omitempty"`
	Or          []*TeamWhereInput                       `json:"OR,omitempty"`
	Not         []*TeamWhereInput                       `json:"NOT,omitempty"`
	ID          *StringFilter                           `json:"id,omitempty"`
	AccountID   *StringFilter                           `json:"accountId,omitempty"`
	DisplayName *StringFilter                           `json:"displayName,omitempty"`
	Account     *AccountRelationFilter                  `json:"account,omitempty"`
	Members     *TeamsOnUsersListRelationFilter         `json:"members,omitempty"`
	Invitations *TeamMemberInvitationListRelationFilter `json:"invitations,omitempty"`
}

type TeamsOnUsersListRelationFilter struct {
	Every *TeamsOnUsersWhereInput `json:"every,omitempty"`
	Some  *TeamsOnUsersWhereInput `json:"some,omitempty"`
	None  *TeamsOnUsersWhereInput `json:"none,omitempty"`
}

type TeamsOnUsersOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type TeamsOnUsersWhereInput struct {
	And    []*TeamsOnUsersWhereInput `json:"AND,omitempty"`
	Or     []*TeamsOnUsersWhereInput `json:"OR,omitempty"`
	Not    []*TeamsOnUsersWhereInput `json:"NOT,omitempty"`
	UserID *StringFilter             `json:"userId,omitempty"`
	TeamID *StringFilter             `json:"teamId,omitempty"`
	Role   *EnumRoleInTeamFilter     `json:"role,omitempty"`
	User   *UserRelationFilter       `json:"user,omitempty"`
	Team   *TeamRelationFilter       `json:"team,omitempty"`
}

type Training struct {
	ID                          string                     `json:"id"`
	Name                        string                     `json:"name"`
	AccountID                   string                     `json:"accountId"`
	CloudProfileID              *string                    `json:"cloudProfileId"`
	CloudProviderFalconConfigID *string                    `json:"cloudProviderFalconConfigId"`
	FalconMLConfigID            *string                    `json:"falconMLConfigId"`
	ProjectID                   *string                    `json:"projectId"`
	Status                      TrainingStatus             `json:"status"`
	State                       TrainingRunningState       `json:"state"`
	MountStatus                 TrainingMountStatus        `json:"mountStatus"`
	CreatedAt                   time.Time                  `json:"createdAt"`
	UpdatedAt                   time.Time                  `json:"updatedAt"`
	Count                       *TrainingCount             `json:"_count"`
	Account                     Account                    `json:"account"`
	CloudProfile                *CloudProfile              `json:"cloudProfile"`
	CloudProviderFalconConfig   *CloudProviderFalconConfig `json:"cloudProviderFalconConfig"`
	FalconMLConfig              *FalconMLConfig            `json:"falconMLConfig"`
	DataStorages                []*DataStorage             `json:"dataStorages"`
	Experiments                 []*Experiment              `json:"experiments"`
	AnsibleTasks                []*TrainingAnsibleTask     `json:"ansibleTasks"`
	DeploymentAnsibleTask       *TrainingAnsibleTask       `json:"deploymentAnsibleTask"`
	Project                     *Project                   `json:"project"`
	VpcAttachment               *VPCAttachment             `json:"vpcAttachment"`
	TaskActions                 []*TaskAction              `json:"taskActions"`
	ResourceBillableUsage       *BillableUsage             `json:"resourceBillableUsage"`
	TLSPresignedURL             *string                    `json:"tlsPresignedUrl"`
	VMPublicIps                 []string                   `json:"vmPublicIps"`
	VMSSHUsername               *string                    `json:"vmSSHUsername"`
	VMIds                       []string                   `json:"vmIds"`
}

type TrainingAnsibleTask struct {
	ID                   string                  `json:"id"`
	Type                 TrainingAnsibleTaskType `json:"type"`
	TrainingID           string                  `json:"trainingId"`
	DeploymentTrainingID *string                 `json:"deploymentTrainingId"`
	CreatedAt            time.Time               `json:"createdAt"`
}

type TrainingAnsibleTaskListRelationFilter struct {
	Every *TrainingAnsibleTaskWhereInput `json:"every,omitempty"`
	Some  *TrainingAnsibleTaskWhereInput `json:"some,omitempty"`
	None  *TrainingAnsibleTaskWhereInput `json:"none,omitempty"`
}

type TrainingAnsibleTaskOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type TrainingAnsibleTaskOrderByWithRelationInput struct {
	ID                   *SortOrder                          `json:"id,omitempty"`
	Type                 *SortOrder                          `json:"type,omitempty"`
	TrainingID           *SortOrder                          `json:"trainingId,omitempty"`
	DeploymentTrainingID *SortOrder                          `json:"deploymentTrainingId,omitempty"`
	CreatedAt            *SortOrder                          `json:"createdAt,omitempty"`
	Training             *TrainingOrderByWithRelationInput   `json:"training,omitempty"`
	DeploymentTraining   *TrainingOrderByWithRelationInput   `json:"deploymentTraining,omitempty"`
	TaskAction           *TaskActionOrderByWithRelationInput `json:"taskAction,omitempty"`
}

type TrainingAnsibleTaskRelationFilter struct {
	Is    *TrainingAnsibleTaskWhereInput `json:"is,omitempty"`
	IsNot *TrainingAnsibleTaskWhereInput `json:"isNot,omitempty"`
}

type TrainingAnsibleTaskWhereInput struct {
	And                  []*TrainingAnsibleTaskWhereInput   `json:"AND,omitempty"`
	Or                   []*TrainingAnsibleTaskWhereInput   `json:"OR,omitempty"`
	Not                  []*TrainingAnsibleTaskWhereInput   `json:"NOT,omitempty"`
	ID                   *StringFilter                      `json:"id,omitempty"`
	Type                 *EnumTrainingAnsibleTaskTypeFilter `json:"type,omitempty"`
	TrainingID           *StringFilter                      `json:"trainingId,omitempty"`
	DeploymentTrainingID *StringNullableFilter              `json:"deploymentTrainingId,omitempty"`
	CreatedAt            *DateTimeFilter                    `json:"createdAt,omitempty"`
	Training             *TrainingRelationFilter            `json:"training,omitempty"`
	DeploymentTraining   *TrainingRelationFilter            `json:"deploymentTraining,omitempty"`
	TaskAction           *TaskActionRelationFilter          `json:"taskAction,omitempty"`
}

type TrainingAnsibleTaskWhereUniqueInput struct {
	ID                   *string `json:"id,omitempty"`
	DeploymentTrainingID *string `json:"deploymentTrainingId,omitempty"`
}

type TrainingCount struct {
	DataStorages int64 `json:"dataStorages"`
	Experiments  int64 `json:"experiments"`
	AnsibleTasks int64 `json:"ansibleTasks"`
	TaskActions  int64 `json:"taskActions"`
}

type TrainingInfrastructurePlan struct {
	Provider CloudProvider                    `json:"provider"`
	Plan     CloudProviderFalconConfigPlan    `json:"plan"`
	UsesGpu  bool                             `json:"usesGpu"`
	Config   TrainingInfrastructurePlanConfig `json:"config"`
}

type TrainingListRelationFilter struct {
	Every *TrainingWhereInput `json:"every,omitempty"`
	Some  *TrainingWhereInput `json:"some,omitempty"`
	None  *TrainingWhereInput `json:"none,omitempty"`
}

type TrainingOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type TrainingOrderByWithRelationInput struct {
	ID                          *SortOrder                                         `json:"id,omitempty"`
	Name                        *SortOrder                                         `json:"name,omitempty"`
	AccountID                   *SortOrder                                         `json:"accountId,omitempty"`
	CloudProfileID              *SortOrder                                         `json:"cloudProfileId,omitempty"`
	CloudProviderFalconConfigID *SortOrder                                         `json:"cloudProviderFalconConfigId,omitempty"`
	FalconMLConfigID            *SortOrder                                         `json:"falconMLConfigId,omitempty"`
	ProjectID                   *SortOrder                                         `json:"projectId,omitempty"`
	Status                      *SortOrder                                         `json:"status,omitempty"`
	State                       *SortOrder                                         `json:"state,omitempty"`
	MountStatus                 *SortOrder                                         `json:"mountStatus,omitempty"`
	CreatedAt                   *SortOrder                                         `json:"createdAt,omitempty"`
	UpdatedAt                   *SortOrder                                         `json:"updatedAt,omitempty"`
	Account                     *AccountOrderByWithRelationInput                   `json:"account,omitempty"`
	CloudProfile                *CloudProfileOrderByWithRelationInput              `json:"cloudProfile,omitempty"`
	CloudProviderFalconConfig   *CloudProviderFalconConfigOrderByWithRelationInput `json:"cloudProviderFalconConfig,omitempty"`
	FalconMLConfig              *FalconMLConfigOrderByWithRelationInput            `json:"falconMLConfig,omitempty"`
	DataStorages                *DataStorageOrderByRelationAggregateInput          `json:"dataStorages,omitempty"`
	Experiments                 *ExperimentOrderByRelationAggregateInput           `json:"experiments,omitempty"`
	AnsibleTasks                *TrainingAnsibleTaskOrderByRelationAggregateInput  `json:"ansibleTasks,omitempty"`
	DeploymentAnsibleTask       *TrainingAnsibleTaskOrderByWithRelationInput       `json:"deploymentAnsibleTask,omitempty"`
	Project                     *ProjectOrderByWithRelationInput                   `json:"project,omitempty"`
	VpcAttachment               *VPCAttachmentOrderByWithRelationInput             `json:"vpcAttachment,omitempty"`
	TaskActions                 *TaskActionOrderByRelationAggregateInput           `json:"taskActions,omitempty"`
	ResourceBillableUsage       *BillableUsageOrderByWithRelationInput             `json:"resourceBillableUsage,omitempty"`
}

type TrainingRelationFilter struct {
	Is    *TrainingWhereInput `json:"is,omitempty"`
	IsNot *TrainingWhereInput `json:"isNot,omitempty"`
}

type TrainingWhereInput struct {
	And                         []*TrainingWhereInput                    `json:"AND,omitempty"`
	Or                          []*TrainingWhereInput                    `json:"OR,omitempty"`
	Not                         []*TrainingWhereInput                    `json:"NOT,omitempty"`
	ID                          *StringFilter                            `json:"id,omitempty"`
	Name                        *StringFilter                            `json:"name,omitempty"`
	AccountID                   *StringFilter                            `json:"accountId,omitempty"`
	CloudProfileID              *StringNullableFilter                    `json:"cloudProfileId,omitempty"`
	CloudProviderFalconConfigID *StringNullableFilter                    `json:"cloudProviderFalconConfigId,omitempty"`
	FalconMLConfigID            *StringNullableFilter                    `json:"falconMLConfigId,omitempty"`
	ProjectID                   *StringNullableFilter                    `json:"projectId,omitempty"`
	Status                      *EnumTrainingStatusFilter                `json:"status,omitempty"`
	State                       *EnumTrainingRunningStateFilter          `json:"state,omitempty"`
	MountStatus                 *EnumTrainingMountStatusFilter           `json:"mountStatus,omitempty"`
	CreatedAt                   *DateTimeFilter                          `json:"createdAt,omitempty"`
	UpdatedAt                   *DateTimeFilter                          `json:"updatedAt,omitempty"`
	Account                     *AccountRelationFilter                   `json:"account,omitempty"`
	CloudProfile                *CloudProfileRelationFilter              `json:"cloudProfile,omitempty"`
	CloudProviderFalconConfig   *CloudProviderFalconConfigRelationFilter `json:"cloudProviderFalconConfig,omitempty"`
	FalconMLConfig              *FalconMLConfigRelationFilter            `json:"falconMLConfig,omitempty"`
	DataStorages                *DataStorageListRelationFilter           `json:"dataStorages,omitempty"`
	Experiments                 *ExperimentListRelationFilter            `json:"experiments,omitempty"`
	AnsibleTasks                *TrainingAnsibleTaskListRelationFilter   `json:"ansibleTasks,omitempty"`
	DeploymentAnsibleTask       *TrainingAnsibleTaskRelationFilter       `json:"deploymentAnsibleTask,omitempty"`
	Project                     *ProjectRelationFilter                   `json:"project,omitempty"`
	VpcAttachment               *VPCAttachmentRelationFilter             `json:"vpcAttachment,omitempty"`
	TaskActions                 *TaskActionListRelationFilter            `json:"taskActions,omitempty"`
	ResourceBillableUsage       *BillableUsageRelationFilter             `json:"resourceBillableUsage,omitempty"`
}

type TrainingWhereUniqueInput struct {
	ID                          *string `json:"id,omitempty"`
	CloudProviderFalconConfigID *string `json:"cloudProviderFalconConfigId,omitempty"`
}

type UpdateAccountInput struct {
	Username *string `json:"username,omitempty"`
}

type UpdateApplicationContainerInput struct {
	Image *string `json:"image,omitempty"`
	Port  *int64  `json:"port,omitempty"`
}

type UpdateApplicationInput struct {
	Container *UpdateApplicationContainerInput `json:"container,omitempty"`
	// New list of environment variables. If undefined, the list is not updated. If the list is defined but empty, all environment variables are removed.
	EnvironmentVariables []*EnvironmentVariableInput `json:"environmentVariables,omitempty"`
}

type UpdateBillingAccountInput struct {
	Email *string `json:"email,omitempty"`
}

type UpdateCloudCredentialsInput struct {
	AwsCredentials   *AWSCredentials   `json:"awsCredentials,omitempty"`
	AzureCredentials *AzureCredentials `json:"azureCredentials,omitempty"`
	GcpCredentials   *GCPCredentials   `json:"gcpCredentials,omitempty"`
}

type UpdateCloudProfileInput struct {
	Name      *string `json:"name,omitempty"`
	IsDefault *bool   `json:"isDefault,omitempty"`
}

type UpdateExperimentRunInput struct {
	Status        *ExperimentRunStatus `json:"status,omitempty"`
	DevelImageTag *string              `json:"develImageTag,omitempty"`
}

type UpdateOnboardingInput struct {
	IsGithubConnected     *bool `json:"isGithubConnected,omitempty"`
	IsCloudProfileCreated *bool `json:"isCloudProfileCreated,omitempty"`
	IsCliInstalled        *bool `json:"isCliInstalled,omitempty"`
	IsProjectCreated      *bool `json:"isProjectCreated,omitempty"`
}

type UpdateProjectInput struct {
	Name *string `json:"name,omitempty"`
}

type UpdateTeamInput struct {
	DisplayName *string `json:"displayName,omitempty"`
	Email       *string `json:"email,omitempty"`
}

type UpdateUserInput struct {
	FirstName       *string `json:"firstName,omitempty"`
	LastName        *string `json:"lastName,omitempty"`
	Email           *string `json:"email,omitempty"`
	SignupCompleted *bool   `json:"signupCompleted,omitempty"`
}

type User struct {
	ID                   string                  `json:"id"`
	AccountID            string                  `json:"accountId"`
	FirstName            string                  `json:"firstName"`
	LastName             *string                 `json:"lastName"`
	SignupCompleted      bool                    `json:"signupCompleted"`
	Count                *UserCount              `json:"_count"`
	Account              Account                 `json:"account"`
	ExternalSso          *ExternalSso            `json:"externalSSO"`
	UserSessions         []*UserSession          `json:"userSessions"`
	PersonalAccessTokens []*PersonalAccessToken  `json:"personalAccessTokens"`
	Teams                []*Team                 `json:"teams"`
	Invitations          []*TeamMemberInvitation `json:"invitations"`
	TaskActions          []*TaskAction           `json:"taskActions"`
}

type UserCount struct {
	UserSessions         int64 `json:"userSessions"`
	PersonalAccessTokens int64 `json:"personalAccessTokens"`
	Teams                int64 `json:"teams"`
	Invitations          int64 `json:"invitations"`
	TaskActions          int64 `json:"taskActions"`
}

type UserOrderByWithRelationInput struct {
	ID                   *SortOrder                                         `json:"id,omitempty"`
	AccountID            *SortOrder                                         `json:"accountId,omitempty"`
	FirstName            *SortOrder                                         `json:"firstName,omitempty"`
	LastName             *SortOrder                                         `json:"lastName,omitempty"`
	SignupCompleted      *SortOrder                                         `json:"signupCompleted,omitempty"`
	Account              *AccountOrderByWithRelationInput                   `json:"account,omitempty"`
	ExternalSso          *ExternalSSOOrderByWithRelationInput               `json:"externalSSO,omitempty"`
	UserSessions         *UserSessionOrderByRelationAggregateInput          `json:"userSessions,omitempty"`
	PersonalAccessTokens *PersonalAccessTokenOrderByRelationAggregateInput  `json:"personalAccessTokens,omitempty"`
	Teams                *TeamsOnUsersOrderByRelationAggregateInput         `json:"teams,omitempty"`
	Invitations          *TeamMemberInvitationOrderByRelationAggregateInput `json:"invitations,omitempty"`
	TaskActions          *TaskActionOrderByRelationAggregateInput           `json:"taskActions,omitempty"`
}

type UserRelationFilter struct {
	Is    *UserWhereInput `json:"is,omitempty"`
	IsNot *UserWhereInput `json:"isNot,omitempty"`
}

type UserSession struct {
	ID        string    `json:"id"`
	UserID    string    `json:"userId"`
	CreatedAt time.Time `json:"createdAt"`
}

type UserSessionListRelationFilter struct {
	Every *UserSessionWhereInput `json:"every,omitempty"`
	Some  *UserSessionWhereInput `json:"some,omitempty"`
	None  *UserSessionWhereInput `json:"none,omitempty"`
}

type UserSessionOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type UserSessionOrderByWithRelationInput struct {
	ID          *SortOrder                    `json:"id,omitempty"`
	UserID      *SortOrder                    `json:"userId,omitempty"`
	GithubToken *SortOrder                    `json:"githubToken,omitempty"`
	CreatedAt   *SortOrder                    `json:"createdAt,omitempty"`
	User        *UserOrderByWithRelationInput `json:"user,omitempty"`
}

type UserSessionWhereInput struct {
	And         []*UserSessionWhereInput `json:"AND,omitempty"`
	Or          []*UserSessionWhereInput `json:"OR,omitempty"`
	Not         []*UserSessionWhereInput `json:"NOT,omitempty"`
	ID          *StringFilter            `json:"id,omitempty"`
	UserID      *StringFilter            `json:"userId,omitempty"`
	GithubToken *StringFilter            `json:"githubToken,omitempty"`
	CreatedAt   *DateTimeFilter          `json:"createdAt,omitempty"`
	User        *UserRelationFilter      `json:"user,omitempty"`
}

type UserSessionWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type UserToBeInvited struct {
	ID    *string     `json:"id,omitempty"`
	Email *string     `json:"email,omitempty"`
	Role  *RoleInTeam `json:"role,omitempty"`
}

type UserWhereInput struct {
	And                  []*UserWhereInput                       `json:"AND,omitempty"`
	Or                   []*UserWhereInput                       `json:"OR,omitempty"`
	Not                  []*UserWhereInput                       `json:"NOT,omitempty"`
	ID                   *StringFilter                           `json:"id,omitempty"`
	AccountID            *StringFilter                           `json:"accountId,omitempty"`
	FirstName            *StringFilter                           `json:"firstName,omitempty"`
	LastName             *StringNullableFilter                   `json:"lastName,omitempty"`
	SignupCompleted      *BoolFilter                             `json:"signupCompleted,omitempty"`
	Account              *AccountRelationFilter                  `json:"account,omitempty"`
	ExternalSso          *ExternalSSORelationFilter              `json:"externalSSO,omitempty"`
	UserSessions         *UserSessionListRelationFilter          `json:"userSessions,omitempty"`
	PersonalAccessTokens *PersonalAccessTokenListRelationFilter  `json:"personalAccessTokens,omitempty"`
	Teams                *TeamsOnUsersListRelationFilter         `json:"teams,omitempty"`
	Invitations          *TeamMemberInvitationListRelationFilter `json:"invitations,omitempty"`
	TaskActions          *TaskActionListRelationFilter           `json:"taskActions,omitempty"`
}

type Vpc struct {
	ID                           string                      `json:"id"`
	Status                       VPCStatus                   `json:"status"`
	AccountID                    string                      `json:"accountId"`
	CloudProfileID               *string                     `json:"cloudProfileId"`
	CloudProviderNebulonConfigID *string                     `json:"cloudProviderNebulonConfigId"`
	CreatedAt                    time.Time                   `json:"createdAt"`
	UpdatedAt                    time.Time                   `json:"updatedAt"`
	Count                        *VPCCount                   `json:"_count"`
	Account                      Account                     `json:"account"`
	CloudProfile                 *CloudProfile               `json:"cloudProfile"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfig `json:"cloudProviderNebulonConfig"`
	Attachments                  []*VPCAttachment            `json:"attachments"`
	TaskActions                  []*TaskAction               `json:"taskActions"`
}

type VPCAttachment struct {
	ID            string              `json:"id"`
	CidrBlock     string              `json:"cidrBlock"`
	Status        VPCAttachmentStatus `json:"status"`
	VpcID         string              `json:"vpcId"`
	ApplicationID *string             `json:"applicationId"`
	TrainingID    *string             `json:"trainingId"`
	Vpc           Vpc                 `json:"vpc"`
	Application   *Application        `json:"application"`
	Training      *Training           `json:"training"`
}

type VPCAttachmentListRelationFilter struct {
	Every *VPCAttachmentWhereInput `json:"every,omitempty"`
	Some  *VPCAttachmentWhereInput `json:"some,omitempty"`
	None  *VPCAttachmentWhereInput `json:"none,omitempty"`
}

type VPCAttachmentOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type VPCAttachmentOrderByWithRelationInput struct {
	ID            *SortOrder                           `json:"id,omitempty"`
	CidrBlock     *SortOrder                           `json:"cidrBlock,omitempty"`
	Status        *SortOrder                           `json:"status,omitempty"`
	VpcID         *SortOrder                           `json:"vpcId,omitempty"`
	ApplicationID *SortOrder                           `json:"applicationId,omitempty"`
	TrainingID    *SortOrder                           `json:"trainingId,omitempty"`
	Vpc           *VPCOrderByWithRelationInput         `json:"vpc,omitempty"`
	Application   *ApplicationOrderByWithRelationInput `json:"application,omitempty"`
	Training      *TrainingOrderByWithRelationInput    `json:"training,omitempty"`
}

type VPCAttachmentRelationFilter struct {
	Is    *VPCAttachmentWhereInput `json:"is,omitempty"`
	IsNot *VPCAttachmentWhereInput `json:"isNot,omitempty"`
}

type VPCAttachmentWhereInput struct {
	And           []*VPCAttachmentWhereInput     `json:"AND,omitempty"`
	Or            []*VPCAttachmentWhereInput     `json:"OR,omitempty"`
	Not           []*VPCAttachmentWhereInput     `json:"NOT,omitempty"`
	ID            *StringFilter                  `json:"id,omitempty"`
	CidrBlock     *StringFilter                  `json:"cidrBlock,omitempty"`
	Status        *EnumVPCAttachmentStatusFilter `json:"status,omitempty"`
	VpcID         *StringFilter                  `json:"vpcId,omitempty"`
	ApplicationID *StringNullableFilter          `json:"applicationId,omitempty"`
	TrainingID    *StringNullableFilter          `json:"trainingId,omitempty"`
	Vpc           *VPCRelationFilter             `json:"vpc,omitempty"`
	Application   *ApplicationRelationFilter     `json:"application,omitempty"`
	Training      *TrainingRelationFilter        `json:"training,omitempty"`
}

type VPCAttachmentWhereUniqueInput struct {
	ID            *string `json:"id,omitempty"`
	ApplicationID *string `json:"applicationId,omitempty"`
	TrainingID    *string `json:"trainingId,omitempty"`
}

type VPCCount struct {
	Attachments int64 `json:"attachments"`
	TaskActions int64 `json:"taskActions"`
}

type VPCListRelationFilter struct {
	Every *VPCWhereInput `json:"every,omitempty"`
	Some  *VPCWhereInput `json:"some,omitempty"`
	None  *VPCWhereInput `json:"none,omitempty"`
}

type VPCOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count,omitempty"`
}

type VPCOrderByWithRelationInput struct {
	ID                           *SortOrder                                          `json:"id,omitempty"`
	Status                       *SortOrder                                          `json:"status,omitempty"`
	AccountID                    *SortOrder                                          `json:"accountId,omitempty"`
	CloudProfileID               *SortOrder                                          `json:"cloudProfileId,omitempty"`
	CloudProviderNebulonConfigID *SortOrder                                          `json:"cloudProviderNebulonConfigId,omitempty"`
	CreatedAt                    *SortOrder                                          `json:"createdAt,omitempty"`
	UpdatedAt                    *SortOrder                                          `json:"updatedAt,omitempty"`
	Account                      *AccountOrderByWithRelationInput                    `json:"account,omitempty"`
	CloudProfile                 *CloudProfileOrderByWithRelationInput               `json:"cloudProfile,omitempty"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfigOrderByWithRelationInput `json:"cloudProviderNebulonConfig,omitempty"`
	Attachments                  *VPCAttachmentOrderByRelationAggregateInput         `json:"attachments,omitempty"`
	TaskActions                  *TaskActionOrderByRelationAggregateInput            `json:"taskActions,omitempty"`
}

type VPCRelationFilter struct {
	Is    *VPCWhereInput `json:"is,omitempty"`
	IsNot *VPCWhereInput `json:"isNot,omitempty"`
}

type VPCWhereInput struct {
	And                          []*VPCWhereInput                          `json:"AND,omitempty"`
	Or                           []*VPCWhereInput                          `json:"OR,omitempty"`
	Not                          []*VPCWhereInput                          `json:"NOT,omitempty"`
	ID                           *StringFilter                             `json:"id,omitempty"`
	Status                       *EnumVPCStatusFilter                      `json:"status,omitempty"`
	AccountID                    *StringFilter                             `json:"accountId,omitempty"`
	CloudProfileID               *StringNullableFilter                     `json:"cloudProfileId,omitempty"`
	CloudProviderNebulonConfigID *StringNullableFilter                     `json:"cloudProviderNebulonConfigId,omitempty"`
	CreatedAt                    *DateTimeFilter                           `json:"createdAt,omitempty"`
	UpdatedAt                    *DateTimeFilter                           `json:"updatedAt,omitempty"`
	Account                      *AccountRelationFilter                    `json:"account,omitempty"`
	CloudProfile                 *CloudProfileRelationFilter               `json:"cloudProfile,omitempty"`
	CloudProviderNebulonConfig   *CloudProviderNebulonConfigRelationFilter `json:"cloudProviderNebulonConfig,omitempty"`
	Attachments                  *VPCAttachmentListRelationFilter          `json:"attachments,omitempty"`
	TaskActions                  *TaskActionListRelationFilter             `json:"taskActions,omitempty"`
}

type VPCWhereUniqueInput struct {
	ID                           *string `json:"id,omitempty"`
	CloudProviderNebulonConfigID *string `json:"cloudProviderNebulonConfigId,omitempty"`
}

type ApplicationContainerScalarFieldEnum string

const (
	ApplicationContainerScalarFieldEnumID                    ApplicationContainerScalarFieldEnum = "id"
	ApplicationContainerScalarFieldEnumAttachedApplicationID ApplicationContainerScalarFieldEnum = "attachedApplicationId"
	ApplicationContainerScalarFieldEnumApplicationID         ApplicationContainerScalarFieldEnum = "applicationId"
	ApplicationContainerScalarFieldEnumStatus                ApplicationContainerScalarFieldEnum = "status"
	ApplicationContainerScalarFieldEnumImage                 ApplicationContainerScalarFieldEnum = "image"
	ApplicationContainerScalarFieldEnumPort                  ApplicationContainerScalarFieldEnum = "port"
	ApplicationContainerScalarFieldEnumCreatedAt             ApplicationContainerScalarFieldEnum = "createdAt"
	ApplicationContainerScalarFieldEnumUpdatedAt             ApplicationContainerScalarFieldEnum = "updatedAt"
)

var AllApplicationContainerScalarFieldEnum = []ApplicationContainerScalarFieldEnum{
	ApplicationContainerScalarFieldEnumID,
	ApplicationContainerScalarFieldEnumAttachedApplicationID,
	ApplicationContainerScalarFieldEnumApplicationID,
	ApplicationContainerScalarFieldEnumStatus,
	ApplicationContainerScalarFieldEnumImage,
	ApplicationContainerScalarFieldEnumPort,
	ApplicationContainerScalarFieldEnumCreatedAt,
	ApplicationContainerScalarFieldEnumUpdatedAt,
}

func (e ApplicationContainerScalarFieldEnum) IsValid() bool {
	switch e {
	case ApplicationContainerScalarFieldEnumID, ApplicationContainerScalarFieldEnumAttachedApplicationID, ApplicationContainerScalarFieldEnumApplicationID, ApplicationContainerScalarFieldEnumStatus, ApplicationContainerScalarFieldEnumImage, ApplicationContainerScalarFieldEnumPort, ApplicationContainerScalarFieldEnumCreatedAt, ApplicationContainerScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e ApplicationContainerScalarFieldEnum) String() string {
	return string(e)
}

func (e *ApplicationContainerScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationContainerScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationContainerScalarFieldEnum", str)
	}
	return nil
}

func (e ApplicationContainerScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ApplicationContainerStatus string

const (
	ApplicationContainerStatusDeploySuccess ApplicationContainerStatus = "DEPLOY_SUCCESS"
	ApplicationContainerStatusDeployError   ApplicationContainerStatus = "DEPLOY_ERROR"
	ApplicationContainerStatusDeploying     ApplicationContainerStatus = "DEPLOYING"
	ApplicationContainerStatusUndeployed    ApplicationContainerStatus = "UNDEPLOYED"
)

var AllApplicationContainerStatus = []ApplicationContainerStatus{
	ApplicationContainerStatusDeploySuccess,
	ApplicationContainerStatusDeployError,
	ApplicationContainerStatusDeploying,
	ApplicationContainerStatusUndeployed,
}

func (e ApplicationContainerStatus) IsValid() bool {
	switch e {
	case ApplicationContainerStatusDeploySuccess, ApplicationContainerStatusDeployError, ApplicationContainerStatusDeploying, ApplicationContainerStatusUndeployed:
		return true
	}
	return false
}

func (e ApplicationContainerStatus) String() string {
	return string(e)
}

func (e *ApplicationContainerStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationContainerStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationContainerStatus", str)
	}
	return nil
}

func (e ApplicationContainerStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ApplicationScalarFieldEnum string

const (
	ApplicationScalarFieldEnumID                       ApplicationScalarFieldEnum = "id"
	ApplicationScalarFieldEnumName                     ApplicationScalarFieldEnum = "name"
	ApplicationScalarFieldEnumStatus                   ApplicationScalarFieldEnum = "status"
	ApplicationScalarFieldEnumAccountID                ApplicationScalarFieldEnum = "accountId"
	ApplicationScalarFieldEnumCloudProfileID           ApplicationScalarFieldEnum = "cloudProfileId"
	ApplicationScalarFieldEnumCloudProviderAppConfigID ApplicationScalarFieldEnum = "cloudProviderAppConfigId"
	ApplicationScalarFieldEnumProjectID                ApplicationScalarFieldEnum = "projectId"
	ApplicationScalarFieldEnumContainerRegistryID      ApplicationScalarFieldEnum = "containerRegistryId"
	ApplicationScalarFieldEnumCreatedAt                ApplicationScalarFieldEnum = "createdAt"
	ApplicationScalarFieldEnumUpdatedAt                ApplicationScalarFieldEnum = "updatedAt"
)

var AllApplicationScalarFieldEnum = []ApplicationScalarFieldEnum{
	ApplicationScalarFieldEnumID,
	ApplicationScalarFieldEnumName,
	ApplicationScalarFieldEnumStatus,
	ApplicationScalarFieldEnumAccountID,
	ApplicationScalarFieldEnumCloudProfileID,
	ApplicationScalarFieldEnumCloudProviderAppConfigID,
	ApplicationScalarFieldEnumProjectID,
	ApplicationScalarFieldEnumContainerRegistryID,
	ApplicationScalarFieldEnumCreatedAt,
	ApplicationScalarFieldEnumUpdatedAt,
}

func (e ApplicationScalarFieldEnum) IsValid() bool {
	switch e {
	case ApplicationScalarFieldEnumID, ApplicationScalarFieldEnumName, ApplicationScalarFieldEnumStatus, ApplicationScalarFieldEnumAccountID, ApplicationScalarFieldEnumCloudProfileID, ApplicationScalarFieldEnumCloudProviderAppConfigID, ApplicationScalarFieldEnumProjectID, ApplicationScalarFieldEnumContainerRegistryID, ApplicationScalarFieldEnumCreatedAt, ApplicationScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e ApplicationScalarFieldEnum) String() string {
	return string(e)
}

func (e *ApplicationScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationScalarFieldEnum", str)
	}
	return nil
}

func (e ApplicationScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ApplicationStatus string

const (
	ApplicationStatusDeploySuccess  ApplicationStatus = "DEPLOY_SUCCESS"
	ApplicationStatusDeployError    ApplicationStatus = "DEPLOY_ERROR"
	ApplicationStatusDeploying      ApplicationStatus = "DEPLOYING"
	ApplicationStatusUndeployed     ApplicationStatus = "UNDEPLOYED"
	ApplicationStatusDestroying     ApplicationStatus = "DESTROYING"
	ApplicationStatusDestroyError   ApplicationStatus = "DESTROY_ERROR"
	ApplicationStatusDestroySuccess ApplicationStatus = "DESTROY_SUCCESS"
)

var AllApplicationStatus = []ApplicationStatus{
	ApplicationStatusDeploySuccess,
	ApplicationStatusDeployError,
	ApplicationStatusDeploying,
	ApplicationStatusUndeployed,
	ApplicationStatusDestroying,
	ApplicationStatusDestroyError,
	ApplicationStatusDestroySuccess,
}

func (e ApplicationStatus) IsValid() bool {
	switch e {
	case ApplicationStatusDeploySuccess, ApplicationStatusDeployError, ApplicationStatusDeploying, ApplicationStatusUndeployed, ApplicationStatusDestroying, ApplicationStatusDestroyError, ApplicationStatusDestroySuccess:
		return true
	}
	return false
}

func (e ApplicationStatus) String() string {
	return string(e)
}

func (e *ApplicationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationStatus", str)
	}
	return nil
}

func (e ApplicationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BillableUsageType string

const (
	BillableUsageTypeResource           BillableUsageType = "RESOURCE"
	BillableUsageTypeCloudOrchestration BillableUsageType = "CLOUD_ORCHESTRATION"
)

var AllBillableUsageType = []BillableUsageType{
	BillableUsageTypeResource,
	BillableUsageTypeCloudOrchestration,
}

func (e BillableUsageType) IsValid() bool {
	switch e {
	case BillableUsageTypeResource, BillableUsageTypeCloudOrchestration:
		return true
	}
	return false
}

func (e BillableUsageType) String() string {
	return string(e)
}

func (e *BillableUsageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillableUsageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillableUsageType", str)
	}
	return nil
}

func (e BillableUsageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BillingPaymentProvider string

const (
	BillingPaymentProviderStripe BillingPaymentProvider = "STRIPE"
)

var AllBillingPaymentProvider = []BillingPaymentProvider{
	BillingPaymentProviderStripe,
}

func (e BillingPaymentProvider) IsValid() bool {
	switch e {
	case BillingPaymentProviderStripe:
		return true
	}
	return false
}

func (e BillingPaymentProvider) String() string {
	return string(e)
}

func (e *BillingPaymentProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingPaymentProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingPaymentProvider", str)
	}
	return nil
}

func (e BillingPaymentProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BillingSubscriptionStatus string

const (
	BillingSubscriptionStatusTrialing          BillingSubscriptionStatus = "TRIALING"
	BillingSubscriptionStatusActive            BillingSubscriptionStatus = "ACTIVE"
	BillingSubscriptionStatusCancelled         BillingSubscriptionStatus = "CANCELLED"
	BillingSubscriptionStatusPastDue           BillingSubscriptionStatus = "PAST_DUE"
	BillingSubscriptionStatusPaused            BillingSubscriptionStatus = "PAUSED"
	BillingSubscriptionStatusUnpaid            BillingSubscriptionStatus = "UNPAID"
	BillingSubscriptionStatusIncomplete        BillingSubscriptionStatus = "INCOMPLETE"
	BillingSubscriptionStatusIncompleteExpired BillingSubscriptionStatus = "INCOMPLETE_EXPIRED"
)

var AllBillingSubscriptionStatus = []BillingSubscriptionStatus{
	BillingSubscriptionStatusTrialing,
	BillingSubscriptionStatusActive,
	BillingSubscriptionStatusCancelled,
	BillingSubscriptionStatusPastDue,
	BillingSubscriptionStatusPaused,
	BillingSubscriptionStatusUnpaid,
	BillingSubscriptionStatusIncomplete,
	BillingSubscriptionStatusIncompleteExpired,
}

func (e BillingSubscriptionStatus) IsValid() bool {
	switch e {
	case BillingSubscriptionStatusTrialing, BillingSubscriptionStatusActive, BillingSubscriptionStatusCancelled, BillingSubscriptionStatusPastDue, BillingSubscriptionStatusPaused, BillingSubscriptionStatusUnpaid, BillingSubscriptionStatusIncomplete, BillingSubscriptionStatusIncompleteExpired:
		return true
	}
	return false
}

func (e BillingSubscriptionStatus) String() string {
	return string(e)
}

func (e *BillingSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingSubscriptionStatus", str)
	}
	return nil
}

func (e BillingSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CloudProfileScalarFieldEnum string

const (
	CloudProfileScalarFieldEnumID               CloudProfileScalarFieldEnum = "id"
	CloudProfileScalarFieldEnumName             CloudProfileScalarFieldEnum = "name"
	CloudProfileScalarFieldEnumProvider         CloudProfileScalarFieldEnum = "provider"
	CloudProfileScalarFieldEnumHosted           CloudProfileScalarFieldEnum = "hosted"
	CloudProfileScalarFieldEnumAccountID        CloudProfileScalarFieldEnum = "accountId"
	CloudProfileScalarFieldEnumDefaultAccountID CloudProfileScalarFieldEnum = "defaultAccountId"
	CloudProfileScalarFieldEnumCredentialsID    CloudProfileScalarFieldEnum = "credentialsId"
)

var AllCloudProfileScalarFieldEnum = []CloudProfileScalarFieldEnum{
	CloudProfileScalarFieldEnumID,
	CloudProfileScalarFieldEnumName,
	CloudProfileScalarFieldEnumProvider,
	CloudProfileScalarFieldEnumHosted,
	CloudProfileScalarFieldEnumAccountID,
	CloudProfileScalarFieldEnumDefaultAccountID,
	CloudProfileScalarFieldEnumCredentialsID,
}

func (e CloudProfileScalarFieldEnum) IsValid() bool {
	switch e {
	case CloudProfileScalarFieldEnumID, CloudProfileScalarFieldEnumName, CloudProfileScalarFieldEnumProvider, CloudProfileScalarFieldEnumHosted, CloudProfileScalarFieldEnumAccountID, CloudProfileScalarFieldEnumDefaultAccountID, CloudProfileScalarFieldEnumCredentialsID:
		return true
	}
	return false
}

func (e CloudProfileScalarFieldEnum) String() string {
	return string(e)
}

func (e *CloudProfileScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CloudProfileScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CloudProfileScalarFieldEnum", str)
	}
	return nil
}

func (e CloudProfileScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CloudProvider string

const (
	CloudProviderAws          CloudProvider = "AWS"
	CloudProviderAzure        CloudProvider = "AZURE"
	CloudProviderGcp          CloudProvider = "GCP"
	CloudProviderDigitalOcean CloudProvider = "DIGITAL_OCEAN"
)

var AllCloudProvider = []CloudProvider{
	CloudProviderAws,
	CloudProviderAzure,
	CloudProviderGcp,
	CloudProviderDigitalOcean,
}

func (e CloudProvider) IsValid() bool {
	switch e {
	case CloudProviderAws, CloudProviderAzure, CloudProviderGcp, CloudProviderDigitalOcean:
		return true
	}
	return false
}

func (e CloudProvider) String() string {
	return string(e)
}

func (e *CloudProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CloudProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CloudProvider", str)
	}
	return nil
}

func (e CloudProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CloudProviderAppConfigPlan string

const (
	CloudProviderAppConfigPlanSmall  CloudProviderAppConfigPlan = "SMALL"
	CloudProviderAppConfigPlanMedium CloudProviderAppConfigPlan = "MEDIUM"
	CloudProviderAppConfigPlanLarge  CloudProviderAppConfigPlan = "LARGE"
)

var AllCloudProviderAppConfigPlan = []CloudProviderAppConfigPlan{
	CloudProviderAppConfigPlanSmall,
	CloudProviderAppConfigPlanMedium,
	CloudProviderAppConfigPlanLarge,
}

func (e CloudProviderAppConfigPlan) IsValid() bool {
	switch e {
	case CloudProviderAppConfigPlanSmall, CloudProviderAppConfigPlanMedium, CloudProviderAppConfigPlanLarge:
		return true
	}
	return false
}

func (e CloudProviderAppConfigPlan) String() string {
	return string(e)
}

func (e *CloudProviderAppConfigPlan) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CloudProviderAppConfigPlan(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CloudProviderAppConfigPlan", str)
	}
	return nil
}

func (e CloudProviderAppConfigPlan) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CloudProviderFalconConfigPlan string

const (
	CloudProviderFalconConfigPlanSmallCPU  CloudProviderFalconConfigPlan = "SMALL_CPU"
	CloudProviderFalconConfigPlanMediumCPU CloudProviderFalconConfigPlan = "MEDIUM_CPU"
	CloudProviderFalconConfigPlanLargeCPU  CloudProviderFalconConfigPlan = "LARGE_CPU"
	CloudProviderFalconConfigPlanSmallGpu  CloudProviderFalconConfigPlan = "SMALL_GPU"
	CloudProviderFalconConfigPlanMediumGpu CloudProviderFalconConfigPlan = "MEDIUM_GPU"
	CloudProviderFalconConfigPlanLargeGpu  CloudProviderFalconConfigPlan = "LARGE_GPU"
)

var AllCloudProviderFalconConfigPlan = []CloudProviderFalconConfigPlan{
	CloudProviderFalconConfigPlanSmallCPU,
	CloudProviderFalconConfigPlanMediumCPU,
	CloudProviderFalconConfigPlanLargeCPU,
	CloudProviderFalconConfigPlanSmallGpu,
	CloudProviderFalconConfigPlanMediumGpu,
	CloudProviderFalconConfigPlanLargeGpu,
}

func (e CloudProviderFalconConfigPlan) IsValid() bool {
	switch e {
	case CloudProviderFalconConfigPlanSmallCPU, CloudProviderFalconConfigPlanMediumCPU, CloudProviderFalconConfigPlanLargeCPU, CloudProviderFalconConfigPlanSmallGpu, CloudProviderFalconConfigPlanMediumGpu, CloudProviderFalconConfigPlanLargeGpu:
		return true
	}
	return false
}

func (e CloudProviderFalconConfigPlan) String() string {
	return string(e)
}

func (e *CloudProviderFalconConfigPlan) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CloudProviderFalconConfigPlan(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CloudProviderFalconConfigPlan", str)
	}
	return nil
}

func (e CloudProviderFalconConfigPlan) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContainerRegistryScalarFieldEnum string

const (
	ContainerRegistryScalarFieldEnumID                                     ContainerRegistryScalarFieldEnum = "id"
	ContainerRegistryScalarFieldEnumName                                   ContainerRegistryScalarFieldEnum = "name"
	ContainerRegistryScalarFieldEnumSluggedName                            ContainerRegistryScalarFieldEnum = "sluggedName"
	ContainerRegistryScalarFieldEnumAccountID                              ContainerRegistryScalarFieldEnum = "accountId"
	ContainerRegistryScalarFieldEnumCloudProfileID                         ContainerRegistryScalarFieldEnum = "cloudProfileId"
	ContainerRegistryScalarFieldEnumProjectID                              ContainerRegistryScalarFieldEnum = "projectId"
	ContainerRegistryScalarFieldEnumCloudProviderContainerRegistryConfigID ContainerRegistryScalarFieldEnum = "cloudProviderContainerRegistryConfigId"
	ContainerRegistryScalarFieldEnumCreatedAt                              ContainerRegistryScalarFieldEnum = "createdAt"
	ContainerRegistryScalarFieldEnumUpdatedAt                              ContainerRegistryScalarFieldEnum = "updatedAt"
)

var AllContainerRegistryScalarFieldEnum = []ContainerRegistryScalarFieldEnum{
	ContainerRegistryScalarFieldEnumID,
	ContainerRegistryScalarFieldEnumName,
	ContainerRegistryScalarFieldEnumSluggedName,
	ContainerRegistryScalarFieldEnumAccountID,
	ContainerRegistryScalarFieldEnumCloudProfileID,
	ContainerRegistryScalarFieldEnumProjectID,
	ContainerRegistryScalarFieldEnumCloudProviderContainerRegistryConfigID,
	ContainerRegistryScalarFieldEnumCreatedAt,
	ContainerRegistryScalarFieldEnumUpdatedAt,
}

func (e ContainerRegistryScalarFieldEnum) IsValid() bool {
	switch e {
	case ContainerRegistryScalarFieldEnumID, ContainerRegistryScalarFieldEnumName, ContainerRegistryScalarFieldEnumSluggedName, ContainerRegistryScalarFieldEnumAccountID, ContainerRegistryScalarFieldEnumCloudProfileID, ContainerRegistryScalarFieldEnumProjectID, ContainerRegistryScalarFieldEnumCloudProviderContainerRegistryConfigID, ContainerRegistryScalarFieldEnumCreatedAt, ContainerRegistryScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e ContainerRegistryScalarFieldEnum) String() string {
	return string(e)
}

func (e *ContainerRegistryScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContainerRegistryScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContainerRegistryScalarFieldEnum", str)
	}
	return nil
}

func (e ContainerRegistryScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DataStorageContainerScalarFieldEnum string

const (
	DataStorageContainerScalarFieldEnumID            DataStorageContainerScalarFieldEnum = "id"
	DataStorageContainerScalarFieldEnumDataStorageID DataStorageContainerScalarFieldEnum = "dataStorageId"
	DataStorageContainerScalarFieldEnumDirectoryName DataStorageContainerScalarFieldEnum = "directoryName"
)

var AllDataStorageContainerScalarFieldEnum = []DataStorageContainerScalarFieldEnum{
	DataStorageContainerScalarFieldEnumID,
	DataStorageContainerScalarFieldEnumDataStorageID,
	DataStorageContainerScalarFieldEnumDirectoryName,
}

func (e DataStorageContainerScalarFieldEnum) IsValid() bool {
	switch e {
	case DataStorageContainerScalarFieldEnumID, DataStorageContainerScalarFieldEnumDataStorageID, DataStorageContainerScalarFieldEnumDirectoryName:
		return true
	}
	return false
}

func (e DataStorageContainerScalarFieldEnum) String() string {
	return string(e)
}

func (e *DataStorageContainerScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataStorageContainerScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataStorageContainerScalarFieldEnum", str)
	}
	return nil
}

func (e DataStorageContainerScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DataStorageScalarFieldEnum string

const (
	DataStorageScalarFieldEnumID                           DataStorageScalarFieldEnum = "id"
	DataStorageScalarFieldEnumName                         DataStorageScalarFieldEnum = "name"
	DataStorageScalarFieldEnumAccountID                    DataStorageScalarFieldEnum = "accountId"
	DataStorageScalarFieldEnumCloudProfileID               DataStorageScalarFieldEnum = "cloudProfileId"
	DataStorageScalarFieldEnumCloudProviderYodaConfigID    DataStorageScalarFieldEnum = "cloudProviderYodaConfigId"
	DataStorageScalarFieldEnumProjectForArtifactsStorageID DataStorageScalarFieldEnum = "projectForArtifactsStorageId"
	DataStorageScalarFieldEnumStatus                       DataStorageScalarFieldEnum = "status"
	DataStorageScalarFieldEnumCreatedAt                    DataStorageScalarFieldEnum = "createdAt"
	DataStorageScalarFieldEnumUpdatedAt                    DataStorageScalarFieldEnum = "updatedAt"
)

var AllDataStorageScalarFieldEnum = []DataStorageScalarFieldEnum{
	DataStorageScalarFieldEnumID,
	DataStorageScalarFieldEnumName,
	DataStorageScalarFieldEnumAccountID,
	DataStorageScalarFieldEnumCloudProfileID,
	DataStorageScalarFieldEnumCloudProviderYodaConfigID,
	DataStorageScalarFieldEnumProjectForArtifactsStorageID,
	DataStorageScalarFieldEnumStatus,
	DataStorageScalarFieldEnumCreatedAt,
	DataStorageScalarFieldEnumUpdatedAt,
}

func (e DataStorageScalarFieldEnum) IsValid() bool {
	switch e {
	case DataStorageScalarFieldEnumID, DataStorageScalarFieldEnumName, DataStorageScalarFieldEnumAccountID, DataStorageScalarFieldEnumCloudProfileID, DataStorageScalarFieldEnumCloudProviderYodaConfigID, DataStorageScalarFieldEnumProjectForArtifactsStorageID, DataStorageScalarFieldEnumStatus, DataStorageScalarFieldEnumCreatedAt, DataStorageScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e DataStorageScalarFieldEnum) String() string {
	return string(e)
}

func (e *DataStorageScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataStorageScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataStorageScalarFieldEnum", str)
	}
	return nil
}

func (e DataStorageScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DataStorageStatus string

const (
	DataStorageStatusDeploySuccess  DataStorageStatus = "DEPLOY_SUCCESS"
	DataStorageStatusDeployError    DataStorageStatus = "DEPLOY_ERROR"
	DataStorageStatusDeploying      DataStorageStatus = "DEPLOYING"
	DataStorageStatusUndeployed     DataStorageStatus = "UNDEPLOYED"
	DataStorageStatusDestroying     DataStorageStatus = "DESTROYING"
	DataStorageStatusDestroyError   DataStorageStatus = "DESTROY_ERROR"
	DataStorageStatusDestroySuccess DataStorageStatus = "DESTROY_SUCCESS"
)

var AllDataStorageStatus = []DataStorageStatus{
	DataStorageStatusDeploySuccess,
	DataStorageStatusDeployError,
	DataStorageStatusDeploying,
	DataStorageStatusUndeployed,
	DataStorageStatusDestroying,
	DataStorageStatusDestroyError,
	DataStorageStatusDestroySuccess,
}

func (e DataStorageStatus) IsValid() bool {
	switch e {
	case DataStorageStatusDeploySuccess, DataStorageStatusDeployError, DataStorageStatusDeploying, DataStorageStatusUndeployed, DataStorageStatusDestroying, DataStorageStatusDestroyError, DataStorageStatusDestroySuccess:
		return true
	}
	return false
}

func (e DataStorageStatus) String() string {
	return string(e)
}

func (e *DataStorageStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataStorageStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataStorageStatus", str)
	}
	return nil
}

func (e DataStorageStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnvironmentVariableScalarFieldEnum string

const (
	EnvironmentVariableScalarFieldEnumID            EnvironmentVariableScalarFieldEnum = "id"
	EnvironmentVariableScalarFieldEnumApplicationID EnvironmentVariableScalarFieldEnum = "applicationId"
	EnvironmentVariableScalarFieldEnumName          EnvironmentVariableScalarFieldEnum = "name"
	EnvironmentVariableScalarFieldEnumValue         EnvironmentVariableScalarFieldEnum = "value"
)

var AllEnvironmentVariableScalarFieldEnum = []EnvironmentVariableScalarFieldEnum{
	EnvironmentVariableScalarFieldEnumID,
	EnvironmentVariableScalarFieldEnumApplicationID,
	EnvironmentVariableScalarFieldEnumName,
	EnvironmentVariableScalarFieldEnumValue,
}

func (e EnvironmentVariableScalarFieldEnum) IsValid() bool {
	switch e {
	case EnvironmentVariableScalarFieldEnumID, EnvironmentVariableScalarFieldEnumApplicationID, EnvironmentVariableScalarFieldEnumName, EnvironmentVariableScalarFieldEnumValue:
		return true
	}
	return false
}

func (e EnvironmentVariableScalarFieldEnum) String() string {
	return string(e)
}

func (e *EnvironmentVariableScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnvironmentVariableScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnvironmentVariableScalarFieldEnum", str)
	}
	return nil
}

func (e EnvironmentVariableScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExperimentEnvironment string

const (
	ExperimentEnvironmentDeploifai ExperimentEnvironment = "DEPLOIFAI"
	ExperimentEnvironmentExternal  ExperimentEnvironment = "EXTERNAL"
)

var AllExperimentEnvironment = []ExperimentEnvironment{
	ExperimentEnvironmentDeploifai,
	ExperimentEnvironmentExternal,
}

func (e ExperimentEnvironment) IsValid() bool {
	switch e {
	case ExperimentEnvironmentDeploifai, ExperimentEnvironmentExternal:
		return true
	}
	return false
}

func (e ExperimentEnvironment) String() string {
	return string(e)
}

func (e *ExperimentEnvironment) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentEnvironment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExperimentEnvironment", str)
	}
	return nil
}

func (e ExperimentEnvironment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExperimentRunEnvironment string

const (
	ExperimentRunEnvironmentDeploifai ExperimentRunEnvironment = "DEPLOIFAI"
	ExperimentRunEnvironmentExternal  ExperimentRunEnvironment = "EXTERNAL"
)

var AllExperimentRunEnvironment = []ExperimentRunEnvironment{
	ExperimentRunEnvironmentDeploifai,
	ExperimentRunEnvironmentExternal,
}

func (e ExperimentRunEnvironment) IsValid() bool {
	switch e {
	case ExperimentRunEnvironmentDeploifai, ExperimentRunEnvironmentExternal:
		return true
	}
	return false
}

func (e ExperimentRunEnvironment) String() string {
	return string(e)
}

func (e *ExperimentRunEnvironment) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentRunEnvironment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExperimentRunEnvironment", str)
	}
	return nil
}

func (e ExperimentRunEnvironment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExperimentRunScalarFieldEnum string

const (
	ExperimentRunScalarFieldEnumID            ExperimentRunScalarFieldEnum = "id"
	ExperimentRunScalarFieldEnumExperimentID  ExperimentRunScalarFieldEnum = "experimentId"
	ExperimentRunScalarFieldEnumDevelImageTag ExperimentRunScalarFieldEnum = "develImageTag"
	ExperimentRunScalarFieldEnumStatus        ExperimentRunScalarFieldEnum = "status"
	ExperimentRunScalarFieldEnumEnvironment   ExperimentRunScalarFieldEnum = "environment"
	ExperimentRunScalarFieldEnumMlflowRunID   ExperimentRunScalarFieldEnum = "mlflowRunId"
	ExperimentRunScalarFieldEnumCreatedAt     ExperimentRunScalarFieldEnum = "createdAt"
	ExperimentRunScalarFieldEnumUpdatedAt     ExperimentRunScalarFieldEnum = "updatedAt"
)

var AllExperimentRunScalarFieldEnum = []ExperimentRunScalarFieldEnum{
	ExperimentRunScalarFieldEnumID,
	ExperimentRunScalarFieldEnumExperimentID,
	ExperimentRunScalarFieldEnumDevelImageTag,
	ExperimentRunScalarFieldEnumStatus,
	ExperimentRunScalarFieldEnumEnvironment,
	ExperimentRunScalarFieldEnumMlflowRunID,
	ExperimentRunScalarFieldEnumCreatedAt,
	ExperimentRunScalarFieldEnumUpdatedAt,
}

func (e ExperimentRunScalarFieldEnum) IsValid() bool {
	switch e {
	case ExperimentRunScalarFieldEnumID, ExperimentRunScalarFieldEnumExperimentID, ExperimentRunScalarFieldEnumDevelImageTag, ExperimentRunScalarFieldEnumStatus, ExperimentRunScalarFieldEnumEnvironment, ExperimentRunScalarFieldEnumMlflowRunID, ExperimentRunScalarFieldEnumCreatedAt, ExperimentRunScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e ExperimentRunScalarFieldEnum) String() string {
	return string(e)
}

func (e *ExperimentRunScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentRunScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExperimentRunScalarFieldEnum", str)
	}
	return nil
}

func (e ExperimentRunScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExperimentRunStatus string

const (
	ExperimentRunStatusNotStarted   ExperimentRunStatus = "NOT_STARTED"
	ExperimentRunStatusStarting     ExperimentRunStatus = "STARTING"
	ExperimentRunStatusStartSuccess ExperimentRunStatus = "START_SUCCESS"
	ExperimentRunStatusStartError   ExperimentRunStatus = "START_ERROR"
	ExperimentRunStatusRunning      ExperimentRunStatus = "RUNNING"
	ExperimentRunStatusRunSuccess   ExperimentRunStatus = "RUN_SUCCESS"
	ExperimentRunStatusRunError     ExperimentRunStatus = "RUN_ERROR"
	ExperimentRunStatusExternal     ExperimentRunStatus = "EXTERNAL"
)

var AllExperimentRunStatus = []ExperimentRunStatus{
	ExperimentRunStatusNotStarted,
	ExperimentRunStatusStarting,
	ExperimentRunStatusStartSuccess,
	ExperimentRunStatusStartError,
	ExperimentRunStatusRunning,
	ExperimentRunStatusRunSuccess,
	ExperimentRunStatusRunError,
	ExperimentRunStatusExternal,
}

func (e ExperimentRunStatus) IsValid() bool {
	switch e {
	case ExperimentRunStatusNotStarted, ExperimentRunStatusStarting, ExperimentRunStatusStartSuccess, ExperimentRunStatusStartError, ExperimentRunStatusRunning, ExperimentRunStatusRunSuccess, ExperimentRunStatusRunError, ExperimentRunStatusExternal:
		return true
	}
	return false
}

func (e ExperimentRunStatus) String() string {
	return string(e)
}

func (e *ExperimentRunStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentRunStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExperimentRunStatus", str)
	}
	return nil
}

func (e ExperimentRunStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExperimentScalarFieldEnum string

const (
	ExperimentScalarFieldEnumID                 ExperimentScalarFieldEnum = "id"
	ExperimentScalarFieldEnumName               ExperimentScalarFieldEnum = "name"
	ExperimentScalarFieldEnumAccountID          ExperimentScalarFieldEnum = "accountId"
	ExperimentScalarFieldEnumCloudProfileID     ExperimentScalarFieldEnum = "cloudProfileId"
	ExperimentScalarFieldEnumProjectID          ExperimentScalarFieldEnum = "projectId"
	ExperimentScalarFieldEnumTrainingID         ExperimentScalarFieldEnum = "trainingId"
	ExperimentScalarFieldEnumStatus             ExperimentScalarFieldEnum = "status"
	ExperimentScalarFieldEnumEnvironment        ExperimentScalarFieldEnum = "environment"
	ExperimentScalarFieldEnumMlflowExperimentID ExperimentScalarFieldEnum = "mlflowExperimentId"
	ExperimentScalarFieldEnumCreatedAt          ExperimentScalarFieldEnum = "createdAt"
	ExperimentScalarFieldEnumUpdatedAt          ExperimentScalarFieldEnum = "updatedAt"
)

var AllExperimentScalarFieldEnum = []ExperimentScalarFieldEnum{
	ExperimentScalarFieldEnumID,
	ExperimentScalarFieldEnumName,
	ExperimentScalarFieldEnumAccountID,
	ExperimentScalarFieldEnumCloudProfileID,
	ExperimentScalarFieldEnumProjectID,
	ExperimentScalarFieldEnumTrainingID,
	ExperimentScalarFieldEnumStatus,
	ExperimentScalarFieldEnumEnvironment,
	ExperimentScalarFieldEnumMlflowExperimentID,
	ExperimentScalarFieldEnumCreatedAt,
	ExperimentScalarFieldEnumUpdatedAt,
}

func (e ExperimentScalarFieldEnum) IsValid() bool {
	switch e {
	case ExperimentScalarFieldEnumID, ExperimentScalarFieldEnumName, ExperimentScalarFieldEnumAccountID, ExperimentScalarFieldEnumCloudProfileID, ExperimentScalarFieldEnumProjectID, ExperimentScalarFieldEnumTrainingID, ExperimentScalarFieldEnumStatus, ExperimentScalarFieldEnumEnvironment, ExperimentScalarFieldEnumMlflowExperimentID, ExperimentScalarFieldEnumCreatedAt, ExperimentScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e ExperimentScalarFieldEnum) String() string {
	return string(e)
}

func (e *ExperimentScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExperimentScalarFieldEnum", str)
	}
	return nil
}

func (e ExperimentScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExperimentStatus string

const (
	ExperimentStatusSetUpSuccess  ExperimentStatus = "SET_UP_SUCCESS"
	ExperimentStatusSetUpError    ExperimentStatus = "SET_UP_ERROR"
	ExperimentStatusSettingUp     ExperimentStatus = "SETTING_UP"
	ExperimentStatusNotSetUp      ExperimentStatus = "NOT_SET_UP"
	ExperimentStatusRemoving      ExperimentStatus = "REMOVING"
	ExperimentStatusRemoveSuccess ExperimentStatus = "REMOVE_SUCCESS"
	ExperimentStatusRemoveError   ExperimentStatus = "REMOVE_ERROR"
)

var AllExperimentStatus = []ExperimentStatus{
	ExperimentStatusSetUpSuccess,
	ExperimentStatusSetUpError,
	ExperimentStatusSettingUp,
	ExperimentStatusNotSetUp,
	ExperimentStatusRemoving,
	ExperimentStatusRemoveSuccess,
	ExperimentStatusRemoveError,
}

func (e ExperimentStatus) IsValid() bool {
	switch e {
	case ExperimentStatusSetUpSuccess, ExperimentStatusSetUpError, ExperimentStatusSettingUp, ExperimentStatusNotSetUp, ExperimentStatusRemoving, ExperimentStatusRemoveSuccess, ExperimentStatusRemoveError:
		return true
	}
	return false
}

func (e ExperimentStatus) String() string {
	return string(e)
}

func (e *ExperimentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExperimentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExperimentStatus", str)
	}
	return nil
}

func (e ExperimentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExternalSSOProvider string

const (
	ExternalSSOProviderGithub ExternalSSOProvider = "GITHUB"
)

var AllExternalSSOProvider = []ExternalSSOProvider{
	ExternalSSOProviderGithub,
}

func (e ExternalSSOProvider) IsValid() bool {
	switch e {
	case ExternalSSOProviderGithub:
		return true
	}
	return false
}

func (e ExternalSSOProvider) String() string {
	return string(e)
}

func (e *ExternalSSOProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExternalSSOProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExternalSSOProvider", str)
	}
	return nil
}

func (e ExternalSSOProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FalconMLConfigScalarFieldEnum string

const (
	FalconMLConfigScalarFieldEnumID                        FalconMLConfigScalarFieldEnum = "id"
	FalconMLConfigScalarFieldEnumPythonVersion             FalconMLConfigScalarFieldEnum = "pythonVersion"
	FalconMLConfigScalarFieldEnumFramework                 FalconMLConfigScalarFieldEnum = "framework"
	FalconMLConfigScalarFieldEnumFrameworkVersion          FalconMLConfigScalarFieldEnum = "frameworkVersion"
	FalconMLConfigScalarFieldEnumCudaVersion               FalconMLConfigScalarFieldEnum = "cudaVersion"
	FalconMLConfigScalarFieldEnumCudnnVersion              FalconMLConfigScalarFieldEnum = "cudnnVersion"
	FalconMLConfigScalarFieldEnumNvidiaCudaToolkitImageTag FalconMLConfigScalarFieldEnum = "nvidiaCudaToolkitImageTag"
)

var AllFalconMLConfigScalarFieldEnum = []FalconMLConfigScalarFieldEnum{
	FalconMLConfigScalarFieldEnumID,
	FalconMLConfigScalarFieldEnumPythonVersion,
	FalconMLConfigScalarFieldEnumFramework,
	FalconMLConfigScalarFieldEnumFrameworkVersion,
	FalconMLConfigScalarFieldEnumCudaVersion,
	FalconMLConfigScalarFieldEnumCudnnVersion,
	FalconMLConfigScalarFieldEnumNvidiaCudaToolkitImageTag,
}

func (e FalconMLConfigScalarFieldEnum) IsValid() bool {
	switch e {
	case FalconMLConfigScalarFieldEnumID, FalconMLConfigScalarFieldEnumPythonVersion, FalconMLConfigScalarFieldEnumFramework, FalconMLConfigScalarFieldEnumFrameworkVersion, FalconMLConfigScalarFieldEnumCudaVersion, FalconMLConfigScalarFieldEnumCudnnVersion, FalconMLConfigScalarFieldEnumNvidiaCudaToolkitImageTag:
		return true
	}
	return false
}

func (e FalconMLConfigScalarFieldEnum) String() string {
	return string(e)
}

func (e *FalconMLConfigScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FalconMLConfigScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FalconMLConfigScalarFieldEnum", str)
	}
	return nil
}

func (e FalconMLConfigScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KubernetesProfileScalarFieldEnum string

const (
	KubernetesProfileScalarFieldEnumID         KubernetesProfileScalarFieldEnum = "id"
	KubernetesProfileScalarFieldEnumName       KubernetesProfileScalarFieldEnum = "name"
	KubernetesProfileScalarFieldEnumAccountID  KubernetesProfileScalarFieldEnum = "accountId"
	KubernetesProfileScalarFieldEnumKubeconfig KubernetesProfileScalarFieldEnum = "kubeconfig"
)

var AllKubernetesProfileScalarFieldEnum = []KubernetesProfileScalarFieldEnum{
	KubernetesProfileScalarFieldEnumID,
	KubernetesProfileScalarFieldEnumName,
	KubernetesProfileScalarFieldEnumAccountID,
	KubernetesProfileScalarFieldEnumKubeconfig,
}

func (e KubernetesProfileScalarFieldEnum) IsValid() bool {
	switch e {
	case KubernetesProfileScalarFieldEnumID, KubernetesProfileScalarFieldEnumName, KubernetesProfileScalarFieldEnumAccountID, KubernetesProfileScalarFieldEnumKubeconfig:
		return true
	}
	return false
}

func (e KubernetesProfileScalarFieldEnum) String() string {
	return string(e)
}

func (e *KubernetesProfileScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KubernetesProfileScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KubernetesProfileScalarFieldEnum", str)
	}
	return nil
}

func (e KubernetesProfileScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PersonalAccessTokenScalarFieldEnum string

const (
	PersonalAccessTokenScalarFieldEnumID        PersonalAccessTokenScalarFieldEnum = "id"
	PersonalAccessTokenScalarFieldEnumUserID    PersonalAccessTokenScalarFieldEnum = "userId"
	PersonalAccessTokenScalarFieldEnumName      PersonalAccessTokenScalarFieldEnum = "name"
	PersonalAccessTokenScalarFieldEnumIsExpired PersonalAccessTokenScalarFieldEnum = "isExpired"
	PersonalAccessTokenScalarFieldEnumCreatedAt PersonalAccessTokenScalarFieldEnum = "createdAt"
	PersonalAccessTokenScalarFieldEnumUpdatedAt PersonalAccessTokenScalarFieldEnum = "updatedAt"
)

var AllPersonalAccessTokenScalarFieldEnum = []PersonalAccessTokenScalarFieldEnum{
	PersonalAccessTokenScalarFieldEnumID,
	PersonalAccessTokenScalarFieldEnumUserID,
	PersonalAccessTokenScalarFieldEnumName,
	PersonalAccessTokenScalarFieldEnumIsExpired,
	PersonalAccessTokenScalarFieldEnumCreatedAt,
	PersonalAccessTokenScalarFieldEnumUpdatedAt,
}

func (e PersonalAccessTokenScalarFieldEnum) IsValid() bool {
	switch e {
	case PersonalAccessTokenScalarFieldEnumID, PersonalAccessTokenScalarFieldEnumUserID, PersonalAccessTokenScalarFieldEnumName, PersonalAccessTokenScalarFieldEnumIsExpired, PersonalAccessTokenScalarFieldEnumCreatedAt, PersonalAccessTokenScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e PersonalAccessTokenScalarFieldEnum) String() string {
	return string(e)
}

func (e *PersonalAccessTokenScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PersonalAccessTokenScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PersonalAccessTokenScalarFieldEnum", str)
	}
	return nil
}

func (e PersonalAccessTokenScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectScalarFieldEnum string

const (
	ProjectScalarFieldEnumID                 ProjectScalarFieldEnum = "id"
	ProjectScalarFieldEnumName               ProjectScalarFieldEnum = "name"
	ProjectScalarFieldEnumStatus             ProjectScalarFieldEnum = "status"
	ProjectScalarFieldEnumAccountID          ProjectScalarFieldEnum = "accountId"
	ProjectScalarFieldEnumCloudProfileID     ProjectScalarFieldEnum = "cloudProfileId"
	ProjectScalarFieldEnumGithubRepositoryID ProjectScalarFieldEnum = "githubRepositoryId"
	ProjectScalarFieldEnumCreatedAt          ProjectScalarFieldEnum = "createdAt"
	ProjectScalarFieldEnumUpdatedAt          ProjectScalarFieldEnum = "updatedAt"
)

var AllProjectScalarFieldEnum = []ProjectScalarFieldEnum{
	ProjectScalarFieldEnumID,
	ProjectScalarFieldEnumName,
	ProjectScalarFieldEnumStatus,
	ProjectScalarFieldEnumAccountID,
	ProjectScalarFieldEnumCloudProfileID,
	ProjectScalarFieldEnumGithubRepositoryID,
	ProjectScalarFieldEnumCreatedAt,
	ProjectScalarFieldEnumUpdatedAt,
}

func (e ProjectScalarFieldEnum) IsValid() bool {
	switch e {
	case ProjectScalarFieldEnumID, ProjectScalarFieldEnumName, ProjectScalarFieldEnumStatus, ProjectScalarFieldEnumAccountID, ProjectScalarFieldEnumCloudProfileID, ProjectScalarFieldEnumGithubRepositoryID, ProjectScalarFieldEnumCreatedAt, ProjectScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e ProjectScalarFieldEnum) String() string {
	return string(e)
}

func (e *ProjectScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectScalarFieldEnum", str)
	}
	return nil
}

func (e ProjectScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectStatus string

const (
	ProjectStatusNotSetUp      ProjectStatus = "NOT_SET_UP"
	ProjectStatusSettingUp     ProjectStatus = "SETTING_UP"
	ProjectStatusSetupSuccess  ProjectStatus = "SETUP_SUCCESS"
	ProjectStatusSetupError    ProjectStatus = "SETUP_ERROR"
	ProjectStatusRemoving      ProjectStatus = "REMOVING"
	ProjectStatusRemoveSuccess ProjectStatus = "REMOVE_SUCCESS"
	ProjectStatusRemoveError   ProjectStatus = "REMOVE_ERROR"
)

var AllProjectStatus = []ProjectStatus{
	ProjectStatusNotSetUp,
	ProjectStatusSettingUp,
	ProjectStatusSetupSuccess,
	ProjectStatusSetupError,
	ProjectStatusRemoving,
	ProjectStatusRemoveSuccess,
	ProjectStatusRemoveError,
}

func (e ProjectStatus) IsValid() bool {
	switch e {
	case ProjectStatusNotSetUp, ProjectStatusSettingUp, ProjectStatusSetupSuccess, ProjectStatusSetupError, ProjectStatusRemoving, ProjectStatusRemoveSuccess, ProjectStatusRemoveError:
		return true
	}
	return false
}

func (e ProjectStatus) String() string {
	return string(e)
}

func (e *ProjectStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectStatus", str)
	}
	return nil
}

func (e ProjectStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

var AllQueryMode = []QueryMode{
	QueryModeDefault,
	QueryModeInsensitive,
}

func (e QueryMode) IsValid() bool {
	switch e {
	case QueryModeDefault, QueryModeInsensitive:
		return true
	}
	return false
}

func (e QueryMode) String() string {
	return string(e)
}

func (e *QueryMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QueryMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QueryMode", str)
	}
	return nil
}

func (e QueryMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RayClusterScalarFieldEnum string

const (
	RayClusterScalarFieldEnumID                  RayClusterScalarFieldEnum = "id"
	RayClusterScalarFieldEnumName                RayClusterScalarFieldEnum = "name"
	RayClusterScalarFieldEnumAccountID           RayClusterScalarFieldEnum = "accountId"
	RayClusterScalarFieldEnumKubernetesProfileID RayClusterScalarFieldEnum = "kubernetesProfileId"
	RayClusterScalarFieldEnumConfigID            RayClusterScalarFieldEnum = "configId"
	RayClusterScalarFieldEnumProjectID           RayClusterScalarFieldEnum = "projectId"
	RayClusterScalarFieldEnumStatus              RayClusterScalarFieldEnum = "status"
	RayClusterScalarFieldEnumCreatedAt           RayClusterScalarFieldEnum = "createdAt"
	RayClusterScalarFieldEnumUpdatedAt           RayClusterScalarFieldEnum = "updatedAt"
)

var AllRayClusterScalarFieldEnum = []RayClusterScalarFieldEnum{
	RayClusterScalarFieldEnumID,
	RayClusterScalarFieldEnumName,
	RayClusterScalarFieldEnumAccountID,
	RayClusterScalarFieldEnumKubernetesProfileID,
	RayClusterScalarFieldEnumConfigID,
	RayClusterScalarFieldEnumProjectID,
	RayClusterScalarFieldEnumStatus,
	RayClusterScalarFieldEnumCreatedAt,
	RayClusterScalarFieldEnumUpdatedAt,
}

func (e RayClusterScalarFieldEnum) IsValid() bool {
	switch e {
	case RayClusterScalarFieldEnumID, RayClusterScalarFieldEnumName, RayClusterScalarFieldEnumAccountID, RayClusterScalarFieldEnumKubernetesProfileID, RayClusterScalarFieldEnumConfigID, RayClusterScalarFieldEnumProjectID, RayClusterScalarFieldEnumStatus, RayClusterScalarFieldEnumCreatedAt, RayClusterScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e RayClusterScalarFieldEnum) String() string {
	return string(e)
}

func (e *RayClusterScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RayClusterScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RayClusterScalarFieldEnum", str)
	}
	return nil
}

func (e RayClusterScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RayClusterStatus string

const (
	RayClusterStatusSetUpSuccess  RayClusterStatus = "SET_UP_SUCCESS"
	RayClusterStatusSetUpError    RayClusterStatus = "SET_UP_ERROR"
	RayClusterStatusSettingUp     RayClusterStatus = "SETTING_UP"
	RayClusterStatusNotSetUp      RayClusterStatus = "NOT_SET_UP"
	RayClusterStatusRemoving      RayClusterStatus = "REMOVING"
	RayClusterStatusRemoveSuccess RayClusterStatus = "REMOVE_SUCCESS"
	RayClusterStatusRemoveError   RayClusterStatus = "REMOVE_ERROR"
)

var AllRayClusterStatus = []RayClusterStatus{
	RayClusterStatusSetUpSuccess,
	RayClusterStatusSetUpError,
	RayClusterStatusSettingUp,
	RayClusterStatusNotSetUp,
	RayClusterStatusRemoving,
	RayClusterStatusRemoveSuccess,
	RayClusterStatusRemoveError,
}

func (e RayClusterStatus) IsValid() bool {
	switch e {
	case RayClusterStatusSetUpSuccess, RayClusterStatusSetUpError, RayClusterStatusSettingUp, RayClusterStatusNotSetUp, RayClusterStatusRemoving, RayClusterStatusRemoveSuccess, RayClusterStatusRemoveError:
		return true
	}
	return false
}

func (e RayClusterStatus) String() string {
	return string(e)
}

func (e *RayClusterStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RayClusterStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RayClusterStatus", str)
	}
	return nil
}

func (e RayClusterStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Various types of managed resources
type ResourceType string

const (
	ResourceTypeDataStorage       ResourceType = "DATA_STORAGE"
	ResourceTypeTraining          ResourceType = "TRAINING"
	ResourceTypeExperiment        ResourceType = "EXPERIMENT"
	ResourceTypeApplication       ResourceType = "APPLICATION"
	ResourceTypeRayCluster        ResourceType = "RAY_CLUSTER"
	ResourceTypeContainerRegistry ResourceType = "CONTAINER_REGISTRY"
	ResourceTypeVpc               ResourceType = "VPC"
)

var AllResourceType = []ResourceType{
	ResourceTypeDataStorage,
	ResourceTypeTraining,
	ResourceTypeExperiment,
	ResourceTypeApplication,
	ResourceTypeRayCluster,
	ResourceTypeContainerRegistry,
	ResourceTypeVpc,
}

func (e ResourceType) IsValid() bool {
	switch e {
	case ResourceTypeDataStorage, ResourceTypeTraining, ResourceTypeExperiment, ResourceTypeApplication, ResourceTypeRayCluster, ResourceTypeContainerRegistry, ResourceTypeVpc:
		return true
	}
	return false
}

func (e ResourceType) String() string {
	return string(e)
}

func (e *ResourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceType", str)
	}
	return nil
}

func (e ResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleInTeam string

const (
	RoleInTeamAdmin  RoleInTeam = "ADMIN"
	RoleInTeamMember RoleInTeam = "MEMBER"
)

var AllRoleInTeam = []RoleInTeam{
	RoleInTeamAdmin,
	RoleInTeamMember,
}

func (e RoleInTeam) IsValid() bool {
	switch e {
	case RoleInTeamAdmin, RoleInTeamMember:
		return true
	}
	return false
}

func (e RoleInTeam) String() string {
	return string(e)
}

func (e *RoleInTeam) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleInTeam(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleInTeam", str)
	}
	return nil
}

func (e RoleInTeam) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskActionScalarFieldEnum string

const (
	TaskActionScalarFieldEnumID                    TaskActionScalarFieldEnum = "id"
	TaskActionScalarFieldEnumVpcID                 TaskActionScalarFieldEnum = "vpcId"
	TaskActionScalarFieldEnumApplicationID         TaskActionScalarFieldEnum = "applicationId"
	TaskActionScalarFieldEnumTrainingID            TaskActionScalarFieldEnum = "trainingId"
	TaskActionScalarFieldEnumTrainingAnsibleTaskID TaskActionScalarFieldEnum = "trainingAnsibleTaskId"
	TaskActionScalarFieldEnumDataStorageID         TaskActionScalarFieldEnum = "dataStorageId"
	TaskActionScalarFieldEnumExperimentID          TaskActionScalarFieldEnum = "experimentId"
	TaskActionScalarFieldEnumExperimentRunID       TaskActionScalarFieldEnum = "experimentRunId"
	TaskActionScalarFieldEnumRayClusterID          TaskActionScalarFieldEnum = "rayClusterId"
	TaskActionScalarFieldEnumUserID                TaskActionScalarFieldEnum = "userId"
	TaskActionScalarFieldEnumType                  TaskActionScalarFieldEnum = "type"
	TaskActionScalarFieldEnumState                 TaskActionScalarFieldEnum = "state"
	TaskActionScalarFieldEnumCreatedAt             TaskActionScalarFieldEnum = "createdAt"
)

var AllTaskActionScalarFieldEnum = []TaskActionScalarFieldEnum{
	TaskActionScalarFieldEnumID,
	TaskActionScalarFieldEnumVpcID,
	TaskActionScalarFieldEnumApplicationID,
	TaskActionScalarFieldEnumTrainingID,
	TaskActionScalarFieldEnumTrainingAnsibleTaskID,
	TaskActionScalarFieldEnumDataStorageID,
	TaskActionScalarFieldEnumExperimentID,
	TaskActionScalarFieldEnumExperimentRunID,
	TaskActionScalarFieldEnumRayClusterID,
	TaskActionScalarFieldEnumUserID,
	TaskActionScalarFieldEnumType,
	TaskActionScalarFieldEnumState,
	TaskActionScalarFieldEnumCreatedAt,
}

func (e TaskActionScalarFieldEnum) IsValid() bool {
	switch e {
	case TaskActionScalarFieldEnumID, TaskActionScalarFieldEnumVpcID, TaskActionScalarFieldEnumApplicationID, TaskActionScalarFieldEnumTrainingID, TaskActionScalarFieldEnumTrainingAnsibleTaskID, TaskActionScalarFieldEnumDataStorageID, TaskActionScalarFieldEnumExperimentID, TaskActionScalarFieldEnumExperimentRunID, TaskActionScalarFieldEnumRayClusterID, TaskActionScalarFieldEnumUserID, TaskActionScalarFieldEnumType, TaskActionScalarFieldEnumState, TaskActionScalarFieldEnumCreatedAt:
		return true
	}
	return false
}

func (e TaskActionScalarFieldEnum) String() string {
	return string(e)
}

func (e *TaskActionScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskActionScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskActionScalarFieldEnum", str)
	}
	return nil
}

func (e TaskActionScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskActionState string

const (
	TaskActionStateNotStarted     TaskActionState = "NOT_STARTED"
	TaskActionStateWaitingToStart TaskActionState = "WAITING_TO_START"
	TaskActionStateInProgress     TaskActionState = "IN_PROGRESS"
	TaskActionStateSuccess        TaskActionState = "SUCCESS"
	TaskActionStateError          TaskActionState = "ERROR"
	TaskActionStateSkipped        TaskActionState = "SKIPPED"
)

var AllTaskActionState = []TaskActionState{
	TaskActionStateNotStarted,
	TaskActionStateWaitingToStart,
	TaskActionStateInProgress,
	TaskActionStateSuccess,
	TaskActionStateError,
	TaskActionStateSkipped,
}

func (e TaskActionState) IsValid() bool {
	switch e {
	case TaskActionStateNotStarted, TaskActionStateWaitingToStart, TaskActionStateInProgress, TaskActionStateSuccess, TaskActionStateError, TaskActionStateSkipped:
		return true
	}
	return false
}

func (e TaskActionState) String() string {
	return string(e)
}

func (e *TaskActionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskActionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskActionState", str)
	}
	return nil
}

func (e TaskActionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskActionType string

const (
	TaskActionTypeCreate TaskActionType = "CREATE"
	TaskActionTypeUpdate TaskActionType = "UPDATE"
	TaskActionTypeDelete TaskActionType = "DELETE"
	TaskActionTypeStart  TaskActionType = "START"
	TaskActionTypeStop   TaskActionType = "STOP"
)

var AllTaskActionType = []TaskActionType{
	TaskActionTypeCreate,
	TaskActionTypeUpdate,
	TaskActionTypeDelete,
	TaskActionTypeStart,
	TaskActionTypeStop,
}

func (e TaskActionType) IsValid() bool {
	switch e {
	case TaskActionTypeCreate, TaskActionTypeUpdate, TaskActionTypeDelete, TaskActionTypeStart, TaskActionTypeStop:
		return true
	}
	return false
}

func (e TaskActionType) String() string {
	return string(e)
}

func (e *TaskActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskActionType", str)
	}
	return nil
}

func (e TaskActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStepScalarFieldEnum string

const (
	TaskStepScalarFieldEnumID           TaskStepScalarFieldEnum = "id"
	TaskStepScalarFieldEnumTaskActionID TaskStepScalarFieldEnum = "taskActionId"
	TaskStepScalarFieldEnumStepNumber   TaskStepScalarFieldEnum = "stepNumber"
	TaskStepScalarFieldEnumState        TaskStepScalarFieldEnum = "state"
	TaskStepScalarFieldEnumUpdatedAt    TaskStepScalarFieldEnum = "updatedAt"
)

var AllTaskStepScalarFieldEnum = []TaskStepScalarFieldEnum{
	TaskStepScalarFieldEnumID,
	TaskStepScalarFieldEnumTaskActionID,
	TaskStepScalarFieldEnumStepNumber,
	TaskStepScalarFieldEnumState,
	TaskStepScalarFieldEnumUpdatedAt,
}

func (e TaskStepScalarFieldEnum) IsValid() bool {
	switch e {
	case TaskStepScalarFieldEnumID, TaskStepScalarFieldEnumTaskActionID, TaskStepScalarFieldEnumStepNumber, TaskStepScalarFieldEnumState, TaskStepScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e TaskStepScalarFieldEnum) String() string {
	return string(e)
}

func (e *TaskStepScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStepScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStepScalarFieldEnum", str)
	}
	return nil
}

func (e TaskStepScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStepState string

const (
	TaskStepStateNotStarted     TaskStepState = "NOT_STARTED"
	TaskStepStateWaitingToStart TaskStepState = "WAITING_TO_START"
	TaskStepStateStartError     TaskStepState = "START_ERROR"
	TaskStepStateInProgress     TaskStepState = "IN_PROGRESS"
	TaskStepStateSuccess        TaskStepState = "SUCCESS"
	TaskStepStateError          TaskStepState = "ERROR"
	TaskStepStateSkipped        TaskStepState = "SKIPPED"
)

var AllTaskStepState = []TaskStepState{
	TaskStepStateNotStarted,
	TaskStepStateWaitingToStart,
	TaskStepStateStartError,
	TaskStepStateInProgress,
	TaskStepStateSuccess,
	TaskStepStateError,
	TaskStepStateSkipped,
}

func (e TaskStepState) IsValid() bool {
	switch e {
	case TaskStepStateNotStarted, TaskStepStateWaitingToStart, TaskStepStateStartError, TaskStepStateInProgress, TaskStepStateSuccess, TaskStepStateError, TaskStepStateSkipped:
		return true
	}
	return false
}

func (e TaskStepState) String() string {
	return string(e)
}

func (e *TaskStepState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStepState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStepState", str)
	}
	return nil
}

func (e TaskStepState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamMemberInvitationScalarFieldEnum string

const (
	TeamMemberInvitationScalarFieldEnumID        TeamMemberInvitationScalarFieldEnum = "id"
	TeamMemberInvitationScalarFieldEnumTeamID    TeamMemberInvitationScalarFieldEnum = "teamId"
	TeamMemberInvitationScalarFieldEnumUserID    TeamMemberInvitationScalarFieldEnum = "userId"
	TeamMemberInvitationScalarFieldEnumUserEmail TeamMemberInvitationScalarFieldEnum = "userEmail"
	TeamMemberInvitationScalarFieldEnumRole      TeamMemberInvitationScalarFieldEnum = "role"
	TeamMemberInvitationScalarFieldEnumStatus    TeamMemberInvitationScalarFieldEnum = "status"
	TeamMemberInvitationScalarFieldEnumExpiresAt TeamMemberInvitationScalarFieldEnum = "expiresAt"
	TeamMemberInvitationScalarFieldEnumCreatedAt TeamMemberInvitationScalarFieldEnum = "createdAt"
)

var AllTeamMemberInvitationScalarFieldEnum = []TeamMemberInvitationScalarFieldEnum{
	TeamMemberInvitationScalarFieldEnumID,
	TeamMemberInvitationScalarFieldEnumTeamID,
	TeamMemberInvitationScalarFieldEnumUserID,
	TeamMemberInvitationScalarFieldEnumUserEmail,
	TeamMemberInvitationScalarFieldEnumRole,
	TeamMemberInvitationScalarFieldEnumStatus,
	TeamMemberInvitationScalarFieldEnumExpiresAt,
	TeamMemberInvitationScalarFieldEnumCreatedAt,
}

func (e TeamMemberInvitationScalarFieldEnum) IsValid() bool {
	switch e {
	case TeamMemberInvitationScalarFieldEnumID, TeamMemberInvitationScalarFieldEnumTeamID, TeamMemberInvitationScalarFieldEnumUserID, TeamMemberInvitationScalarFieldEnumUserEmail, TeamMemberInvitationScalarFieldEnumRole, TeamMemberInvitationScalarFieldEnumStatus, TeamMemberInvitationScalarFieldEnumExpiresAt, TeamMemberInvitationScalarFieldEnumCreatedAt:
		return true
	}
	return false
}

func (e TeamMemberInvitationScalarFieldEnum) String() string {
	return string(e)
}

func (e *TeamMemberInvitationScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamMemberInvitationScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamMemberInvitationScalarFieldEnum", str)
	}
	return nil
}

func (e TeamMemberInvitationScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamMemberInvitationStatus string

const (
	TeamMemberInvitationStatusPending  TeamMemberInvitationStatus = "PENDING"
	TeamMemberInvitationStatusAccepted TeamMemberInvitationStatus = "ACCEPTED"
	TeamMemberInvitationStatusExpired  TeamMemberInvitationStatus = "EXPIRED"
)

var AllTeamMemberInvitationStatus = []TeamMemberInvitationStatus{
	TeamMemberInvitationStatusPending,
	TeamMemberInvitationStatusAccepted,
	TeamMemberInvitationStatusExpired,
}

func (e TeamMemberInvitationStatus) IsValid() bool {
	switch e {
	case TeamMemberInvitationStatusPending, TeamMemberInvitationStatusAccepted, TeamMemberInvitationStatusExpired:
		return true
	}
	return false
}

func (e TeamMemberInvitationStatus) String() string {
	return string(e)
}

func (e *TeamMemberInvitationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamMemberInvitationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamMemberInvitationStatus", str)
	}
	return nil
}

func (e TeamMemberInvitationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingAnsibleTaskScalarFieldEnum string

const (
	TrainingAnsibleTaskScalarFieldEnumID                   TrainingAnsibleTaskScalarFieldEnum = "id"
	TrainingAnsibleTaskScalarFieldEnumType                 TrainingAnsibleTaskScalarFieldEnum = "type"
	TrainingAnsibleTaskScalarFieldEnumTrainingID           TrainingAnsibleTaskScalarFieldEnum = "trainingId"
	TrainingAnsibleTaskScalarFieldEnumDeploymentTrainingID TrainingAnsibleTaskScalarFieldEnum = "deploymentTrainingId"
	TrainingAnsibleTaskScalarFieldEnumCreatedAt            TrainingAnsibleTaskScalarFieldEnum = "createdAt"
)

var AllTrainingAnsibleTaskScalarFieldEnum = []TrainingAnsibleTaskScalarFieldEnum{
	TrainingAnsibleTaskScalarFieldEnumID,
	TrainingAnsibleTaskScalarFieldEnumType,
	TrainingAnsibleTaskScalarFieldEnumTrainingID,
	TrainingAnsibleTaskScalarFieldEnumDeploymentTrainingID,
	TrainingAnsibleTaskScalarFieldEnumCreatedAt,
}

func (e TrainingAnsibleTaskScalarFieldEnum) IsValid() bool {
	switch e {
	case TrainingAnsibleTaskScalarFieldEnumID, TrainingAnsibleTaskScalarFieldEnumType, TrainingAnsibleTaskScalarFieldEnumTrainingID, TrainingAnsibleTaskScalarFieldEnumDeploymentTrainingID, TrainingAnsibleTaskScalarFieldEnumCreatedAt:
		return true
	}
	return false
}

func (e TrainingAnsibleTaskScalarFieldEnum) String() string {
	return string(e)
}

func (e *TrainingAnsibleTaskScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingAnsibleTaskScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrainingAnsibleTaskScalarFieldEnum", str)
	}
	return nil
}

func (e TrainingAnsibleTaskScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingAnsibleTaskType string

const (
	TrainingAnsibleTaskTypeAll              TrainingAnsibleTaskType = "ALL"
	TrainingAnsibleTaskTypeBasic            TrainingAnsibleTaskType = "BASIC"
	TrainingAnsibleTaskTypeFastBoot         TrainingAnsibleTaskType = "FAST_BOOT"
	TrainingAnsibleTaskTypeLegacy           TrainingAnsibleTaskType = "LEGACY"
	TrainingAnsibleTaskTypeMountDataStorage TrainingAnsibleTaskType = "MOUNT_DATA_STORAGE"
	TrainingAnsibleTaskTypeReboot           TrainingAnsibleTaskType = "REBOOT"
)

var AllTrainingAnsibleTaskType = []TrainingAnsibleTaskType{
	TrainingAnsibleTaskTypeAll,
	TrainingAnsibleTaskTypeBasic,
	TrainingAnsibleTaskTypeFastBoot,
	TrainingAnsibleTaskTypeLegacy,
	TrainingAnsibleTaskTypeMountDataStorage,
	TrainingAnsibleTaskTypeReboot,
}

func (e TrainingAnsibleTaskType) IsValid() bool {
	switch e {
	case TrainingAnsibleTaskTypeAll, TrainingAnsibleTaskTypeBasic, TrainingAnsibleTaskTypeFastBoot, TrainingAnsibleTaskTypeLegacy, TrainingAnsibleTaskTypeMountDataStorage, TrainingAnsibleTaskTypeReboot:
		return true
	}
	return false
}

func (e TrainingAnsibleTaskType) String() string {
	return string(e)
}

func (e *TrainingAnsibleTaskType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingAnsibleTaskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrainingAnsibleTaskType", str)
	}
	return nil
}

func (e TrainingAnsibleTaskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingMountStatus string

const (
	TrainingMountStatusMounting   TrainingMountStatus = "MOUNTING"
	TrainingMountStatusUnmounting TrainingMountStatus = "UNMOUNTING"
	TrainingMountStatusSuccess    TrainingMountStatus = "SUCCESS"
	TrainingMountStatusError      TrainingMountStatus = "ERROR"
)

var AllTrainingMountStatus = []TrainingMountStatus{
	TrainingMountStatusMounting,
	TrainingMountStatusUnmounting,
	TrainingMountStatusSuccess,
	TrainingMountStatusError,
}

func (e TrainingMountStatus) IsValid() bool {
	switch e {
	case TrainingMountStatusMounting, TrainingMountStatusUnmounting, TrainingMountStatusSuccess, TrainingMountStatusError:
		return true
	}
	return false
}

func (e TrainingMountStatus) String() string {
	return string(e)
}

func (e *TrainingMountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingMountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrainingMountStatus", str)
	}
	return nil
}

func (e TrainingMountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingRunningState string

const (
	TrainingRunningStateStarting TrainingRunningState = "STARTING"
	TrainingRunningStateRunning  TrainingRunningState = "RUNNING"
	TrainingRunningStateStopping TrainingRunningState = "STOPPING"
	TrainingRunningStateSleeping TrainingRunningState = "SLEEPING"
)

var AllTrainingRunningState = []TrainingRunningState{
	TrainingRunningStateStarting,
	TrainingRunningStateRunning,
	TrainingRunningStateStopping,
	TrainingRunningStateSleeping,
}

func (e TrainingRunningState) IsValid() bool {
	switch e {
	case TrainingRunningStateStarting, TrainingRunningStateRunning, TrainingRunningStateStopping, TrainingRunningStateSleeping:
		return true
	}
	return false
}

func (e TrainingRunningState) String() string {
	return string(e)
}

func (e *TrainingRunningState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingRunningState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrainingRunningState", str)
	}
	return nil
}

func (e TrainingRunningState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingScalarFieldEnum string

const (
	TrainingScalarFieldEnumID                          TrainingScalarFieldEnum = "id"
	TrainingScalarFieldEnumName                        TrainingScalarFieldEnum = "name"
	TrainingScalarFieldEnumAccountID                   TrainingScalarFieldEnum = "accountId"
	TrainingScalarFieldEnumCloudProfileID              TrainingScalarFieldEnum = "cloudProfileId"
	TrainingScalarFieldEnumCloudProviderFalconConfigID TrainingScalarFieldEnum = "cloudProviderFalconConfigId"
	TrainingScalarFieldEnumFalconMLConfigID            TrainingScalarFieldEnum = "falconMLConfigId"
	TrainingScalarFieldEnumProjectID                   TrainingScalarFieldEnum = "projectId"
	TrainingScalarFieldEnumStatus                      TrainingScalarFieldEnum = "status"
	TrainingScalarFieldEnumState                       TrainingScalarFieldEnum = "state"
	TrainingScalarFieldEnumMountStatus                 TrainingScalarFieldEnum = "mountStatus"
	TrainingScalarFieldEnumCreatedAt                   TrainingScalarFieldEnum = "createdAt"
	TrainingScalarFieldEnumUpdatedAt                   TrainingScalarFieldEnum = "updatedAt"
)

var AllTrainingScalarFieldEnum = []TrainingScalarFieldEnum{
	TrainingScalarFieldEnumID,
	TrainingScalarFieldEnumName,
	TrainingScalarFieldEnumAccountID,
	TrainingScalarFieldEnumCloudProfileID,
	TrainingScalarFieldEnumCloudProviderFalconConfigID,
	TrainingScalarFieldEnumFalconMLConfigID,
	TrainingScalarFieldEnumProjectID,
	TrainingScalarFieldEnumStatus,
	TrainingScalarFieldEnumState,
	TrainingScalarFieldEnumMountStatus,
	TrainingScalarFieldEnumCreatedAt,
	TrainingScalarFieldEnumUpdatedAt,
}

func (e TrainingScalarFieldEnum) IsValid() bool {
	switch e {
	case TrainingScalarFieldEnumID, TrainingScalarFieldEnumName, TrainingScalarFieldEnumAccountID, TrainingScalarFieldEnumCloudProfileID, TrainingScalarFieldEnumCloudProviderFalconConfigID, TrainingScalarFieldEnumFalconMLConfigID, TrainingScalarFieldEnumProjectID, TrainingScalarFieldEnumStatus, TrainingScalarFieldEnumState, TrainingScalarFieldEnumMountStatus, TrainingScalarFieldEnumCreatedAt, TrainingScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e TrainingScalarFieldEnum) String() string {
	return string(e)
}

func (e *TrainingScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrainingScalarFieldEnum", str)
	}
	return nil
}

func (e TrainingScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingStatus string

const (
	TrainingStatusDeploySuccess  TrainingStatus = "DEPLOY_SUCCESS"
	TrainingStatusDeployError    TrainingStatus = "DEPLOY_ERROR"
	TrainingStatusDeploying      TrainingStatus = "DEPLOYING"
	TrainingStatusUndeployed     TrainingStatus = "UNDEPLOYED"
	TrainingStatusDestroying     TrainingStatus = "DESTROYING"
	TrainingStatusDestroyError   TrainingStatus = "DESTROY_ERROR"
	TrainingStatusDestroySuccess TrainingStatus = "DESTROY_SUCCESS"
)

var AllTrainingStatus = []TrainingStatus{
	TrainingStatusDeploySuccess,
	TrainingStatusDeployError,
	TrainingStatusDeploying,
	TrainingStatusUndeployed,
	TrainingStatusDestroying,
	TrainingStatusDestroyError,
	TrainingStatusDestroySuccess,
}

func (e TrainingStatus) IsValid() bool {
	switch e {
	case TrainingStatusDeploySuccess, TrainingStatusDeployError, TrainingStatusDeploying, TrainingStatusUndeployed, TrainingStatusDestroying, TrainingStatusDestroyError, TrainingStatusDestroySuccess:
		return true
	}
	return false
}

func (e TrainingStatus) String() string {
	return string(e)
}

func (e *TrainingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrainingStatus", str)
	}
	return nil
}

func (e TrainingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserSessionScalarFieldEnum string

const (
	UserSessionScalarFieldEnumID          UserSessionScalarFieldEnum = "id"
	UserSessionScalarFieldEnumUserID      UserSessionScalarFieldEnum = "userId"
	UserSessionScalarFieldEnumGithubToken UserSessionScalarFieldEnum = "githubToken"
	UserSessionScalarFieldEnumCreatedAt   UserSessionScalarFieldEnum = "createdAt"
)

var AllUserSessionScalarFieldEnum = []UserSessionScalarFieldEnum{
	UserSessionScalarFieldEnumID,
	UserSessionScalarFieldEnumUserID,
	UserSessionScalarFieldEnumGithubToken,
	UserSessionScalarFieldEnumCreatedAt,
}

func (e UserSessionScalarFieldEnum) IsValid() bool {
	switch e {
	case UserSessionScalarFieldEnumID, UserSessionScalarFieldEnumUserID, UserSessionScalarFieldEnumGithubToken, UserSessionScalarFieldEnumCreatedAt:
		return true
	}
	return false
}

func (e UserSessionScalarFieldEnum) String() string {
	return string(e)
}

func (e *UserSessionScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSessionScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserSessionScalarFieldEnum", str)
	}
	return nil
}

func (e UserSessionScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VPCAttachmentScalarFieldEnum string

const (
	VPCAttachmentScalarFieldEnumID            VPCAttachmentScalarFieldEnum = "id"
	VPCAttachmentScalarFieldEnumCidrBlock     VPCAttachmentScalarFieldEnum = "cidrBlock"
	VPCAttachmentScalarFieldEnumStatus        VPCAttachmentScalarFieldEnum = "status"
	VPCAttachmentScalarFieldEnumVpcID         VPCAttachmentScalarFieldEnum = "vpcId"
	VPCAttachmentScalarFieldEnumApplicationID VPCAttachmentScalarFieldEnum = "applicationId"
	VPCAttachmentScalarFieldEnumTrainingID    VPCAttachmentScalarFieldEnum = "trainingId"
)

var AllVPCAttachmentScalarFieldEnum = []VPCAttachmentScalarFieldEnum{
	VPCAttachmentScalarFieldEnumID,
	VPCAttachmentScalarFieldEnumCidrBlock,
	VPCAttachmentScalarFieldEnumStatus,
	VPCAttachmentScalarFieldEnumVpcID,
	VPCAttachmentScalarFieldEnumApplicationID,
	VPCAttachmentScalarFieldEnumTrainingID,
}

func (e VPCAttachmentScalarFieldEnum) IsValid() bool {
	switch e {
	case VPCAttachmentScalarFieldEnumID, VPCAttachmentScalarFieldEnumCidrBlock, VPCAttachmentScalarFieldEnumStatus, VPCAttachmentScalarFieldEnumVpcID, VPCAttachmentScalarFieldEnumApplicationID, VPCAttachmentScalarFieldEnumTrainingID:
		return true
	}
	return false
}

func (e VPCAttachmentScalarFieldEnum) String() string {
	return string(e)
}

func (e *VPCAttachmentScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VPCAttachmentScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VPCAttachmentScalarFieldEnum", str)
	}
	return nil
}

func (e VPCAttachmentScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VPCAttachmentStatus string

const (
	VPCAttachmentStatusAttaching VPCAttachmentStatus = "ATTACHING"
	VPCAttachmentStatusAttached  VPCAttachmentStatus = "ATTACHED"
	VPCAttachmentStatusDetaching VPCAttachmentStatus = "DETACHING"
)

var AllVPCAttachmentStatus = []VPCAttachmentStatus{
	VPCAttachmentStatusAttaching,
	VPCAttachmentStatusAttached,
	VPCAttachmentStatusDetaching,
}

func (e VPCAttachmentStatus) IsValid() bool {
	switch e {
	case VPCAttachmentStatusAttaching, VPCAttachmentStatusAttached, VPCAttachmentStatusDetaching:
		return true
	}
	return false
}

func (e VPCAttachmentStatus) String() string {
	return string(e)
}

func (e *VPCAttachmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VPCAttachmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VPCAttachmentStatus", str)
	}
	return nil
}

func (e VPCAttachmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VPCScalarFieldEnum string

const (
	VPCScalarFieldEnumID                           VPCScalarFieldEnum = "id"
	VPCScalarFieldEnumStatus                       VPCScalarFieldEnum = "status"
	VPCScalarFieldEnumAccountID                    VPCScalarFieldEnum = "accountId"
	VPCScalarFieldEnumCloudProfileID               VPCScalarFieldEnum = "cloudProfileId"
	VPCScalarFieldEnumCloudProviderNebulonConfigID VPCScalarFieldEnum = "cloudProviderNebulonConfigId"
	VPCScalarFieldEnumCreatedAt                    VPCScalarFieldEnum = "createdAt"
	VPCScalarFieldEnumUpdatedAt                    VPCScalarFieldEnum = "updatedAt"
)

var AllVPCScalarFieldEnum = []VPCScalarFieldEnum{
	VPCScalarFieldEnumID,
	VPCScalarFieldEnumStatus,
	VPCScalarFieldEnumAccountID,
	VPCScalarFieldEnumCloudProfileID,
	VPCScalarFieldEnumCloudProviderNebulonConfigID,
	VPCScalarFieldEnumCreatedAt,
	VPCScalarFieldEnumUpdatedAt,
}

func (e VPCScalarFieldEnum) IsValid() bool {
	switch e {
	case VPCScalarFieldEnumID, VPCScalarFieldEnumStatus, VPCScalarFieldEnumAccountID, VPCScalarFieldEnumCloudProfileID, VPCScalarFieldEnumCloudProviderNebulonConfigID, VPCScalarFieldEnumCreatedAt, VPCScalarFieldEnumUpdatedAt:
		return true
	}
	return false
}

func (e VPCScalarFieldEnum) String() string {
	return string(e)
}

func (e *VPCScalarFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VPCScalarFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VPCScalarFieldEnum", str)
	}
	return nil
}

func (e VPCScalarFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VPCStatus string

const (
	VPCStatusDeploySuccess  VPCStatus = "DEPLOY_SUCCESS"
	VPCStatusDeployError    VPCStatus = "DEPLOY_ERROR"
	VPCStatusDeploying      VPCStatus = "DEPLOYING"
	VPCStatusUndeployed     VPCStatus = "UNDEPLOYED"
	VPCStatusDestroying     VPCStatus = "DESTROYING"
	VPCStatusDestroyError   VPCStatus = "DESTROY_ERROR"
	VPCStatusDestroySuccess VPCStatus = "DESTROY_SUCCESS"
)

var AllVPCStatus = []VPCStatus{
	VPCStatusDeploySuccess,
	VPCStatusDeployError,
	VPCStatusDeploying,
	VPCStatusUndeployed,
	VPCStatusDestroying,
	VPCStatusDestroyError,
	VPCStatusDestroySuccess,
}

func (e VPCStatus) IsValid() bool {
	switch e {
	case VPCStatusDeploySuccess, VPCStatusDeployError, VPCStatusDeploying, VPCStatusUndeployed, VPCStatusDestroying, VPCStatusDestroyError, VPCStatusDestroySuccess:
		return true
	}
	return false
}

func (e VPCStatus) String() string {
	return string(e)
}

func (e *VPCStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VPCStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VPCStatus", str)
	}
	return nil
}

func (e VPCStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
